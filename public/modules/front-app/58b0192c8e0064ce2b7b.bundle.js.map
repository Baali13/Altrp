{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicBarChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicPieChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicAreaChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicLineChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicTableWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicDonutChart.js","webpack:///./resources/modules/editor/src/js/components/altrp-diagram/AltrpDiagram.js","webpack:///./resources/modules/admin/src/components/dashboard/widgetTypes.js"],"names":["Spinner","className","style","width","height","role","EmptyWidget","DynamicBarChart","dataUrl","colorScheme","useState","isLoading","setIsLoading","data","setData","getData","a","axios","req","status","useEffect","Array","isArray","length","series","DynamicPieChart","options","explode","DynamicAreaChart","newData","map","item","key","Date","DynamicLineChart","strokeWidth","line","DynamicTableWidget","isVertical","DynamicDonutChart","doughnut","AltrpDiagram","settings","sql","query","dataSource","value","type"],"mappings":"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","file":"58b0192c8e0064ce2b7b.bundle.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\n\r\nconst EmptyWidget = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">Нет данных</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BarChart, BarSeries } from \"reaviz\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nconst DynamicBarChart = ({ dataUrl, width = 300, height = 300, colorScheme }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = async (dataUrl) => {\r\n    setIsLoading(true);\r\n    const req = await axios(dataUrl);\r\n    if (req.status === 200 && typeof req.data !== \"string\") {\r\n      setData(req.data);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData(dataUrl);\r\n  }, [dataUrl]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <BarChart\r\n      height={height}\r\n      width={width}\r\n      data={data}\r\n      series={<BarSeries colorScheme={colorScheme} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DynamicBarChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { PieChart, PieArcSeries } from \"reaviz\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nconst DynamicPieChart = ({\r\n  dataUrl,\r\n  width = 300,\r\n  height = 300,\r\n  colorScheme,\r\n  options = {\r\n    explode: false,\r\n  },\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = async (dataUrl) => {\r\n    setIsLoading(true);\r\n    const req = await axios(dataUrl);\r\n    if (req.status === 200 && typeof req.data !== \"string\") {\r\n      setData(req.data);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData(dataUrl);\r\n  }, [dataUrl]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <PieChart\r\n      height={height}\r\n      width={width}\r\n      data={data || []}\r\n      series={<PieArcSeries explode={options.explode} colorScheme={colorScheme} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DynamicPieChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { AreaChart } from \"reaviz\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nconst DynamicAreaChart = ({ dataUrl, width = 300, height = 300, colorScheme, options = {} }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = async (dataUrl) => {\r\n    setIsLoading(true);\r\n    const req = await axios(dataUrl);\r\n    if (req.status === 200 && typeof req.data !== \"string\") {\r\n      const newData = req.data.map((item) => {\r\n        const key = new Date(item.key);\r\n        if (key) {\r\n          return {\r\n            key,\r\n            data: item.data,\r\n          };\r\n        }\r\n      });\r\n      setData(newData);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData(dataUrl);\r\n  }, [dataUrl]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return <AreaChart height={height} width={width} data={data} colorScheme={colorScheme} />;\r\n};\r\n\r\nexport default DynamicAreaChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { LineChart, LineSeries, Line } from \"reaviz\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nconst DynamicLineChart = ({ dataUrl, width = 300, height = 300, strokeWidth = 3, colorScheme }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = async (dataUrl) => {\r\n    setIsLoading(true);\r\n    const req = await axios(dataUrl);\r\n    if (req.status === 200 && typeof req.data !== \"string\") {\r\n      const newData = req.data.map((item) => {\r\n        const key = new Date(item.key);\r\n        if (key) {\r\n          return {\r\n            key,\r\n            data: item.data,\r\n          };\r\n        }\r\n      });\r\n      setData(newData);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData(dataUrl);\r\n  }, [dataUrl]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <LineChart\r\n      height={height}\r\n      width={width}\r\n      data={data}\r\n      series={<LineSeries line={<Line strokeWidth={strokeWidth} />} colorScheme={colorScheme} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DynamicLineChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nconst DynamicTableWidget = ({ dataUrl, options = {} }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = async (dataUrl) => {\r\n    setIsLoading(true);\r\n    const req = await axios(dataUrl);\r\n    if (req.status === 200 && typeof req.data !== \"string\") {\r\n      setData(req.data);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData(dataUrl);\r\n  }, [dataUrl]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  if (options.isVertical) {\r\n    return (\r\n      <div className=\"widget-table\">\r\n        <table className=\"vertical-table\">\r\n          <tbody>\r\n            {data.map((item, key) => (\r\n              <tr key={key}>\r\n                <td>{item.key}</td>\r\n                <td>{item.data}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"widget-table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {data.map((item, key) => (\r\n              <th key={key}>{item.key}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {data.map((item, key) => (\r\n              <td key={key}>{item.data}</td>\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicTableWidget;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { PieChart, PieArcSeries } from \"reaviz\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nconst DynamicDonutChart = ({ dataUrl, width = 300, height = 300, colorScheme }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = async (dataUrl) => {\r\n    setIsLoading(true);\r\n    const req = await axios(dataUrl);\r\n    if (req.status === 200 && typeof req.data !== \"string\") {\r\n      setData(req.data);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData(dataUrl);\r\n  }, [dataUrl]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <PieChart\r\n      height={height}\r\n      width={width}\r\n      data={data}\r\n      series={<PieArcSeries doughnut={true} colorScheme={colorScheme} />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DynamicDonutChart;\r\n","import React from \"react\";\r\n\r\nimport DynamicBarChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicBarChart\";\r\nimport DynamicPieChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicPieChart\";\r\nimport DynamicAreaChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicAreaChart\";\r\nimport DynamicLineChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicLineChart\";\r\nimport DynamicTableWidget from \"../../../../../admin/src/components/dashboard/widgets/DynamicTableWidget\";\r\nimport DynamicDonutChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicDonutChart\";\r\n\r\nimport {\r\n  BAR,\r\n  PIE,\r\n  LINE,\r\n  AREA,\r\n  TABLE,\r\n  DONUT,\r\n} from \"../../../../../admin/src/components/dashboard/widgetTypes\";\r\n\r\nconst AltrpDiagram = ({ settings }) => {\r\n  const sql = settings.query?.dataSource?.value;\r\n\r\n  if (!sql) {\r\n    return <div className=\"altrp-chart\">Choose data for chart</div>;\r\n  }\r\n\r\n  switch (settings.type) {\r\n    case BAR:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicBarChart dataUrl={sql} colorScheme={settings.colorScheme} />\r\n        </div>\r\n      );\r\n    case PIE:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicPieChart dataUrl={sql} colorScheme={settings.colorScheme} />\r\n        </div>\r\n      );\r\n    case DONUT:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicDonutChart dataUrl={sql} colorScheme={settings.colorScheme} />\r\n        </div>\r\n      );\r\n    case LINE:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicLineChart dataUrl={sql} colorScheme={settings.colorScheme} />\r\n        </div>\r\n      );\r\n    case TABLE:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicTableWidget dataUrl={sql} />\r\n        </div>\r\n      );\r\n    case AREA:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicAreaChart dataUrl={sql} colorScheme={settings.colorScheme} />\r\n        </div>\r\n      );\r\n    default:\r\n      return <></>;\r\n  }\r\n};\r\n\r\nexport default AltrpDiagram;\r\n","export const BAR = \"CHART/BAR\";\r\nexport const PIE = \"CHART/PIE\";\r\nexport const DONUT = \"CHART/DONUT\";\r\nexport const AREA = \"CHART/AREA\";\r\nexport const LINE = \"CHART/LINE\";\r\nexport const TABLE = \"CHART/TABLE\";\r\n\r\nexport const widgetTypes = [\r\n  { name: \"Столбцы\", value: BAR },\r\n  { name: \"Круговая диаграмма\", value: PIE },\r\n  { name: \"Кольцевая диаграмма\", value: DONUT },\r\n  { name: \"Линии\", value: LINE },\r\n  { name: \"Графики\", value: AREA },\r\n  { name: \"Таблица\", value: TABLE },\r\n];\r\n"],"sourceRoot":""}