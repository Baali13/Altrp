{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./node_modules/react-query/dist/react-query.mjs"],"names":["_extends","module","exports","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","useGetLatest","obj","ref","useRef","current","useCallback","functionalUpdate","updater","old","stableStringifyReplacer","_","value","isObject","concat","sort","map","_ref","a","Array","isArray","isDocumentVisible","document","undefined","visibilityState","getQueryArgs","args","_args$","_queryKey","queryKey","_args$$variables","variables","_queryFn","queryFn","_args$$config","config","Error","_queryKey2","_args$2","_variables","_queryFn2","_args$3","_args$4","useMountedCallback","callback","mounted","handleSuspense","queryInfo","suspense","useErrorBoundary","status","setTimeout","query","state","wasSuspended","refetch","configContext","createContext","DEFAULTS","retry","retryDelay","attemptIndex","Math","min","pow","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","queryKeySerializerFn","defaultQueryKeySerializerFn","_unused","queryHash","JSON","stringify","parse","queryFnParamsFilter","d","throwOnError","onMutate","onSuccess","onError","onSettled","refetchOnMount","isDataEqual","deepEqual","b","valueOf","defaultConfigRef","useConfigContext","useContext","_await","then","direct","Promise","resolve","_catch","body","recover","result","e","_async","f","reject","_invoke","queryCache","makeQueryCache","queryCacheContext","queryCaches","useQueryCache","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","actionSetState","listeners","cache","queries","isFetching","notifyGlobalListeners","values","reduce","acc","forEach","subscribe","cb","push","splice","clear","findQueries","predicate","_temp","exact","_defaultConfigRef$cur","deepIncludes","some","filter","getQueries","getQuery","getQueryData","_cache$getQuery","data","removeQueries","_temp2","foundQueries","clearTimeout","staleTimeout","cancelQueries","_temp3","cancel","refetchQueries","_temp4","_ref5","force","all","fetch","err","_buildQuery","userQueryKey","queryVariables","_config$queryKeySeria","options","reducer","queryReducer","defaultQueryReducer","noQueryHash","initialData","hasInitialData","isStale","manual","instances","type","initialStatus","dispatch","action","onStateUpdate","scheduleStaleTimeout","Infinity","scheduleGarbageCollection","cacheTimeout","markedForGarbageCollection","heal","cancelled","cancelPromises","promise","updateInstance","instance","found","find","id","instanceId","tryFetchData","_len2","_key2","shouldContinueRetryOnFocus","_exit2","failureCount","delay","_result4","_temp6","_ref7","_ref7$__queryFn","__queryFn","callbackInstances","unshift","suspenseInstance","setData","setState","makeQuery","prefetchQuery","_exit","_len","_key","_getQueryArgs","_getQueryArgs$","res","wasPrefetched","_result3","setQueryData","_temp5","_ref6","canFetchMore","updatedAt","Date","now","removePreviousHandler","onWindowFocus","navigator","onLine","refetchOnWindowFocus","catch","handleFocus","_window","addEventListener","removeEventListener","useBaseQuery","queryRef","newQuery","rerender","useState","getLatestConfig","rest","_catch$2","useEffect","currentRefetchInterval","clearInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","useQuery","usePaginatedQuery","lastDataRef","latestData","resolvedData","paginatedQuery"],"mappings":"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","file":"0d87d1e525ec2699ec12.bundle.js","sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","import React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar statusIdle = 'idle';\nvar statusLoading = 'loading';\nvar statusError = 'error';\nvar statusSuccess = 'success';\nvar _uid = 0;\nvar uid = function uid() {\n  return _uid++;\n};\nvar cancelledError = {};\nvar isServer = typeof window === 'undefined';\nvar noop = function noop() {};\nvar identity = function identity(d) {\n  return d;\n};\nvar Console = console || {\n  error: noop,\n  warn: noop,\n  log: noop\n};\nfunction useUid() {\n  var ref = React.useRef(null);\n\n  if (ref.current === null) {\n    ref.current = uid();\n  }\n\n  return ref.current;\n}\nfunction setConsole(c) {\n  Console = c;\n}\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n}\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\nfunction stableStringifyReplacer(_, value) {\n  return isObject(value) ? Object.assign.apply(Object, [{}].concat(Object.keys(value).sort().map(function (key) {\n    var _ref;\n\n    return _ref = {}, _ref[key] = value[key], _ref;\n  }))) : value;\n}\nfunction stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer);\n}\nfunction isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a);\n}\nfunction deepIncludes(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(function (key) {\n      return !deepIncludes(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\nfunction isDocumentVisible() {\n  return typeof document === 'undefined' || document.visibilityState === undefined || document.visibilityState === 'visible' || document.visibilityState === 'prerender';\n}\nfunction isOnline() {\n  return navigator.onLine === undefined || navigator.onLine;\n}\nfunction getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (args[0].hasOwnProperty('queryKey') && args[0].hasOwnProperty('queryFn')) {\n      var _args$ = args[0],\n          _queryKey = _args$.queryKey,\n          _args$$variables = _args$.variables,\n          variables = _args$$variables === void 0 ? [] : _args$$variables,\n          _queryFn = _args$.queryFn,\n          _args$$config = _args$.config,\n          _config = _args$$config === void 0 ? {} : _args$$config;\n\n      return [_queryKey, variables, _queryFn, _config];\n    } else {\n      throw new Error('queryKey and queryFn keys are required.');\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    var _queryKey2 = args[0],\n        _args$2 = args[1],\n        _variables = _args$2 === void 0 ? [] : _args$2,\n        _queryFn2 = args[2],\n        _args$3 = args[3],\n        _config2 = _args$3 === void 0 ? {} : _args$3;\n\n    return [_queryKey2, _variables, _queryFn2, _config2];\n  }\n\n  var queryKey = args[0],\n      queryFn = args[1],\n      _args$4 = args[2],\n      config = _args$4 === void 0 ? {} : _args$4;\n  return [queryKey, [], queryFn, config];\n}\nfunction useMountedCallback(callback) {\n  var mounted = React.useRef(false);\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](function () {\n    mounted.current = true;\n    return function () {\n      return mounted.current = false;\n    };\n  }, []);\n  return React.useCallback(function () {\n    return mounted.current ? callback.apply(void 0, arguments) : void 0;\n  }, [callback]);\n}\nfunction handleSuspense(queryInfo) {\n  if (queryInfo.config.suspense || queryInfo.config.useErrorBoundary) {\n    if (queryInfo.status === statusError) {\n      setTimeout(function () {\n        queryInfo.query.state.status = 'loading';\n      });\n      throw queryInfo.error;\n    }\n  }\n\n  if (queryInfo.config.suspense) {\n    if (queryInfo.status === statusLoading) {\n      queryInfo.query.wasSuspended = true;\n      throw queryInfo.refetch();\n    }\n  }\n} // This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\n\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nvar configContext = React.createContext();\nvar DEFAULTS = {\n  retry: 3,\n  retryDelay: function retryDelay(attemptIndex) {\n    return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n  },\n  staleTime: 0,\n  cacheTime: 5 * 60 * 1000,\n  refetchAllOnWindowFocus: true,\n  refetchInterval: false,\n  suspense: false,\n  queryKeySerializerFn: defaultQueryKeySerializerFn,\n  queryFnParamsFilter: identity,\n  throwOnError: false,\n  useErrorBoundary: undefined,\n  // this will default to the suspense value\n  onMutate: noop,\n  onSuccess: noop,\n  onError: noop,\n  onSettled: noop,\n  refetchOnMount: true,\n  isDataEqual: deepEqual\n};\nvar defaultConfigRef = {\n  current: DEFAULTS\n};\nfunction useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current;\n}\nfunction ReactQueryConfigProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  var configContextValue = React.useContext(configContext);\n  var newConfig = React.useMemo(function () {\n    var newConfig = _extends({}, configContextValue || defaultConfigRef.current, config); // Default useErrorBoundary to the suspense value\n\n\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense;\n    }\n\n    return newConfig;\n  }, [config, configContextValue]);\n  React.useEffect(function () {\n    // restore previous config on unmount\n    return function () {\n      defaultConfigRef.current = _extends({}, configContextValue || DEFAULTS); // Default useErrorBoundary to the suspense value\n\n      if (typeof defaultConfigRef.current.useErrorBoundary === 'undefined') {\n        defaultConfigRef.current.useErrorBoundary = defaultConfigRef.current.suspense;\n      }\n    };\n  }, [configContextValue]);\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig;\n  }\n\n  return /*#__PURE__*/React.createElement(configContext.Provider, {\n    value: newConfig\n  }, children);\n}\nfunction defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return [];\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey());\n    } catch (_unused) {\n      return [];\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey];\n  }\n\n  var queryHash = stableStringify(queryKey);\n  queryKey = JSON.parse(queryHash);\n  return [queryHash, queryKey];\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar queryCache = makeQueryCache();\nvar queryCacheContext = React.createContext(queryCache);\nvar queryCaches = [queryCache];\nfunction useQueryCache() {\n  return React.useContext(queryCacheContext);\n}\nfunction ReactQueryCacheProvider(_ref) {\n  var queryCache = _ref.queryCache,\n      children = _ref.children;\n  var cache = React.useMemo(function () {\n    return queryCache || makeQueryCache();\n  }, [queryCache]);\n  React.useEffect(function () {\n    queryCaches.push(cache);\n    return function () {\n      // remove the cache from the active list\n      var i = queryCaches.indexOf(cache);\n\n      if (i >= 0) {\n        queryCaches.splice(i, 1);\n      } // if the cache was created by us, we need to tear it down\n\n\n      if (queryCache == null) {\n        cache.clear();\n      }\n    };\n  }, [cache, queryCache]);\n  return /*#__PURE__*/React.createElement(queryCacheContext.Provider, {\n    value: cache\n  }, children);\n}\nvar actionInit = {};\nvar actionFailed = {};\nvar actionMarkStale = {};\nvar actionMarkGC = {};\nvar actionFetch = {};\nvar actionSuccess = {};\nvar actionError = {};\nvar actionSetState = {};\nfunction makeQueryCache() {\n  var listeners = [];\n  var cache = {\n    queries: {},\n    isFetching: 0\n  };\n\n  var notifyGlobalListeners = function notifyGlobalListeners() {\n    cache.isFetching = Object.values(cache.queries).reduce(function (acc, query) {\n      return query.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    listeners.forEach(function (d) {\n      return d(cache);\n    });\n  };\n\n  cache.subscribe = function (cb) {\n    listeners.push(cb);\n    return function () {\n      listeners.splice(listeners.indexOf(cb), 1);\n    };\n  };\n\n  cache.clear = function () {\n    Object.values(cache.queries).forEach(function (query) {\n      return query.clear();\n    });\n    cache.queries = {};\n    notifyGlobalListeners();\n  };\n\n  var findQueries = function findQueries(predicate, _temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n        exact = _ref2.exact;\n\n    if (typeof predicate !== 'function') {\n      var _defaultConfigRef$cur = defaultConfigRef.current.queryKeySerializerFn(predicate),\n          queryHash = _defaultConfigRef$cur[0],\n          queryKey = _defaultConfigRef$cur[1];\n\n      predicate = function predicate(d) {\n        return exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey);\n      };\n    }\n\n    return Object.values(cache.queries).filter(predicate);\n  };\n\n  cache.getQueries = findQueries;\n\n  cache.getQuery = function (queryKey) {\n    return findQueries(queryKey, {\n      exact: true\n    })[0];\n  };\n\n  cache.getQueryData = function (queryKey) {\n    var _cache$getQuery;\n\n    return (_cache$getQuery = cache.getQuery(queryKey)) == null ? void 0 : _cache$getQuery.state.data;\n  };\n\n  cache.removeQueries = function (predicate, _temp2) {\n    var _ref3 = _temp2 === void 0 ? {} : _temp2,\n        exact = _ref3.exact;\n\n    var foundQueries = findQueries(predicate, {\n      exact: exact\n    });\n    foundQueries.forEach(function (query) {\n      clearTimeout(query.staleTimeout);\n      delete cache.queries[query.queryHash];\n    });\n\n    if (foundQueries.length) {\n      notifyGlobalListeners();\n    }\n  };\n\n  cache.cancelQueries = function (predicate, _temp3) {\n    var _ref4 = _temp3 === void 0 ? {} : _temp3,\n        exact = _ref4.exact;\n\n    var foundQueries = findQueries(predicate, {\n      exact: exact\n    });\n    foundQueries.forEach(function (query) {\n      query.cancel();\n    });\n\n    if (foundQueries.length) {\n      notifyGlobalListeners();\n    }\n  };\n\n  cache.refetchQueries = _async(function (predicate, _temp4) {\n    var _ref5 = _temp4 === void 0 ? {} : _temp4,\n        exact = _ref5.exact,\n        throwOnError = _ref5.throwOnError,\n        force = _ref5.force;\n\n    var foundQueries = predicate === true ? Object.values(cache.queries) : findQueries(predicate, {\n      exact: exact\n    });\n    return _catch(function () {\n      return _await(Promise.all(foundQueries.map(function (query) {\n        return query.fetch({\n          force: force\n        });\n      })));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  });\n\n  cache._buildQuery = function (userQueryKey, queryVariables, queryFn, config) {\n    var _config$queryKeySeria = config.queryKeySerializerFn(userQueryKey),\n        queryHash = _config$queryKeySeria[0],\n        queryKey = _config$queryKeySeria[1];\n\n    var query = cache.queries[queryHash];\n\n    if (query) {\n      Object.assign(query, {\n        queryVariables: queryVariables,\n        queryFn: queryFn\n      });\n      query.config = _extends({}, query.config, config);\n    } else {\n      query = makeQuery({\n        cache: cache,\n        queryKey: queryKey,\n        queryHash: queryHash,\n        queryVariables: queryVariables,\n        queryFn: queryFn,\n        config: config\n      }); // If the query started with data, schedule\n      // a stale timeout\n\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout(); // Simulate a query healing process\n\n        query.heal(); // Schedule for garbage collection in case\n        // nothing subscribes to this query\n\n        query.scheduleGarbageCollection();\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query; // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n\n          setTimeout(function () {\n            notifyGlobalListeners();\n          });\n        }\n      }\n    }\n\n    return query;\n  };\n\n  cache.prefetchQuery = _async(function () {\n    var _exit = false;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _getQueryArgs = getQueryArgs(args),\n        queryKey = _getQueryArgs[0],\n        queryVariables = _getQueryArgs[1],\n        queryFn = _getQueryArgs[2],\n        _getQueryArgs$ = _getQueryArgs[3],\n        force = _getQueryArgs$.force,\n        config = _objectWithoutPropertiesLoose(_getQueryArgs$, [\"force\"]);\n\n    config = _extends({}, defaultConfigRef.current, config);\n\n    var query = cache._buildQuery(queryKey, queryVariables, queryFn, config); // Don't prefetch queries that are fresh, unless force is passed\n\n\n    return _invoke(function () {\n      if (query.state.isStale || force) {\n        // Trigger a fetch and return the promise\n        return _catch(function () {\n          return _await(query.fetch({\n            force: force\n          }), function (res) {\n            query.wasPrefetched = true;\n            _exit = true;\n            return res;\n          });\n        }, function (err) {\n          if (config.throwOnError) {\n            throw err;\n          }\n        });\n      }\n    }, function (_result3) {\n      return _exit ? _result3 : query.state.data;\n    });\n  });\n\n  cache.setQueryData = function (queryKey, updater, _temp5) {\n    var _ref6 = _temp5 === void 0 ? {} : _temp5,\n        exact = _ref6.exact,\n        config = _objectWithoutPropertiesLoose(_ref6, [\"exact\"]);\n\n    var queries = findQueries(queryKey, {\n      exact: exact\n    });\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [cache._buildQuery(queryKey, undefined, function () {\n        return Promise.resolve();\n      }, _extends({}, defaultConfigRef.current, config))];\n    }\n\n    queries.forEach(function (d) {\n      return d.setData(updater);\n    });\n  };\n\n  function makeQuery(options) {\n    var queryCache = options.cache;\n    var reducer = options.config.queryReducer || defaultQueryReducer;\n    var noQueryHash = typeof options.queryHash === 'undefined';\n    var initialData = typeof options.config.initialData === 'function' ? options.config.initialData() : options.config.initialData;\n    var hasInitialData = typeof initialData !== 'undefined';\n    var isStale = noQueryHash ? true : !hasInitialData;\n    var manual = options.config.manual;\n    var initialStatus = noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading;\n\n    var query = _extends({}, options, {\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus: initialStatus,\n        initialData: initialData,\n        hasInitialData: hasInitialData,\n        isStale: isStale,\n        manual: manual\n      })\n    });\n\n    var dispatch = function dispatch(action) {\n      query.state = reducer(query.state, action);\n      query.instances.forEach(function (d) {\n        return d.onStateUpdate(query.state);\n      });\n      notifyGlobalListeners();\n    };\n\n    query.scheduleStaleTimeout = function () {\n      if (query.config.staleTime === Infinity) {\n        return;\n      }\n\n      query.staleTimeout = setTimeout(function () {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({\n            type: actionMarkStale\n          });\n        }\n      }, query.config.staleTime);\n    };\n\n    query.scheduleGarbageCollection = function () {\n      if (query.config.cacheTime === Infinity) {\n        return;\n      }\n\n      dispatch({\n        type: actionMarkGC\n      });\n      query.cacheTimeout = setTimeout(function () {\n        cache.removeQueries(function (d) {\n          return d.state.markedForGarbageCollection && d.queryHash === query.queryHash;\n        });\n      }, typeof query.state.data === 'undefined' && query.state.status !== 'error' ? 0 : query.config.cacheTime);\n    };\n\n    query.heal = function () {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout); // Mark the query as not cancelled\n\n      query.cancelled = null;\n    };\n\n    query.cancel = function () {\n      query.cancelled = cancelledError;\n\n      if (query.cancelPromises) {\n        query.cancelPromises();\n      }\n\n      delete query.promise;\n      notifyGlobalListeners();\n    };\n\n    query.updateInstance = function (instance) {\n      var found = query.instances.find(function (d) {\n        return d.id === instance.id;\n      });\n\n      if (found) {\n        Object.assign(found, instance);\n      } else {\n        found = _extends({\n          onStateUpdate: noop\n        }, instance);\n        query.instances.push(instance);\n      }\n    };\n\n    query.subscribe = function (instanceId) {\n      query.heal(); // Return the unsubscribe function\n\n      return function () {\n        query.instances = query.instances.filter(function (d) {\n          return d.id !== instanceId;\n        });\n\n        if (!query.instances.length) {\n          query.cancel(); // Schedule garbage collection\n\n          query.scheduleGarbageCollection();\n        }\n      };\n    }; // Set up the fetch function\n\n\n    var tryFetchData = _async(function (queryFn) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return _catch(function () {\n        // Perform the query\n        var promise = queryFn.apply(void 0, query.config.queryFnParamsFilter(args));\n\n        query.cancelPromises = function () {\n          return promise.cancel == null ? void 0 : promise.cancel();\n        };\n\n        return _await(promise, function (data) {\n          delete query.shouldContinueRetryOnFocus;\n          delete query.cancelPromises;\n          if (query.cancelled) throw query.cancelled;\n          return data;\n        });\n      }, function (error) {\n        var _exit2 = false;\n        delete query.cancelPromises;\n        if (query.cancelled) throw query.cancelled; // If we fail, increase the failureCount\n\n        dispatch({\n          type: actionFailed\n        }); // Do we need to retry the request?\n\n        return _invoke(function () {\n          if (query.config.retry === true || query.state.failureCount <= query.config.retry || typeof query.config.retry === 'function' && query.config.retry(query.state.failureCount, error)) {\n            // Only retry if the document is visible\n            if (!isDocumentVisible()) {\n              // set this flag to continue fetch retries on focus\n              query.shouldContinueRetryOnFocus = true;\n              _exit2 = true;\n              return new Promise(noop);\n            }\n\n            delete query.shouldContinueRetryOnFocus; // Determine the retryDelay\n\n            var delay = functionalUpdate(query.config.retryDelay, query.state.failureCount); // Return a new promise with the retry\n\n            _exit2 = true;\n            return _await(new Promise(function (resolve, reject) {\n              // Keep track of the retry timeout\n              setTimeout(_async(function () {\n                return query.cancelled ? reject(query.cancelled) : _catch(function () {\n                  return _await(tryFetchData.apply(void 0, [queryFn].concat(args)), function (data) {\n                    if (query.cancelled) return reject(query.cancelled);\n                    resolve(data);\n                  });\n                }, function (error) {\n                  if (query.cancelled) return reject(query.cancelled);\n                  reject(error);\n                });\n              }), delay);\n            }));\n          }\n        }, function (_result4) {\n          if (_exit2) return _result4;\n          throw error;\n        });\n      });\n    });\n\n    query.fetch = _async(function (_temp6) {\n      var _ref7 = _temp6 === void 0 ? {} : _temp6,\n          force = _ref7.force,\n          _ref7$__queryFn = _ref7.__queryFn,\n          __queryFn = _ref7$__queryFn === void 0 ? query.queryFn : _ref7$__queryFn;\n\n      // Don't refetch fresh queries that don't have a queryHash\n      if (!query.queryHash || !query.state.isStale && !force) {\n        return;\n      } // Create a new promise for the query cache if necessary\n\n\n      if (!query.promise) {\n        query.promise = _async(function () {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null;\n          var callbackInstances = [].concat(query.instances);\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.suspenseInstance);\n          }\n\n          return _catch(function () {\n            // Set up the query refreshing state\n            dispatch({\n              type: actionFetch\n            }); // Try to fetch\n\n            return _await(tryFetchData.apply(void 0, [__queryFn].concat(query.queryKey, query.queryVariables)), function (data) {\n              query.setData(function (old) {\n                return query.config.isDataEqual(old, data) ? old : data;\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.onSuccess && instance.onSuccess(query.state.data);\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.onSettled && instance.onSettled(query.state.data, null);\n              });\n              delete query.promise;\n              return data;\n            });\n          }, function (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error: error\n            });\n            delete query.promise;\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(function (instance) {\n                return instance.onError && instance.onError(error);\n              });\n              callbackInstances.forEach(function (instance) {\n                return instance.onSettled && instance.onSettled(undefined, error);\n              });\n              throw error;\n            }\n          });\n        })();\n      }\n\n      return query.promise;\n    });\n\n    query.setState = function (updater) {\n      return dispatch({\n        type: actionSetState,\n        updater: updater\n      });\n    };\n\n    query.setData = function (updater) {\n      // Set data and mark it as cached\n      dispatch({\n        type: actionSuccess,\n        updater: updater\n      }); // Schedule a fresh invalidation!\n\n      clearTimeout(query.staleTimeout);\n      query.scheduleStaleTimeout();\n    };\n\n    query.clear = function () {\n      clearTimeout(query.staleTimeout);\n      clearTimeout(query.cacheTimeout);\n      query.cancel();\n    };\n\n    return query;\n  }\n\n  return cache;\n}\nfunction defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.hasInitialData || action.manual ? false : action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0\n      };\n\n    case actionFailed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n\n    case actionMarkStale:\n      return _extends({}, state, {\n        isStale: true\n      });\n\n    case actionMarkGC:\n      {\n        return _extends({}, state, {\n          markedForGarbageCollection: true\n        });\n      }\n\n    case actionFetch:\n      return _extends({}, state, {\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0\n      });\n\n    case actionSuccess:\n      return _extends({}, state, {\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0\n      });\n\n    case actionError:\n      return _extends({}, state, {\n        isFetching: false,\n        isStale: true\n      }, !action.cancelled && {\n        status: statusError,\n        error: action.error\n      });\n\n    case actionSetState:\n      return functionalUpdate(action.updater, state);\n\n    default:\n      throw new Error();\n  }\n}\n\nvar visibilityChangeEvent = 'visibilitychange';\nvar focusEvent = 'focus';\n\nvar onWindowFocus = function onWindowFocus() {\n  var refetchAllOnWindowFocus = defaultConfigRef.current.refetchAllOnWindowFocus;\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(function (queryCache) {\n      return queryCache.refetchQueries(function (query) {\n        if (!query.instances.length) {\n          return false;\n        }\n\n        if (query.config.manual === true) {\n          return false;\n        }\n\n        if (query.shouldContinueRetryOnFocus) {\n          // delete promise, so `fetch` will create new one\n          delete query.promise;\n          return true;\n        }\n\n        if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n          return refetchAllOnWindowFocus;\n        } else {\n          return query.config.refetchOnWindowFocus;\n        }\n      }).catch(Console.error);\n    });\n  }\n};\n\nvar removePreviousHandler;\nfunction setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler();\n  } // Sub the new watcher\n\n\n  removePreviousHandler = callback(onWindowFocus);\n}\nsetFocusHandler(function (handleFocus) {\n  var _window;\n\n  // Listen to visibillitychange and focus\n  if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false);\n    window.addEventListener(focusEvent, handleFocus, false);\n    return function () {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus);\n      window.removeEventListener(focusEvent, handleFocus);\n    };\n  }\n});\n\nfunction useIsFetching() {\n  var queryCache = useQueryCache();\n\n  var _React$useState = React.useState({}),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  React.useEffect(function () {\n    return queryCache.subscribe(function () {\n      return setState({});\n    });\n  }, []);\n  return React.useMemo(function () {\n    return state && queryCache.isFetching;\n  }, [state]);\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar getDefaultState = function getDefaultState() {\n  return {\n    status: statusIdle,\n    data: undefined,\n    error: null\n  };\n};\n\nfunction _empty() {}\n\nvar actionReset = {};\n\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\n\nvar actionLoading = {};\n\nfunction _invoke$1(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar actionResolve = {};\n\nfunction _catch$1(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar actionReject = {};\n\nfunction _async$1(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState();\n  }\n\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading\n    };\n  }\n\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data\n    };\n  }\n\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error\n    };\n  }\n\n  throw new Error();\n}\n\nfunction useMutation(mutationFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _React$useReducer = React.useReducer(mutationReducer, null, getDefaultState),\n      state = _React$useReducer[0],\n      unsafeDispatch = _React$useReducer[1];\n\n  var dispatch = useMountedCallback(unsafeDispatch);\n  var getMutationFn = useGetLatest(mutationFn);\n  var getConfig = useGetLatest(_extends({}, useConfigContext(), config));\n  var latestMutationRef = React.useRef();\n  var mutate = React.useCallback(_async$1(function (variables, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$onSuccess = _ref.onSuccess,\n        onSuccess = _ref$onSuccess === void 0 ? noop : _ref$onSuccess,\n        _ref$onError = _ref.onError,\n        onError = _ref$onError === void 0 ? noop : _ref$onError,\n        _ref$onSettled = _ref.onSettled,\n        onSettled = _ref$onSettled === void 0 ? noop : _ref$onSettled,\n        throwOnError = _ref.throwOnError;\n\n    var config = getConfig();\n    var mutationId = uid();\n    latestMutationRef.current = mutationId;\n\n    var isLatest = function isLatest() {\n      return latestMutationRef.current === mutationId;\n    };\n\n    dispatch({\n      type: actionLoading\n    });\n    var snapshotValue;\n    return _catch$1(function () {\n      return _await$1(config.onMutate(variables), function (_config$onMutate) {\n        snapshotValue = _config$onMutate;\n        var data;\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _await$1(getMutationFn()(variables), function (_getMutationFn) {\n              data = _getMutationFn;\n            });\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored(onSuccess(data, variables));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored(config.onSuccess(data, variables));\n              }\n            }, function () {\n              return _invoke$1(function () {\n                if (isLatest()) {\n                  return _awaitIgnored(onSettled(data, null, variables));\n                }\n              }, function () {\n                return _invoke$1(function () {\n                  if (isLatest()) {\n                    return _awaitIgnored(config.onSettled(data, null, variables));\n                  }\n                }, function () {\n                  if (isLatest()) {\n                    dispatch({\n                      type: actionResolve,\n                      data: data\n                    });\n                  }\n\n                  return data;\n                });\n              });\n            });\n          });\n        });\n      });\n    }, function (error) {\n      return _invoke$1(function () {\n        if (isLatest()) {\n          Console.error(error);\n          return _awaitIgnored(onError(error, variables, snapshotValue));\n        }\n      }, function () {\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _awaitIgnored(config.onError(error, variables, snapshotValue));\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored(onSettled(undefined, error, variables, snapshotValue));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored(config.onSettled(undefined, error, variables, snapshotValue));\n              }\n            }, function () {\n              if (isLatest()) {\n                dispatch({\n                  type: actionReject,\n                  error: error\n                });\n\n                if (throwOnError != null ? throwOnError : config.throwOnError) {\n                  throw error;\n                }\n              }\n            });\n          });\n        });\n      });\n    });\n  }), [dispatch, getConfig, getMutationFn]);\n  var reset = React.useCallback(function () {\n    return dispatch({\n      type: actionReset\n    });\n  }, [dispatch]);\n  React.useEffect(function () {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error;\n    }\n  }, [getConfig, state.error]);\n  return [mutate, _extends({}, state, {\n    reset: reset\n  })];\n}\n\nfunction _await$2(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch$2(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async$2(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction useBaseQuery(queryKey, queryVariables, queryFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var instanceId = useUid();\n  config = _extends({}, useConfigContext(), config);\n  var queryCache = useQueryCache();\n  var queryRef = React.useRef();\n\n  var newQuery = queryCache._buildQuery(queryKey, queryVariables, queryFn, config);\n\n  var useCachedQuery = queryRef.current && typeof queryRef.current.queryHash === 'undefined' && typeof newQuery.queryHash === 'undefined'; // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n\n  if (!useCachedQuery) {\n    queryRef.current = newQuery;\n  }\n\n  var query = queryRef.current;\n\n  var _React$useState = React.useState(),\n      unsafeRerender = _React$useState[1];\n\n  var rerender = useMountedCallback(unsafeRerender);\n  var getLatestConfig = useGetLatest(config);\n  var refetch = React.useCallback(_async$2(function (_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        throwOnError = _ref.throwOnError,\n        rest = _objectWithoutPropertiesLoose(_ref, [\"throwOnError\"]);\n\n    return _catch$2(function () {\n      return _await$2(query.fetch(rest));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  }), [query]);\n  query.suspenseInstance = {\n    onSuccess: function onSuccess(data) {\n      return getLatestConfig().onSuccess(data);\n    },\n    onError: function onError(err) {\n      return getLatestConfig().onError(err);\n    },\n    onSettled: function onSettled(data, err) {\n      return getLatestConfig().onSettled(data, err);\n    }\n  }; // After mount, subscribe to the query\n\n  React.useEffect(function () {\n    // Update the instance to the query again, but not as a placeholder\n    query.updateInstance({\n      id: instanceId,\n      onStateUpdate: function onStateUpdate() {\n        return rerender({});\n      },\n      onSuccess: function onSuccess(data) {\n        return getLatestConfig().onSuccess(data);\n      },\n      onError: function onError(err) {\n        return getLatestConfig().onError(err);\n      },\n      onSettled: function onSettled(data, err) {\n        return getLatestConfig().onSettled(data, err);\n      }\n    });\n    return query.subscribe(instanceId);\n  }, [getLatestConfig, instanceId, query, rerender]);\n  React.useEffect(function () {\n    // Perform the initial fetch for this query if necessary\n    if (!getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n    !query.wasPrefetched && // Don't double fetch for prefetched queries\n    !query.wasSuspended && // Don't double fetch for suspense\n    query.state.isStale && ( // Only refetch if stale\n    getLatestConfig().refetchOnMount || query.instances.length === 1)) {\n      refetch().catch(Console.error);\n    }\n\n    query.wasPrefetched = false;\n    query.wasSuspended = false;\n  }, [getLatestConfig, query, refetch]); // Handle refetch interval\n\n  React.useEffect(function () {\n    var query = queryRef.current;\n\n    if (config.refetchInterval && (!query.currentRefetchInterval || // shorter interval should override previous one\n    config.refetchInterval < query.currentRefetchInterval)) {\n      query.currentRefetchInterval = config.refetchInterval;\n      clearInterval(query.refetchIntervalId);\n      query.refetchIntervalId = setInterval(function () {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error);\n        }\n      }, config.refetchInterval);\n      return function () {\n        clearInterval(query.refetchIntervalId);\n        delete query.refetchIntervalId;\n        delete query.currentRefetchInterval;\n      };\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, refetch]);\n  return _extends({}, query.state, {\n    config: config,\n    query: query,\n    refetch: refetch\n  });\n}\n\nfunction useQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var query = useBaseQuery.apply(void 0, getQueryArgs(args));\n  handleSuspense(query);\n  return query;\n}\n\nfunction usePaginatedQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryVariables = _getQueryArgs[1],\n      queryFn = _getQueryArgs[2],\n      _getQueryArgs$ = _getQueryArgs[3],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var lastDataRef = React.useRef();\n\n  if (!queryKey) {\n    lastDataRef.current = undefined;\n  } // If latestData is set, don't use initialData\n\n\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData;\n  }\n\n  var query = useBaseQuery(queryKey, queryVariables, queryFn, config);\n  var latestData = query.data,\n      status = query.status;\n  React.useEffect(function () {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData;\n    }\n  }, [latestData, status]);\n  var resolvedData = latestData;\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current;\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success';\n  }\n\n  var paginatedQuery = _extends({}, query, {\n    resolvedData: resolvedData,\n    latestData: latestData,\n    status: status\n  });\n\n  handleSuspense(paginatedQuery);\n  return paginatedQuery;\n}\n\nfunction _await$3(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _empty$1() {}\n\nfunction _invokeIgnored(body) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(_empty$1);\n  }\n}\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    var observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nvar _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    var result = new _Pact();\n    var state = this.s;\n\n    if (state) {\n      var callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        var value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}();\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n}\n\nfunction _do(body, test) {\n  var awaitBody;\n\n  do {\n    var result = body();\n\n    if (result && result.then) {\n      if (_isSettledPact(result)) {\n        result = result.v;\n      } else {\n        awaitBody = true;\n        break;\n      }\n    }\n\n    var shouldContinue = test();\n\n    if (_isSettledPact(shouldContinue)) {\n      shouldContinue = shouldContinue.v;\n    }\n\n    if (!shouldContinue) {\n      return result;\n    }\n  } while (!shouldContinue.then);\n\n  var pact = new _Pact();\n\n  var reject = _settle.bind(null, pact, 2);\n\n  (awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n  return pact;\n\n  function _resumeAfterBody(value) {\n    result = value;\n\n    for (;;) {\n      shouldContinue = test();\n\n      if (_isSettledPact(shouldContinue)) {\n        shouldContinue = shouldContinue.v;\n      }\n\n      if (!shouldContinue) {\n        break;\n      }\n\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n        return;\n      }\n\n      result = body();\n\n      if (result && result.then) {\n        if (_isSettledPact(result)) {\n          result = result.v;\n        } else {\n          result.then(_resumeAfterBody).then(void 0, reject);\n          return;\n        }\n      }\n    }\n\n    _settle(pact, 1, result);\n  }\n\n  function _resumeAfterTest(shouldContinue) {\n    if (shouldContinue) {\n      do {\n        result = body();\n\n        if (result && result.then) {\n          if (_isSettledPact(result)) {\n            result = result.v;\n          } else {\n            result.then(_resumeAfterBody).then(void 0, reject);\n            return;\n          }\n        }\n\n        shouldContinue = test();\n\n        if (_isSettledPact(shouldContinue)) {\n          shouldContinue = shouldContinue.v;\n        }\n\n        if (!shouldContinue) {\n          _settle(pact, 1, result);\n\n          return;\n        }\n      } while (!shouldContinue.then);\n\n      shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n}\n\nfunction _continue(value, then) {\n  return value && value.then ? value.then(then) : then(value);\n}\n\nfunction _async$3(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _rethrow(thrown, value) {\n  if (thrown) throw value;\n  return value;\n}\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, result);\n}\n\nfunction useInfiniteQuery() {\n  var queryInfoRef = React.useRef();\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryVariables = _getQueryArgs[1],\n      queryFn = _getQueryArgs[2],\n      _getQueryArgs$ = _getQueryArgs[3],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var getFetchMore = config.getFetchMore;\n  var getGetFetchMore = useGetLatest(getFetchMore); // The default queryFn will query all pages and map them together\n\n  var originalQueryFn = queryFn;\n  queryFn = _async$3(function () {\n    var _interrupt = false;\n    var data = [];\n    var pageVariables = [].concat(queryInfoRef.current.query.pageVariables);\n    var rebuiltPageVariables = [];\n    return _continue(_do(function () {\n      var args = pageVariables.shift();\n      return _invokeIgnored(function () {\n        if (!data.length) {\n          var _push3 = data.push;\n          // the first page query doesn't need to be rebuilt\n          return _await$3(originalQueryFn.apply(void 0, args), function (_originalQueryFn) {\n            _push3.call(data, _originalQueryFn);\n\n            rebuiltPageVariables.push(args);\n          });\n        } else {\n          // get an up-to-date cursor based on the previous data set\n          var nextCursor = getGetFetchMore()(data[data.length - 1], data); // break early if there's no next cursor\n          // otherwise we'll start from the beginning\n          // which will cause unwanted duplication\n\n          if (!nextCursor) {\n            _interrupt = true;\n            return;\n          }\n\n          var pageArgs = [].concat(args.slice(0, -1), [nextCursor]);\n          var _push4 = data.push;\n          return _await$3(originalQueryFn.apply(void 0, pageArgs), function (_originalQueryFn2) {\n            _push4.call(data, _originalQueryFn2);\n\n            rebuiltPageVariables.push(pageArgs);\n          });\n        }\n      });\n    }, function () {\n      return !_interrupt && !!pageVariables.length;\n    }), function () {\n      queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n      queryInfoRef.current.query.pageVariables = rebuiltPageVariables;\n      return data;\n    });\n  });\n  var queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config);\n\n  if (typeof queryInfo.query.canFetchMore === 'undefined' && typeof queryInfo.data !== 'undefined') {\n    queryInfo.query.canFetchMore = getGetFetchMore()(queryInfo.data[queryInfo.data.length - 1], queryInfo.data);\n  }\n\n  queryInfoRef.current = queryInfo;\n  var refetch = queryInfo.refetch,\n      _queryInfo$data = queryInfo.data,\n      data = _queryInfo$data === void 0 ? [] : _queryInfo$data,\n      canFetchMore = queryInfo.query.canFetchMore; // Here we seed the pageVariabes for the query\n\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [[].concat(queryInfo.query.queryKey, queryInfo.query.queryVariables)];\n  }\n\n  var fetchMore = React.useCallback(function (fetchMoreInfo) {\n    if (fetchMoreInfo === void 0) {\n      fetchMoreInfo = queryInfoRef.current.query.canFetchMore;\n    }\n\n    return queryInfoRef.current.query.canFetchMore ? refetch({\n      force: true,\n      __queryFn: _async$3(function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return _finallyRethrows(function () {\n          queryInfoRef.current.query.setState(function (old) {\n            return _extends({}, old, {\n              isFetchingMore: true\n            });\n          });\n          var newArgs = [].concat(args, [fetchMoreInfo]);\n          queryInfoRef.current.query.pageVariables.push(newArgs);\n          var _queryInfoRef$current = queryInfoRef.current.data;\n          return _await$3(originalQueryFn.apply(void 0, newArgs), function (_originalQueryFn3) {\n            var data = [].concat(_queryInfoRef$current, [_originalQueryFn3]);\n            queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n            return data;\n          });\n        }, function (_wasThrown, _result) {\n          queryInfoRef.current.query.setState(function (old) {\n            return _extends({}, old, {\n              isFetchingMore: false\n            });\n          });\n          return _rethrow(_wasThrown, _result);\n        });\n      })\n    }) : void 0;\n  }, [getGetFetchMore, originalQueryFn, refetch]);\n  handleSuspense(queryInfo);\n  return _extends({}, queryInfo, {\n    data: data,\n    canFetchMore: canFetchMore,\n    fetchMore: fetchMore\n  });\n}\n\nexport { ReactQueryCacheProvider, ReactQueryConfigProvider, deepIncludes, makeQueryCache, queryCache, setConsole, setFocusHandler, stableStringify, statusError, statusIdle, statusLoading, statusSuccess, useInfiniteQuery, useIsFetching, useMutation, usePaginatedQuery, useQuery, useQueryCache };\n//# sourceMappingURL=react-query.mjs.map\n"],"sourceRoot":""}