{"version":3,"sources":["webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?2657","webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?fb79","webpack:///./resources/modules/admin/src/js/helpers.js","webpack:///./resources/modules/admin/src/components/AutoUpdateInput.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","iconsManager","window","IconsManager","AutoUpdateInput","props","resource","Resource","route","state","value","disabled","changeValue","bind","onChange","onKeyDown","this","get","resourceid","res","setState","e","keyCode","newValue","target","_","isFunction","changevalue","put","column_value","className","inputProps","onBlur","Component","AltrpTable","settings","query","data","currentModel","tables_columns","length","children","defaultSortSettings","forEach","column","column_is_default_sorted","order_by","accessor","order","_status","_error","_latestData","useState","page","setPage","counter","getCounterStart","_data","updatedData","setUpdatedData","sortSetting","setSortSettings","filterSetting","setFilterSettings","doubleClicked","setDoubleClicked","filterSettingJSON","JSON","stringify","fetchModels","useCallback","queryData","assign","filters","getQueried","pageSize","usePaginatedQuery","dataSourceName","getParams","forceFetchOnMount","status","resolvedData","latestData","error","useEffect","hasMore","queryCache","prefetchQuery","useQuery","getResource","columns","_column","column_name","_accessor","settingsToColumns","isArray","map","row","id","rowId","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","sortingHandler","filterHandler","filteredColumn","searchString","filterParams","additional_rows","additional_cells","cell","rowspan","colspan","role","colSpan","rowSpan","title","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","column_width","column_header_alignment","thProps","getHeaderProps","style","width","textAlign","column_is_sorted","onClick","thText","render","renderIcon","column_is_filtered","type","stopPropagation","renderTh","table_style_table_striple_style","message","getRowProps","table_hover_row","cells","_i","cellContent","linkTag","isEditor","Link","column_body_alignment","cellProps","getCellProps","_cellContent","doubleClickContent","column_is_editable","column_edit_url","columnEditUrl","parseURLTemplate","original","onDoubleClick","cellClassName","isObject","column_link","createElement","to","trim","paginationType","old","Math","max","prev_text","current_page_text","next_text"],"mappings":"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","file":"54856925497bb66d6f2b.bundle.js","sourcesContent":["exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import IconsManager from \"../../../editor/src/js/classes/modules/IconsManager\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nexport function redirect(url) {\r\n  url = url || '/';\r\n  window.location.assign(url);\r\n}\r\nexport function generateId() {\r\n  return '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n/**\r\n * @return {IconsManager}\r\n* */\r\nexport function iconsManager() {\r\n  if (!window.iconsManager) {\r\n    window.iconsManager = new IconsManager();\r\n  }\r\n  return window.iconsManager;\r\n}\r\n\r\nexport async function logout() {\r\n  let res = await (new Resource({ route: '/logout' })).post();\r\n  redirect(res.location)\r\n}\r\n\r\nexport function pageReload() {\r\n  document.location.reload(true);\r\n}\r\n\r\nconst a = { \"Ё\": \"Yo\", \"Й\": \"I\", \"Ц\": \"Ts\", \"У\": \"U\", \"К\": \"K\", \"Е\": \"E\", \"Н\": \"N\", \"Г\": \"G\", \"Ш\": \"Sh\", \"Щ\": \"Sch\", \"З\": \"Z\", \"Х\": \"H\", \"Ъ\": \"\", \"ё\": \"yo\", \"й\": \"i\", \"ц\": \"ts\", \"у\": \"u\", \"к\": \"k\", \"е\": \"e\", \"н\": \"n\", \"г\": \"g\", \"ш\": \"sh\", \"щ\": \"sch\", \"з\": \"z\", \"х\": \"h\", \"ъ\": \"\", \"Ф\": \"F\", \"Ы\": \"I\", \"В\": \"V\", \"А\": \"a\", \"П\": \"P\", \"Р\": \"R\", \"О\": \"O\", \"Л\": \"L\", \"Д\": \"D\", \"Ж\": \"ZH\", \"Э\": \"E\", \"ф\": \"f\", \"ы\": \"i\", \"в\": \"v\", \"а\": \"a\", \"п\": \"p\", \"р\": \"r\", \"о\": \"o\", \"л\": \"l\", \"д\": \"d\", \"ж\": \"zh\", \"э\": \"e\", \"Я\": \"Ya\", \"Ч\": \"CH\", \"С\": \"S\", \"М\": \"M\", \"И\": \"I\", \"Т\": \"T\", \"Ь\": \"\", \"Б\": \"B\", \"Ю\": \"YU\", \"я\": \"ya\", \"ч\": \"ch\", \"с\": \"s\", \"м\": \"m\", \"и\": \"i\", \"т\": \"t\", \"ь\": \"\", \"б\": \"b\", \"ю\": \"yu\" };\r\n\r\n/**\r\n * Транслитерация\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function transliterate(str) {\r\n  return str.split('').map(function (char) {\r\n    return _.isUndefined(a[char]) ? char : a[char];\r\n  }).join(\"\");\r\n}\r\n\r\n/**\r\n * Парсит строку в name для БД\r\n * @param {string}str\r\n * @return {string}\r\n */\r\nexport function titleToName(str) {\r\n  str = transliterate(str);\r\n  return str.toLowerCase().replace(/^\\d+/, '').replace(/[^\\d\\w]/g, '_');\r\n\r\n}\r\n/** @function objectDeepCleaning\r\n  * Удаляет все свойства id, и чистит settings\r\n  * @param {object} collection\r\n  * @return {object} Объект после удаления всех свойств id, и чистки settings\r\n */\r\nexport function objectDeepCleaning(collection) {\r\n  if (typeof collection !== \"object\" || collection === null) return collection;\r\n  if (collection.id) delete collection.id;\r\n\r\n  if (Array.isArray(collection)) {\r\n    for (let index = 0; index < collection.length; index++) {\r\n      const element = collection[index];\r\n      objectDeepCleaning(element);\r\n    }\r\n  } else {\r\n    if (collection.hasOwnProperty(\"settings\")) deleteEmptyPropsDeep(collection.settings);\r\n    if (isEmpty(collection.settings)) delete collection.settings; // удаляем settings, если оно - пустой объект\r\n    for (const key in collection) {\r\n      if (collection.hasOwnProperty(key)) {\r\n        const element = collection[key];\r\n        objectDeepCleaning(element);\r\n      }\r\n    }\r\n  }\r\n  return collection;\r\n}\r\n/** @function deleteEmptyPropsDeep\r\n  * Удаляет в объекте все свойства, значения которых - null, или \"\", или {}\r\n  * @param {object} collection\r\n */\r\nexport function deleteEmptyPropsDeep(collection) {\r\n  const deleteProps = [];\r\n  for (const key in collection) {\r\n    if (collection[key] === null || collection[key] === \"\") {\r\n      deleteProps.push(key);\r\n    }\r\n    deleteProps.forEach(key => delete collection[key]);\r\n\r\n    if (typeof collection[key] === \"object\") {\r\n      deleteEmptyPropsDeep(collection[key]);\r\n      if (isEmpty(collection[key])) delete collection[key];\r\n    }\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\n\r\nclass AutoUpdateInput extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.resource = new Resource({\r\n      route: this.props.route,\r\n    });\r\n\r\n    this.state = {\r\n      value: this.props.value || '',\r\n      disabled: ! this.props.value,\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n  }\r\n  async componentDidMount(){\r\n    if(this.props.value !== undefined){\r\n      return;\r\n    }\r\n    let res = await this.resource.get(this.props.resourceid);\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: res[this.props.resourceid] || '',\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * При нажатии на enter тоже обновдем данные\r\n   * @param e\r\n   */\r\n  onKeyDown(e){\r\n    if(e.keyCode === 13){\r\n      this.changeValue(e);\r\n    }\r\n  }\r\n\r\n  onChange(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: newValue,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.changevalue)){\r\n      this.props.changevalue(newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Запрос на именение поля\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n  async changeValue(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: true,\r\n      }\r\n    });\r\n    let res = await this.resource.put(this.props.resourceid, {value: newValue, column_value: newValue});\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    let {className} = this.props;\r\n    if(this.state.disabled){\r\n      className += ' pointer-event-none';\r\n    }\r\n    const inputProps = {...this.props};\r\n    delete inputProps.changevalue;\r\n    return<input{...inputProps} className={className}\r\n                onBlur={this.changeValue}\r\n                onKeyDown={this.onKeyDown}\r\n                onChange={this.onChange}\r\n                value={this.state.value}/>\r\n  }\r\n}\r\n\r\nexport default AutoUpdateInput","import React, {useCallback, useState, useEffect} from \"react\";\r\nimport {useTable, useSortBy} from \"react-table\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport '../../../sass/altrp-pagination.scss';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isEditor, parseURLTemplate} from \"../../../../../front-app/src/js/helpers\";\r\nimport {iconsManager} from \"../../../../../admin/src/js/helpers\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query, data, currentModel}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n  /**\r\n   * проверим есть ли настройки для сортировок по умолчанию\r\n   */\r\n  const defaultSortSettings =  {};\r\n  settings.tables_columns.forEach(column => {\r\n    if(column.column_is_default_sorted && !defaultSortSettings.order_by){\r\n      defaultSortSettings.order_by = column.accessor;\r\n      defaultSortSettings.order = _.get(column, 'column_is_default_sorted_direction', 'ASC')\r\n    }\r\n  });\r\n  const [page, setPage] = useState(1);\r\n\r\n  let counter = query.getCounterStart(page);\r\n  let _data =[], _status, _error, _latestData;\r\n\r\n  const [updatedData, setUpdatedData] = useState({});\r\n  const [sortSetting, setSortSettings] = useState(defaultSortSettings);\r\n  const [filterSetting, setFilterSettings] = useState({});\r\n  const [doubleClicked, setDoubleClicked] =  useState({});\r\n  const filterSettingJSON = JSON.stringify(filterSetting);\r\n  const fetchModels = useCallback(async (key, page = 1, sortSetting, filterSetting) => {\r\n    let queryData = {page};\r\n    const filterSettingJSON = JSON.stringify(filterSetting);\r\n    if(sortSetting){\r\n      queryData = _.assign(sortSetting, queryData);\r\n    }\r\n    if(filterSettingJSON.length > 2){\r\n      queryData.filters = filterSettingJSON;\r\n    }\r\n    return query.getQueried(queryData)\r\n  });\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.dataSourceName, page, sortSetting, filterSetting, query.getParams()], fetchModels ,{\r\n      forceFetchOnMount: true\r\n    });\r\n    _data = resolvedData ? resolvedData : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.dataSourceName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page, sortSetting, filterSetting]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery([query.dataSourceName,query.getParams()], () => {\r\n      return query.getResource().getQueried({...sortSetting,filters: filterSettingJSON})\r\n    }, {\r\n      forceFetchOnMount: true\r\n    });\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n  if(! _data.length){\r\n    _data = data;\r\n  }\r\n  if(! _.isArray(_data)){\r\n    _data = [_data];\r\n  }\r\n  /**\r\n   * обновление данных при изменении ячейки\r\n   * @type {any[]}\r\n   * @private\r\n   */\r\n  _data = _data.map((row)=>{\r\n    if(row.id === updatedData.rowId){\r\n      row[updatedData.column] = updatedData.value;\r\n      return{...row};\r\n    }\r\n    return row;\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (_data || []), [_data]),\r\n  }, );\r\n  /**\r\n   * Обработка клика для сортировки\r\n   */\r\n  const sortingHandler = order_by => {\r\n    setSortSettings({\r\n    order_by, \r\n    order: sortSetting &&\r\n      (sortSetting.order_by === order_by) ? (sortSetting.order === \"DESC\" ? \"ASC\" :  \"DESC\") : \"ASC\"\r\n  });\r\n  };\r\n  /**\r\n   * Изменение поля для фильтрации\r\n   */\r\n  const filterHandler = (filteredColumn, searchString) => {\r\n    setPage(1);\r\n    const filterParams = {...filterSetting};\r\n    if(searchString){\r\n      filterParams[filteredColumn] = searchString;\r\n    } else {\r\n      delete filterParams[filteredColumn];\r\n    }\r\n    setFilterSettings(filterParams);\r\n  };\r\n  \r\n  return <><table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => {\r\n            return renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler});\r\n          }\r\n          )}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className={`altrp-table-tbody ${settings.table_style_table_striple_style ? ' altrp-table-tbody--striped' : ''}`}>\r\n    {_status === \"error\" ? <tr>\r\n              <td>{_error.message}</td>\r\n            </tr> : _status === \"loading\" ? <tr>\r\n              <td>Loading</td>\r\n            </tr>\r\n            : rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                  <tr {...row.getRowProps()} className={`altrp-table-tr ${settings.table_hover_row ? 'altrp-table-background' : ''}`}>\r\n                    {row.cells.map((cell, _i) => {\r\n                      let cellContent = cell.render('Cell');\r\n                      let linkTag = isEditor() ? 'a': Link;\r\n                      const style = cell.column.column_body_alignment ? { textAlign: cell.column.column_body_alignment } : {};\r\n                      const cellProps = {...cell.getCellProps()};\r\n                      let _cellContent = cell.value;\r\n\r\n                      /**\r\n                       * Если в настройках колонки установлено редактирование и есть url запроса на редактирование\r\n                       * то добавляем особое поведение\r\n                       */\r\n                      let doubleClickContent = '';\r\n                      if(columns[_i].column_is_editable && columns[_i].column_edit_url){\r\n                        let columnEditUrl = parseURLTemplate(columns[_i].column_edit_url, row.original);\r\n\r\n                        doubleClickContent =\r\n                            <AutoUpdateInput className=\"altrp-inherit altrp-table-td__double-click-content\"\r\n                                             route={columnEditUrl}\r\n                                             resourceid={''}\r\n                                             changevalue={(value)=>{\r\n                                               setUpdatedData({\r\n                                                 value,\r\n                                                 rowId:row.original.id,\r\n                                                 column:columns[_i]._accessor\r\n                                               });\r\n                                             }}\r\n                                             value={_cellContent}/>;\r\n                        cellProps.onDoubleClick = () => {\r\n                          if(doubleClicked.column === columns[_i]._accessor && doubleClicked.rowId === row.original.id){\r\n                            setDoubleClicked({});\r\n                          } else {\r\n                            setDoubleClicked({\r\n                              column: columns[_i]._accessor,\r\n                              rowId: row.original.id,\r\n                            });\r\n                          }\r\n                        };\r\n                      }\r\n                      let cellClassName = 'altrp-table-td';\r\n                      if(doubleClicked.column === columns[_i]._accessor && row.original.id === doubleClicked.rowId){\r\n                        cellClassName += ' altrp-table-td_double-clicked';\r\n                      }\r\n                    /**\r\n                     * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n                     */\r\n                      if (!settings.table_hover_row) {\r\n                        cellClassName += ' altrp-table-background';\r\n                      }\r\n\r\n                      /**\r\n                       * Если значение объект или массив, то отобразим пустую строку\r\n                       */\r\n                      if(_.isObject(cell.value)){\r\n                        cellContent = '';\r\n                      }\r\n                      /**\r\n                       * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                       */\r\n                      if(columns[_i].column_link && row.original.id){\r\n                        cellContent = React.createElement(linkTag, {\r\n                          to: parseURLTemplate(columns[_i].column_link,  row.original),\r\n                          className: 'altrp-inherit altrp-table-td__default-content',\r\n                        }, cellContent)\r\n                      } else {\r\n                        cellContent = React.createElement('span', {\r\n                          className: 'altrp-inherit altrp-table-td__default-content',\r\n                        }, cellContent)\r\n                      }\r\n                      /**\r\n                       * Если нужно указать номер по порядку\r\n                       */\r\n                      if(cell.column._accessor.trim() === '##'){\r\n                        cellContent = counter++;\r\n                      }\r\n                      return <td {...cellProps} className={cellClassName} style={style}>\r\n                          {cellContent}{doubleClickContent}\r\n                        </td>\r\n                    })}\r\n                  </tr>\r\n              )\r\n            })}\r\n    </tbody>\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => {\r\n                  setPage(old => Math.max(old - 1, 0));\r\n                  setDoubleClicked({});\r\n                  setUpdatedData({});\r\n                }}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || 'Previous Page'}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() => {\r\n                  setUpdatedData({});\r\n                  setDoubleClicked({});\r\n                  setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }}\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || 'Next Page'}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\nexport default AltrpTable\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nfunction settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    if (_column.column_name && _column.accessor) {\r\n      _column._accessor = _column.accessor;\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|array}\r\n */\r\nfunction renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n}\r\n\r\n/**\r\n * Отрисовка главного заголовка колонки для таблицы\r\n * @param {{}}column\r\n * @param {{}}sortSetting\r\n * @param {{}}filterSetting\r\n * @param {function}sortingHandler\r\n * @param {function}filterHandler\r\n * @return {*}\r\n */\r\nfunction renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler}){\r\n  const { column_width, column_header_alignment } = column;\r\n  let thProps = {...column.getHeaderProps()};\r\n  const style = {};\r\n  if (column_width) style.width = column_width;\r\n  if (column_header_alignment) style.textAlign = column_header_alignment;\r\n  thProps.className = 'altrp-table-th';\r\n  if(column.column_is_sorted){\r\n    thProps.onClick = () => sortingHandler(column._accessor);\r\n    thProps.className += ' clickable'\r\n  }\r\n  if(column.column_width){\r\n    thProps.width = column.column_width + '%';\r\n  }\r\n  let thText = column.render('column_name');\r\n  return <th {...thProps} style={style}>\r\n    {thText}\r\n    { sortSetting && column.column_is_sorted && (sortSetting.order_by === column._accessor)\r\n      && (sortSetting.order === \"DESC\" ?\r\n        iconsManager().renderIcon('chevron', {className:'rotate-180 sort-icon '}) :\r\n        iconsManager().renderIcon('chevron', {className: 'sort-icon'}))}\r\n    {column.column_is_filtered &&\r\n    <label className=\"altrp-label\">\r\n    <input type=\"text\"\r\n           onClick={e => {e.stopPropagation()}}\r\n           onChange={e=>{\r\n             e.stopPropagation();\r\n             let value = e.target.value;\r\n             filterHandler(column._accessor, value)\r\n           }}\r\n           value={filterSetting[column._accessor] || ''}\r\n           className=\"altrp-field\"/>\r\n    </label>}\r\n\r\n  </th>\r\n}"],"sourceRoot":""}