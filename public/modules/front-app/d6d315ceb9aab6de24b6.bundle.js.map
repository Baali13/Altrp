{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpForm.js","webpack:///./resources/modules/editor/src/js/classes/modules/FormsManager.js"],"names":["AltrpForm","formId","route","method","this","fields","resource","Resource","field","push","modelID","success","forEach","fieldValidate","post","getData","put","console","error","alert","data","getValue","getSettings","formsManager","forms","formIds","fieldsStorage","modelName","form","getForm","length","setFields","addField","submit","_form"],"mappings":"8KA+EeA,E,WAzEb,WAAYC,EAAQC,GAAuB,IAAhBC,EAAgB,uDAAP,OAAO,YACzCC,KAAKH,OAASA,EACdG,KAAKC,OAAS,GACdD,KAAKD,OAASA,EACdC,KAAKF,MAAQA,EACbE,KAAKE,SAAW,IAAIC,IAAS,CAACL,U,oDAOtBG,GACRD,KAAKC,OAASA,I,+BAOPG,GAEP,OADAJ,KAAKC,OAAOI,KAAKD,IACV,I,gDAQIE,G,0EACPC,GAAU,EACdP,KAAKC,OAAOO,SAAQ,SAAAJ,GACbA,EAAMK,kBACTF,GAAU,OAGXA,E,sBACOP,KAAKD,O,OACN,S,OAGA,Q,OAGA,W,wCALUC,KAAKE,SAASQ,KAAKV,KAAKW,W,gEAGxBX,KAAKE,SAASU,IAAIN,EAASN,KAAKW,W,qDAG1CL,E,kCAEYN,KAAKE,SAAL,OAAqBI,G,iDAEpCO,QAAQC,MAAM,+C,iDAILC,MAAM,uB,wKASrB,IAAIC,EAAO,GAMX,OALAhB,KAAKC,OAAOO,SAAQ,SAAAJ,GACfA,EAAMa,aACPD,EAAKZ,EAAMc,YAAY,aAAed,EAAMa,eAGzCD,M,KCgBLG,EAAe,I,WAtFnB,aAAa,YAKXnB,KAAKoB,MAAQ,GAKbpB,KAAKqB,QAAU,GACfrB,KAAKsB,cAAgB,G,iDAUVzB,EAAQ0B,EAAWxB,GAC9B,IAAIyB,EAAOxB,KAAKyB,QAAQ5B,GACpBC,EAAQ,gBAAH,OAAmByB,GAa5B,OAZKC,IACHA,EAAO,IAAI5B,EAAUC,EAAQC,EAAOC,GAKjCC,KAAKsB,cAAczB,IAAWG,KAAKsB,cAAczB,GAAQ6B,SAC1DF,EAAKG,UAAU3B,KAAKsB,cAAczB,WAC3BG,KAAKsB,cAAczB,IAE5BG,KAAKoB,MAAMf,KAAKmB,IAEXA,I,+BAUA3B,EAAQO,GACf,IAAIoB,EAAOxB,KAAKyB,QAAQ5B,GACxB,OAAK2B,EAKEA,EAAKI,SAASxB,IAJnBJ,KAAKsB,cAAczB,GAAUG,KAAKsB,cAAczB,IAAW,GAC3DG,KAAKsB,cAAczB,GAAQQ,KAAKD,IACzB,K,iCAUAP,EAAQS,GACjB,OAAKN,KAAKyB,QAAQ5B,GAIXG,KAAKyB,QAAQ5B,GAAQgC,OAAOvB,IAHjCO,QAAQC,MAAM,qBACP,K,8BASHjB,GACN,IAAIiC,EAAQ,KASZ,OARA9B,KAAKoB,MAAMZ,SAAQ,SAAAgB,GAIdA,EAAK3B,SAAWA,IACjBiC,EAAQN,MAGLM,M,MAKIX","file":"d6d315ceb9aab6de24b6.bundle.js","sourcesContent":["import Resource from \"./Resource\";\r\n\r\n/**\r\n * Класс имитирующий поведение формы (собирает данные с виджетов полей и отправляет их на сервер)\r\n */\r\nclass AltrpForm {\r\n  constructor(formId, route, method = 'POST'){\r\n    this.formId = formId;\r\n    this.fields = [];\r\n    this.method = method;\r\n    this.route = route;\r\n    this.resource = new Resource({route})\r\n  }\r\n\r\n  /**\r\n   * Устанавливает список полей (в случае, если егистрация после добавления какой либо формы)\r\n   * @param {FrontElement[]}fields\r\n   */\r\n  setFields(fields){\r\n    this.fields = fields;\r\n  }\r\n\r\n  /**\r\n   * Добавлйет поле\r\n   * @param {FrontElement} field\r\n   */\r\n  addField(field){\r\n    this.fields.push(field);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Проверка полей перед отправкой\r\n   * @param {int |  null} modelID\r\n   * @return {boolean}\r\n   */\r\n  async submit(modelID){\r\n    let success = true;\r\n    this.fields.forEach(field=>{\r\n      if(! field.fieldValidate()){\r\n        success = false;\r\n      }\r\n    });\r\n    if(success){\r\n      switch (this.method){\r\n        case 'POST':{\r\n          return await this.resource.post(this.getData());\r\n        }\r\n        case 'PUT':{\r\n          return await this.resource.put(modelID, this.getData());\r\n        }\r\n        case 'DELETE':{\r\n          if(modelID){\r\n            // return await await alert('Удаление!');\r\n            return await this.resource.delete(modelID);\r\n          }\r\n          console.error('Не удалось получить ИД модели для удаления!');\r\n        }\r\n      }\r\n    } else {\r\n      return await alert('Валидация не прошла');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Собирает данные с полей для отправки\r\n   * @return {object}\r\n   */\r\n  getData(){\r\n    let data = {};\r\n    this.fields.forEach(field=>{\r\n      if(field.getValue()){\r\n        data[field.getSettings('field_id')] = field.getValue();\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default AltrpForm","import AltrpForm from \"../AltrpForm\";\r\n/**\r\n * Класс менеджер форм для фронтенда/редактора\r\n */\r\nclass FormsManager {\r\n  constructor(){\r\n    /**\r\n     *\r\n     * @type {AltrpForm[]}\r\n     */\r\n    this.forms = [];\r\n    /**\r\n     *\r\n     * @type {string[]}\r\n     */\r\n    this.formIds = [];\r\n    this.fieldsStorage = {};\r\n  }\r\n\r\n  /**\r\n   * Регистрирует новую форму.\r\n   * @param {string} formId\r\n   * @param {string} modelName\r\n   * @param {string} method\r\n   * @return {AltrpForm}\r\n   */\r\n  registerForm(formId, modelName, method){\r\n    let form = this.getForm(formId);\r\n    let route = `/ajax/models/${modelName}`;\r\n    if(! form){\r\n      form = new AltrpForm(formId, route, method);\r\n      /**\r\n       * Если в хранилище есть поля для указанной формы,\r\n       * то передаем их в форму, а ссылку удаляем\r\n       */\r\n      if(this.fieldsStorage[formId] && this.fieldsStorage[formId].length){\r\n        form.setFields(this.fieldsStorage[formId]);\r\n        delete this.fieldsStorage[formId]\r\n      }\r\n      this.forms.push(form);\r\n    }\r\n    return form;\r\n  }\r\n\r\n  /**\r\n   * Добавляет поле к форме\r\n   * сохраняет поле в fieldsStorage если форма еще не добавлена\r\n   * @param {string} formId\r\n   * @param {FrontElement} field\r\n   * @return {boolean}\r\n   */\r\n  addField(formId, field){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      this.fieldsStorage[formId] = this.fieldsStorage[formId] || [];\r\n      this.fieldsStorage[formId].push(field);\r\n      return true;\r\n    }\r\n    return form.addField(field)\r\n  }\r\n  /**\r\n   * Отправляет форму\r\n   * @param {string} formId\r\n   * @param {int | null} modelID\r\n   * @return {boolean}\r\n   */\r\n  submitForm(formId, modelID){\r\n    if(! this.getForm(formId)){\r\n      console.error('Форма не найдена');\r\n      return false;\r\n    }\r\n    return this.getForm(formId).submit(modelID);\r\n  }\r\n  /**\r\n   * Получить форму по id\r\n   * @param {string} formId\r\n   * @return {AltrpForm | null}\r\n   */\r\n  getForm(formId){\r\n    let _form = null;\r\n    this.forms.forEach(form=>{\r\n      /**\r\n       * @member {AltrpForm}form\r\n       */\r\n      if(form.formId === formId){\r\n        _form = form;\r\n      }\r\n    });\r\n    return _form;\r\n  }\r\n}\r\nconst formsManager = new FormsManager();\r\n\r\nexport default formsManager;"],"sourceRoot":""}