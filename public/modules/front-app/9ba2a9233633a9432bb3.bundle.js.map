{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/services/getWidgetData.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicBarChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicPieChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicLineChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicTableWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicDonutChart.js","webpack:///./resources/modules/admin/src/components/dashboard/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicAreaChart.js","webpack:///./resources/modules/editor/src/js/components/altrp-diagram/AltrpDiagram.js"],"names":["EmptyWidget","text","className","queryString","obj","Object","keys","reduce","str","key","i","encodeURIComponent","join","getWidgetData","url","filter","a","params","axios","status","Spinner","style","width","height","role","DynamicBarChart","widget","useState","isLoading","setIsLoading","data","setData","getData","useCallback","source","charts","useEffect","length","entries","map","item","label","color","customStyle","series","colorScheme","options","bar","gradient","stops","stopOpacity","animated","legend","orientation","DynamicPieChart","explode","fontSize","fontFill","DynamicLineChart","strokeWidth","newData","Date","xAxis","type","tickSeries","format","d","firstDate","slice","shift","lastDate","pop","diff","parseInt","formatDistanceStrict","unit","locale","ru","line","sortData","order","b","hasOwnProperty","varA","toUpperCase","varB","comparison","DynamicTableWidget","sort","summary","useMemo","acc","isVertical","DynamicDonutChart","doughnut","DynamicAreaChart","Array","isArray","markLine","area","AltrpDiagram","settings","sql","query","dataSource","value","console","log","BAR","size","PIE","DONUT","LINE","TABLE","AREA"],"mappings":"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","file":"9ba2a9233633a9432bb3.bundle.js","sourcesContent":["import React from \"react\";\r\n\r\nconst EmptyWidget = ({ text }) => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">{text ? text : \"Нет данных\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import axios from \"axios\";\r\n\r\nexport const queryString = (obj = {}) =>\r\n  Object.keys(obj).reduce((str, key, i) => {\r\n    let delimiter, val;\r\n    delimiter = i === 0 ? \"?\" : \"&\";\r\n    key = encodeURIComponent(key);\r\n    val = encodeURIComponent(obj[key]);\r\n    return [str, delimiter, key, \"=\", val].join(\"\");\r\n  }, \"\");\r\n\r\nexport const getWidgetData = async (url, filter) => {\r\n  const params = queryString(filter);\r\n  try {\r\n    return await axios(url + params);\r\n  } catch (error) {\r\n    return { status: 500 };\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  BarChart,\r\n  BarSeries,\r\n  Bar,\r\n  Gradient,\r\n  GradientStop,\r\n  DiscreteLegend,\r\n  DiscreteLegendEntry,\r\n} from \"reaviz\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport { customStyle } from \"../widgetTypes\";\r\n\r\nconst DynamicBarChart = ({ widget, width = 300, height = 300 }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  // Формируем легенду\r\n  const entries = data.map((item, i) => {\r\n    return (\r\n      <DiscreteLegendEntry\r\n        key={i}\r\n        className=\"discrete__legend-item\"\r\n        label={`${item.key} (${item.data})`}\r\n        color={customStyle[i] || \"#606060\"}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <BarChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        series={\r\n          <BarSeries\r\n            colorScheme={\r\n              widget.options.colorScheme === \"Custom\" ? customStyle : widget.options.colorScheme\r\n            }\r\n            bar={<Bar gradient={<Gradient stops={[<GradientStop stopOpacity={1} />]} />} />}\r\n            animated={widget.options.animated}\r\n          />\r\n        }\r\n      />\r\n      {widget.options?.legend && (\r\n        <DiscreteLegend\r\n          className=\"discrete__legend\"\r\n          orientation={widget.options.legend}\r\n          entries={entries}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicBarChart;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { PieChart, PieArcSeries, PieArcLabel, DiscreteLegend, DiscreteLegendEntry } from \"reaviz\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport { customStyle } from \"../widgetTypes\";\r\n\r\nconst DynamicPieChart = ({ widget, width = 300, height = 300 }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!data || data.length === 0) return <EmptyWidget />;\r\n\r\n  // Формируем легенду\r\n  const entries = data.map((item, i) => {\r\n    return (\r\n      <DiscreteLegendEntry\r\n        key={i}\r\n        className=\"discrete__legend-item\"\r\n        label={`${item.key} (${item.data})`}\r\n        color={customStyle[i] || \"#606060\"}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <PieChart\r\n        height={height}\r\n        width={width}\r\n        data={data || []}\r\n        series={\r\n          <PieArcSeries\r\n            animated={widget.options.animated}\r\n            explode={widget.options.explode}\r\n            colorScheme={\r\n              widget.options.colorScheme === \"Custom\" ? customStyle : widget.options.colorScheme\r\n            }\r\n            label={<PieArcLabel fontSize={12} fontFill=\"#000000\" />}\r\n          />\r\n        }\r\n      />\r\n      {widget.options?.legend && (\r\n        <DiscreteLegend\r\n          className=\"discrete__legend\"\r\n          orientation={widget.options.legend}\r\n          entries={entries}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicPieChart;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  LineChart,\r\n  LineSeries,\r\n  Line,\r\n  LinearXAxis,\r\n  LinearXAxisTickSeries,\r\n  LinearXAxisTickLabel,\r\n} from \"reaviz\";\r\nimport format from \"date-fns/format\";\r\nimport formatDistanceStrict from \"date-fns/formatDistanceStrict\";\r\nimport ru from \"date-fns/locale/ru\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport { customStyle } from \"../widgetTypes\";\r\n\r\nconst DynamicLineChart = ({ widget, width = 300, height = 300, strokeWidth = 3 }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      const newData = charts.data.data.map((item) => {\r\n        const key = new Date(item.key);\r\n        if (key) {\r\n          return {\r\n            key,\r\n            data: item.data,\r\n          };\r\n        }\r\n      });\r\n      setData(newData);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const formattingDate = (d) => {\r\n    //  Первая дата\r\n    const firstDate = data.slice().shift();\r\n    // Последняя дата\r\n    const lastDate = data.slice().pop();\r\n    // Разница между датами в месяцах\r\n    const diff = parseInt(\r\n      formatDistanceStrict(firstDate.key, lastDate.key, {\r\n        unit: \"month\",\r\n      })\r\n    );\r\n\r\n    if (diff >= 0 && diff <= 12) {\r\n      return format(d, \"d MMM\", { locale: ru });\r\n    } else {\r\n      return format(d, \"d MMM yy\", { locale: ru });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <>\r\n      <LineChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        xAxis={\r\n          <LinearXAxis\r\n            type=\"time\"\r\n            tickSeries={\r\n              <LinearXAxisTickSeries\r\n                label={\r\n                  <LinearXAxisTickLabel\r\n                    //fontSize={12}\r\n                    //fill=\"#000000\"\r\n                    format={formattingDate}\r\n                  />\r\n                }\r\n              />\r\n            }\r\n          />\r\n        }\r\n        series={\r\n          <LineSeries\r\n            animated={widget.options.animated}\r\n            line={<Line strokeWidth={strokeWidth} />}\r\n            colorScheme={\r\n              widget.options.colorScheme === \"Custom\" ? customStyle : widget.options.colorScheme\r\n            }\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicLineChart;\r\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst sortData = (key, order = \"desc\") => {\r\n  return function innerSort(a, b) {\r\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n      return 0;\r\n    }\r\n\r\n    const varA = typeof a[key] === \"string\" ? a[key].toUpperCase() : a[key];\r\n    const varB = typeof b[key] === \"string\" ? b[key].toUpperCase() : b[key];\r\n\r\n    let comparison = 0;\r\n    if (varA > varB) {\r\n      comparison = 1;\r\n    } else if (varA < varB) {\r\n      comparison = -1;\r\n    }\r\n    return order === \"desc\" ? comparison * -1 : comparison;\r\n  };\r\n};\r\n\r\nconst DynamicTableWidget = ({ widget, width }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data.sort(sortData(\"data\")));\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const summary = useMemo(() => data.reduce((acc, item) => acc + item.data, 0), [data]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  if (widget.options.isVertical) {\r\n    return (\r\n      <div className=\"widget-table\" style={{ width: width + \"px\" }}>\r\n        <table className=\"vertical-table\">\r\n          <tbody>\r\n            {data.map((item, key) => (\r\n              <tr key={key}>\r\n                <td>{item.key}</td>\r\n                <td>{item.data}</td>\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <td>ИТОГО</td>\r\n              <td>{summary}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"widget-table\" style={{ width: width + \"px\" }}>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {data.map((item, key) => (\r\n              <th key={key}>{item.key}</th>\r\n            ))}\r\n            <th>ИТОГО</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {data.map((item, key) => (\r\n              <td key={key}>{item.data}</td>\r\n            ))}\r\n            <td>{summary}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicTableWidget;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { PieChart, PieArcSeries, PieArcLabel, DiscreteLegend, DiscreteLegendEntry } from \"reaviz\";\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\nimport { customStyle } from \"../widgetTypes\";\r\n\r\nconst DynamicDonutChart = ({ widget, width = 300, height = 300 }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  // Формируем легенду\r\n  const entries = data.map((item, i) => {\r\n    return (\r\n      <DiscreteLegendEntry\r\n        key={i}\r\n        className=\"discrete__legend-item\"\r\n        label={`${item.key} (${item.data})`}\r\n        color={customStyle[i] || \"#606060\"}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <PieChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        series={\r\n          <PieArcSeries\r\n            animated={widget.options.animated}\r\n            doughnut={true}\r\n            colorScheme={\r\n              widget.options.colorScheme === \"Custom\" ? customStyle : widget.options.colorScheme\r\n            }\r\n            label={<PieArcLabel fontSize={12} fontFill=\"#000000\" />}\r\n          />\r\n        }\r\n      />\r\n      {widget.options?.legend && (\r\n        <DiscreteLegend\r\n          className=\"discrete__legend\"\r\n          orientation={widget.options.legend}\r\n          entries={entries}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicDonutChart;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  AreaChart,\r\n  AreaSeries,\r\n  MarkLine,\r\n  Line,\r\n  LinearXAxis,\r\n  LinearXAxisTickSeries,\r\n  LinearXAxisTickLabel,\r\n  Area,\r\n  Gradient,\r\n  GradientStop,\r\n} from \"reaviz\";\r\n\r\nimport format from \"date-fns/format\";\r\nimport formatDistanceStrict from \"date-fns/formatDistanceStrict\";\r\nimport ru from \"date-fns/locale/ru\";\r\n\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst DynamicAreaChart = ({ widget, width = 300, height = 300, color = \"#FFD51F\" }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200 && typeof charts.data !== \"string\") {\r\n      const newData = charts.data.data.map((item) => {\r\n        const key = new Date(item.key);\r\n        if (key) {\r\n          return {\r\n            key,\r\n            data: item.data,\r\n          };\r\n        }\r\n      });\r\n      setData(newData);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const formattingDate = (d) => {\r\n    //  Первая дата\r\n    const firstDate = data.slice().shift();\r\n    // Последняя дата\r\n    const lastDate = data.slice().pop();\r\n    // Разница между датами в месяцах\r\n    const diff = parseInt(\r\n      formatDistanceStrict(firstDate.key, lastDate.key, {\r\n        unit: \"month\",\r\n      })\r\n    );\r\n\r\n    if (diff >= 0 && diff <= 12) {\r\n      return format(d, \"d LLL\", { locale: ru });\r\n    } else {\r\n      return format(d, \"d MMM yy\", { locale: ru });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <>\r\n      <AreaChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        xAxis={\r\n          <LinearXAxis\r\n            type=\"time\"\r\n            tickSeries={\r\n              <LinearXAxisTickSeries label={<LinearXAxisTickLabel format={formattingDate} />} />\r\n            }\r\n          />\r\n        }\r\n        series={\r\n          <AreaSeries\r\n            animated={widget.options.animated}\r\n            type={widget.options.type || \"standard\"}\r\n            markLine={<MarkLine strokeWidth={0} />}\r\n            line={<Line strokeWidth={0} />}\r\n            area={\r\n              <Area\r\n                gradient={<Gradient color={color} stops={[<GradientStop color={color} />]} />}\r\n              />\r\n            }\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicAreaChart;\r\n","import React from \"react\";\r\n\r\nimport DynamicBarChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicBarChart\";\r\nimport DynamicPieChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicPieChart\";\r\nimport DynamicAreaChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicAreaChart\";\r\nimport DynamicLineChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicLineChart\";\r\nimport DynamicTableWidget from \"../../../../../admin/src/components/dashboard/widgets/DynamicTableWidget\";\r\nimport DynamicDonutChart from \"../../../../../admin/src/components/dashboard/widgets/DynamicDonutChart\";\r\n\r\nimport {\r\n  BAR,\r\n  PIE,\r\n  LINE,\r\n  AREA,\r\n  TABLE,\r\n  DONUT,\r\n} from \"../../../../../admin/src/components/dashboard/widgetTypes\";\r\n\r\nconst AltrpDiagram = ({ settings }) => {\r\n  const sql = settings.query?.dataSource?.value;\r\n\r\n  if (!sql) {\r\n    return <div className=\"altrp-chart\">Choose data for chart</div>;\r\n  }\r\n\r\n  console.log(\"settings :>> \", settings);\r\n\r\n  const widget = {\r\n    source: sql,\r\n    options: {\r\n      colorScheme: settings.colorScheme,\r\n      legend: \"\",\r\n      animated: settings.animated,\r\n      isVertical: settings.isVertical,\r\n    },\r\n    filter: {},\r\n  };\r\n\r\n  switch (settings.type) {\r\n    case BAR:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicBarChart widget={widget} width={settings.width?.size} />\r\n        </div>\r\n      );\r\n    case PIE:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicPieChart widget={widget} width={settings.width?.size} />\r\n        </div>\r\n      );\r\n    case DONUT:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicDonutChart widget={widget} width={settings.width?.size} />\r\n        </div>\r\n      );\r\n    case LINE:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicLineChart widget={widget} width={settings.width?.size} />\r\n        </div>\r\n      );\r\n    case TABLE:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicTableWidget widget={widget} width={settings.width?.size} />\r\n        </div>\r\n      );\r\n    case AREA:\r\n      return (\r\n        <div className=\"altrp-chart\">\r\n          <DynamicAreaChart widget={widget} width={settings.width?.size} />\r\n        </div>\r\n      );\r\n    default:\r\n      return <></>;\r\n  }\r\n};\r\n\r\nexport default AltrpDiagram;\r\n"],"sourceRoot":""}