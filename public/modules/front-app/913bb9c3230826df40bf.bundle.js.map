{"version":3,"sources":["webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?fb79","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js","webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?2657"],"names":["content","module","i","options","transform","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","AltrpTable","settings","query","tables_columns","length","children","modelName","_status","_error","_latestData","_data","useState","page","setPage","fetchModels","useCallback","getQueried","pageSize","usePaginatedQuery","status","resolvedData","latestData","error","useEffect","hasMore","queryCache","prefetchQuery","useQuery","getResource","data","columns","forEach","_column","column_name","accessor","push","settingsToColumns","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","additional_rows","_","isArray","map","row","additional_cells","id","cell","rowspan","colspan","role","colSpan","rowSpan","title","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","isSorted","isSortedDesc","message","getRowProps","cells","_i","cellContent","linkTag","isEditor","Link","isObject","value","column_link","original","createElement","to","replace","getCellProps","paginationType","onClick","old","Math","max","disabled","prev_text","current_page_text","next_text"],"mappings":"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","file":"913bb9c3230826df40bf.bundle.js","sourcesContent":["\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, {useCallback, useState, useEffect} from \"react\";\r\nimport {useTable, useSortBy} from \"react-table\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport '../../../sass/altrp-pagination.scss';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isEditor} from \"../../../../../front-app/src/js/helpers\";\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n  if(! query.modelName){\r\n    return <div children=\"Please Choose Model\"/>\r\n  }\r\n  let _data =[], _status, _error, _latestData;\r\n  const [page, setPage] = useState(1);\r\n\r\n  const fetchModels = useCallback(async (key, page = 1) => {\r\n    return query.getQueried({\r\n      page,\r\n    })\r\n  });\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.modelName, page], fetchModels, {});\r\n    _data = resolvedData ? resolvedData[query.modelName] : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.modelName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery(query.modelName, () => {\r\n      return query.getResource().getQueried()\r\n    }, [query.modelName]);\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (_data || []), [_data]),\r\n  }, );\r\n  return <><table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()} className=\"altrp-table-th\">{column.render('column_name')}\r\n                <span className=\"altrp-table-th_sort\">\r\n                    {column.isSorted\r\n                        ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                        : ''}\r\n                  </span>\r\n              </th>\r\n          ))}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {_status === \"error\" ? <tr>\r\n              <td>{_error.message}</td>\r\n            </tr> : _status === \"loading\" ? <tr>\r\n              <td>Loading</td>\r\n            </tr>\r\n            : rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                  <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n                    {row.cells.map((cell, _i) => {\r\n                      let cellContent = cell.render('Cell');\r\n                      let linkTag = isEditor() ? 'a': Link;\r\n                      /**\r\n                       * Если значение объект или масиив, то отобразим пустую строку\r\n                       */\r\n                      if(_.isObject(cell.value) || _.isArray(cell.value)){\r\n                        cellContent = '';\r\n                      }\r\n                      /**\r\n                       * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                       */\r\n                      if(columns[_i].column_link && row.original.id){\r\n                        cellContent = React.createElement(linkTag, {\r\n                          to: columns[_i].column_link.replace(':id', row.original.id),\r\n                          className: 'altrp-inherit',\r\n                        }, cellContent)\r\n                      }\r\n                      return <td {...cell.getCellProps()} className=\"altrp-table-td\">{cellContent}</td>\r\n                    })}\r\n                  </tr>\r\n              )\r\n            })}\r\n    </tbody>\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => setPage(old => Math.max(old - 1, 0))}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || 'Previous Page'}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() =>\r\n                    setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || 'Next Page'}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\nexport default AltrpTable\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nfunction settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    if (_column.column_name && _column.accessor) {\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|[]}\r\n */\r\nfunction renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n\r\n}","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n"],"sourceRoot":""}