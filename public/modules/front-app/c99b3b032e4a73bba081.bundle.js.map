{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpForm.js","webpack:///./resources/modules/editor/src/js/classes/modules/FormsManager.js"],"names":["AltrpForm","formId","modelName","method","this","fields","route","resource","Resource","field","push","modelID","success","forEach","fieldValidate","post","getData","put","res","then","modelsManager","updateModelWithData","console","error","alert","data","getValue","getSettings","log","formsManager","forms","formIds","fieldsStorage","form","getForm","length","setFields","addField","submit","_form"],"mappings":"+KA2FeA,E,WArFb,WAAYC,EAAQC,GAA2B,IAAhBC,EAAgB,uDAAP,OAAO,YAC7CC,KAAKH,OAASA,EACdG,KAAKC,OAAS,GACdD,KAAKD,OAASA,EACdC,KAAKF,UAAYA,EACjB,IAAII,EAAQ,gBAAH,OAAmBJ,GAC5BE,KAAKG,SAAW,IAAIC,IAAS,CAACF,U,oDAOtBD,GACRD,KAAKC,OAASA,I,+BAOPI,GAEP,OADAL,KAAKC,OAAOK,KAAKD,IACV,I,gDAQIE,G,mFACPC,GAAU,EACdR,KAAKC,OAAOQ,SAAQ,SAAAJ,GACbA,EAAMK,kBACTF,GAAU,OAGXA,E,sBACOR,KAAKD,O,OACN,S,OAGA,Q,OAaA,W,wCAfUC,KAAKG,SAASQ,KAAKX,KAAKY,W,mDAKlCL,E,kCACYP,KAAKG,SAASU,IAAIN,EAASP,KAAKY,W,eAA7CE,E,OACA,wCAAkCC,MAAK,SAAAC,GACrCA,EAAa,QAASC,oBAAoB,EAAKnB,UAAWS,EAASO,EAAI,EAAKhB,e,kBAGvEgB,G,QAETI,QAAQC,MAAM,+C,YAGXZ,E,kCAEYP,KAAKG,SAAL,OAAqBI,G,iDAEpCW,QAAQC,MAAM,+C,iDAILC,MAAM,uB,wKASrB,IAAIC,EAAO,GAOX,OANArB,KAAKC,OAAOQ,SAAQ,SAAAJ,GACM,OAArBA,EAAMiB,aACPD,EAAKhB,EAAMkB,YAAY,aAAelB,EAAMiB,eAGhDJ,QAAQM,IAAIH,GACLA,M,KCGLI,EAAe,I,WArFnB,aAAa,YAKXzB,KAAK0B,MAAQ,GAKb1B,KAAK2B,QAAU,GACf3B,KAAK4B,cAAgB,G,iDAUV/B,EAAQC,EAAWC,GAC9B,IAAI8B,EAAO7B,KAAK8B,QAAQjC,GAaxB,OAZKgC,IACHA,EAAO,IAAIjC,EAAUC,EAAQC,EAAWC,GAKrCC,KAAK4B,cAAc/B,IAAWG,KAAK4B,cAAc/B,GAAQkC,SAC1DF,EAAKG,UAAUhC,KAAK4B,cAAc/B,WAC3BG,KAAK4B,cAAc/B,IAE5BG,KAAK0B,MAAMpB,KAAKuB,IAEXA,I,+BAUAhC,EAAQQ,GACf,IAAIwB,EAAO7B,KAAK8B,QAAQjC,GACxB,OAAKgC,EAKEA,EAAKI,SAAS5B,IAJnBL,KAAK4B,cAAc/B,GAAUG,KAAK4B,cAAc/B,IAAW,GAC3DG,KAAK4B,cAAc/B,GAAQS,KAAKD,IACzB,K,iCAUAR,EAAQU,GACjB,OAAKP,KAAK8B,QAAQjC,GAIXG,KAAK8B,QAAQjC,GAAQqC,OAAO3B,IAHjCW,QAAQC,MAAM,qBACP,K,8BASHtB,GACN,IAAIsC,EAAQ,KASZ,OARAnC,KAAK0B,MAAMjB,SAAQ,SAAAoB,GAIdA,EAAKhC,SAAWA,IACjBsC,EAAQN,MAGLM,M,MAKIV","file":"c99b3b032e4a73bba081.bundle.js","sourcesContent":["import Resource from \"./Resource\";\r\n\r\n/**\r\n * Класс имитирующий поведение формы (собирает данные с виджетов полей и отправляет их на сервер)\r\n */\r\nclass AltrpForm {\r\n  constructor(formId, modelName, method = 'POST'){\r\n    this.formId = formId;\r\n    this.fields = [];\r\n    this.method = method;\r\n    this.modelName = modelName;\r\n    let route = `/ajax/models/${modelName}`;\r\n    this.resource = new Resource({route})\r\n  }\r\n\r\n  /**\r\n   * Устанавливает список полей (в случае, если егистрация после добавления какой либо формы)\r\n   * @param {FrontElement[]}fields\r\n   */\r\n  setFields(fields){\r\n    this.fields = fields;\r\n  }\r\n\r\n  /**\r\n   * Добавлйет поле\r\n   * @param {FrontElement} field\r\n   */\r\n  addField(field){\r\n    this.fields.push(field);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Проверка полей перед отправкой\r\n   * @param {int |  null} modelID\r\n   * @return {boolean}\r\n   */\r\n  async submit(modelID){\r\n    let success = true;\r\n    this.fields.forEach(field=>{\r\n      if(! field.fieldValidate()){\r\n        success = false;\r\n      }\r\n    });\r\n    if(success){\r\n      switch (this.method){\r\n        case 'POST':{\r\n          return await this.resource.post(this.getData());\r\n        }\r\n        case 'PUT':{\r\n          // return await alert(JSON.stringify(this.getData()));\r\n          let res;\r\n          if(modelID){\r\n            res =  await this.resource.put(modelID, this.getData());\r\n            import('./modules/ModelsManager').then(modelsManager=>{\r\n              modelsManager.default.updateModelWithData(this.modelName, modelID, res[this.modelName]);\r\n            });\r\n\r\n            return res;\r\n          }\r\n          console.error('Не удалось получить ИД модели для удаления!');\r\n        }\r\n        case 'DELETE':{\r\n          if(modelID){\r\n            // return await await alert('Удаление!');\r\n            return await this.resource.delete(modelID);\r\n          }\r\n          console.error('Не удалось получить ИД модели для удаления!');\r\n        }\r\n      }\r\n    } else {\r\n      return await alert('Валидация не прошла');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Собирает данные с полей для отправки\r\n   * @return {object}\r\n   */\r\n  getData(){\r\n    let data = {};\r\n    this.fields.forEach(field=>{\r\n      if(field.getValue() !== null){\r\n        data[field.getSettings('field_id')] = field.getValue();\r\n      }\r\n    });\r\n    console.log(data);\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default AltrpForm","import AltrpForm from \"../AltrpForm\";\r\n/**\r\n * Класс менеджер форм для фронтенда/редактора\r\n */\r\nclass FormsManager {\r\n  constructor(){\r\n    /**\r\n     *\r\n     * @type {AltrpForm[]}\r\n     */\r\n    this.forms = [];\r\n    /**\r\n     *\r\n     * @type {string[]}\r\n     */\r\n    this.formIds = [];\r\n    this.fieldsStorage = {};\r\n  }\r\n\r\n  /**\r\n   * Регистрирует новую форму.\r\n   * @param {string} formId\r\n   * @param {string} modelName\r\n   * @param {string} method\r\n   * @return {AltrpForm}\r\n   */\r\n  registerForm(formId, modelName, method){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      form = new AltrpForm(formId, modelName, method);\r\n      /**\r\n       * Если в хранилище есть поля для указанной формы,\r\n       * то передаем их в форму, а ссылку удаляем\r\n       */\r\n      if(this.fieldsStorage[formId] && this.fieldsStorage[formId].length){\r\n        form.setFields(this.fieldsStorage[formId]);\r\n        delete this.fieldsStorage[formId]\r\n      }\r\n      this.forms.push(form);\r\n    }\r\n    return form;\r\n  }\r\n\r\n  /**\r\n   * Добавляет поле к форме\r\n   * сохраняет поле в fieldsStorage если форма еще не добавлена\r\n   * @param {string} formId\r\n   * @param {FrontElement} field\r\n   * @return {boolean}\r\n   */\r\n  addField(formId, field){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      this.fieldsStorage[formId] = this.fieldsStorage[formId] || [];\r\n      this.fieldsStorage[formId].push(field);\r\n      return true;\r\n    }\r\n    return form.addField(field)\r\n  }\r\n  /**\r\n   * Отправляет форму\r\n   * @param {string} formId\r\n   * @param {int | null} modelID\r\n   * @return {boolean}\r\n   */\r\n  submitForm(formId, modelID){\r\n    if(! this.getForm(formId)){\r\n      console.error('Форма не найдена');\r\n      return false;\r\n    }\r\n    return this.getForm(formId).submit(modelID);\r\n  }\r\n  /**\r\n   * Получить форму по id\r\n   * @param {string} formId\r\n   * @return {AltrpForm | null}\r\n   */\r\n  getForm(formId){\r\n    let _form = null;\r\n    this.forms.forEach(form=>{\r\n      /**\r\n       * @member {AltrpForm}form\r\n       */\r\n      if(form.formId === formId){\r\n        _form = form;\r\n      }\r\n    });\r\n    return _form;\r\n  }\r\n}\r\nconst formsManager = new FormsManager();\r\n\r\nexport default formsManager;"],"sourceRoot":""}