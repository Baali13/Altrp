{"version":3,"sources":["widgets/Text/settings.js","hooks/useWidgetSettings.js"],"names":["TextSettings","useWidgetSettings","wordBreak","setWordBreak","textTransform","setTextTransform","fitContent","setFitContent","lineHeight","setLineHeight","letterSpacing","setLetterSpacing","className","name","value","onChange","options","min","max","step","appendix","list","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget"],"mappings":"+KAoEeA,UA/DM,WAAO,IAAD,EACSC,YAAkB,mBAAoB,UAD/C,mBAClBC,EADkB,KACPC,EADO,OAEiBF,YAAkB,uBAAwB,QAF3D,mBAElBG,EAFkB,KAEHC,EAFG,OAGWJ,YAAkB,eAAgB,QAH7C,mBAGlBK,EAHkB,KAGNC,EAHM,OAIWN,YAAkB,oBAAqB,UAJlD,mBAIlBO,EAJkB,KAINC,EAJM,OAKiBR,YAAkB,uBAAwB,QAL3D,mBAKlBS,EALkB,KAKHC,EALG,KAOzB,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CACEC,KAAK,sHACLC,MAAON,EACPO,SAAUN,EACVO,QAAS,CAAEC,IAAK,EAAKC,IAAK,IAAKC,KAAM,GAAKC,SAAU,SAEtD,kBAAC,IAAD,CACEP,KAAK,4HACLC,MAAOJ,EACPK,SAAUJ,EACVK,QAAS,CAAEC,IAAK,EAAKC,IAAK,IAAMC,KAAM,IAAMC,SAAU,SAExD,kBAAC,IAAD,CACEP,KAAK,kFACLC,MAAOV,EACPW,SAAUV,EACVgB,KAAM,CACJ,CACER,KAAM,sEACNC,MAAO,QAET,CACED,KAAM,iHACNC,MAAO,aAET,CACED,KAAM,uHACNC,MAAO,gBAIb,kBAAC,IAAD,CACED,KAAK,iKACLC,MAAOR,EACPS,SAAUR,EACVc,KAAM,CACJ,CAAER,KAAM,4GAAwBC,MAAO,QACvC,CAAED,KAAM,2GAAuBC,MAAO,kBAG1C,kBAAC,IAAD,CACED,KAAK,4EACLC,MAAOZ,EACPa,SAAUZ,EACVkB,KAAM,CACJ,CAAER,KAAM,sEAAgBC,MAAO,UAC/B,CAAED,KAAM,kIAA0BC,MAAO,aACzC,CAAED,KAAM,4EAAiBC,MAAO,kB,iCC7D1C,4CA4Ceb,IAvCW,SAACqB,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH","file":"static/js/18.39eefb68.chunk.js","sourcesContent":["import React from \"react\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport SelectControl from \"../../components/painter/controls/SelectControl\";\nimport RangeControl from \"../../components/painter/controls/RangeControl\";\n\nconst TextSettings = () => {\n  const [wordBreak, setWordBreak] = useWidgetSettings(\"styles.wordBreak\", \"normal\");\n  const [textTransform, setTextTransform] = useWidgetSettings(\"styles.textTransform\", \"none\");\n  const [fitContent, setFitContent] = useWidgetSettings(\"styles.width\", \"100%\");\n  const [lineHeight, setLineHeight] = useWidgetSettings(\"styles.lineHeight\", \"1.5rem\");\n  const [letterSpacing, setLetterSpacing] = useWidgetSettings(\"styles.letterSpacing\", \"0rem\");\n\n  return (\n    <div className=\"my-3\">\n      <RangeControl\n        name=\"Межстрочный интервал\"\n        value={lineHeight}\n        onChange={setLineHeight}\n        options={{ min: 1.0, max: 2.5, step: 0.1, appendix: \"rem\" }}\n      />\n      <RangeControl\n        name=\"Межбуквенный интервал\"\n        value={letterSpacing}\n        onChange={setLetterSpacing}\n        options={{ min: 0.0, max: 0.25, step: 0.01, appendix: \"rem\" }}\n      />\n      <SelectControl\n        name=\"Регистр текста\"\n        value={textTransform}\n        onChange={setTextTransform}\n        list={[\n          {\n            name: \"По-умолчанию\",\n            value: \"none\",\n          },\n          {\n            name: \"Все символы строчные\",\n            value: \"lowercase\",\n          },\n          {\n            name: \"Все символы заглавные\",\n            value: \"uppercase\",\n          },\n        ]}\n      />\n      <SelectControl\n        name=\"Ширина текстового контейнера\"\n        value={fitContent}\n        onChange={setFitContent}\n        list={[\n          { name: \"На всю ширину секции\", value: \"100%\" },\n          { name: \"Под ширину контента\", value: \"fit-content\" },\n        ]}\n      />\n      <SelectControl\n        name=\"Перенос строк\"\n        value={wordBreak}\n        onChange={setWordBreak}\n        list={[\n          { name: \"По-умолчанию\", value: \"normal\" },\n          { name: \"Автоматический перенос\", value: \"break-all\" },\n          { name: \"Не переносить\", value: \"keep-all\" },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport default TextSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}