{"version":3,"sources":["widgets/News/fakeCategories.js","widgets/News/settings.js","hooks/useWidgetSettings.js"],"names":["NewsSettings","useWidgetSettings","category","setCategory","name","value","onChange","list","fakeCategories","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget"],"mappings":"sHAAA,OAAe,WACb,GACA,mDACA,6CACA,yDACA,qHACA,yC,8FCYaA,UAbM,WAAO,IAAD,EACOC,YAAkB,WAAY,IADrC,mBAClBC,EADkB,KACRC,EADQ,KAGzB,OACE,kBAAC,IAAD,CACEC,KAAK,0GACLC,MAAOH,EACPI,SAAUH,EACVI,KAAMC,c,iCCbZ,4CA4CeP,IAvCW,SAACQ,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH","file":"static/js/17.96124f3e.chunk.js","sourcesContent":["export default [\n  \"\",\n  \"Политика\",\n  \"Религия\",\n  \"Коммерция\",\n  \"Благотворительность\",\n  \"Разное\",\n];\n","import React from \"react\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport SelectControl from \"../../components/painter/controls/SelectControl\";\nimport fakeCategories from \"./fakeCategories\";\n\nconst NewsSettings = () => {\n  const [category, setCategory] = useWidgetSettings(\"category\", \"\");\n\n  return (\n    <SelectControl\n      name=\"Категория новостей\"\n      value={category}\n      onChange={setCategory}\n      list={fakeCategories}\n    />\n  );\n};\n\nexport default NewsSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}