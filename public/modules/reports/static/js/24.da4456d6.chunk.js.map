{"version":3,"sources":["hooks/useWidgetSettings.js","components/painter/controls/IndentControl.js","components/painter/widgets/Indentation.js"],"names":["useWidgetSettings","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget","IndentControl","list","title","Row","Label","className","map","item","index","Group","key","as","Col","Text","muted","name","Control","type","size","value","parseInt","onChange","e","target","handleChange","Indentation","marginLeft","setMarginLeft","marginRight","setMarginRight","marginTop","setMarginTop","marginBottom","setMarginBottom","paddingLeft","setPaddingLeft","paddingRight","setPaddingRight","paddingTop","setPaddingTop","paddingBottom","setPaddingBottom"],"mappings":"sHAAA,4CA4CeA,IAvCW,SAACC,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH,Q,iCCrC5B,qCA2BeI,IAxBO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAM7B,OACE,kBAAC,IAAKC,IAAN,KACE,kBAAC,IAAKC,MAAN,CAAYC,UAAU,SAASH,GAC9BD,EAAKK,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,IAAKC,MAAN,CAAYC,IAAKF,EAAOG,GAAIC,KAC1B,kBAAC,IAAKC,KAAN,CAAWC,OAAK,GAAEP,EAAKQ,MACvB,kBAAC,IAAKC,QAAN,CACEC,KAAK,SACLC,KAAK,KACLC,MAAOC,SAASb,EAAKY,OACrBE,SAAU,SAACC,GAAD,OAfC,SAACA,EAAGD,GAEvBA,EADYD,SAASE,EAAEC,OAAOJ,QAcLK,CAAaF,EAAGf,EAAKc,oB,sFCuBnCI,UArCK,WAAM,MAEY/C,YAAkB,oBAAqB,GAFnD,mBAEjBgD,EAFiB,KAELC,EAFK,OAGcjD,YAAkB,qBAAsB,GAHtD,mBAGjBkD,EAHiB,KAGJC,EAHI,OAIUnD,YAAkB,mBAAoB,GAJhD,mBAIjBoD,EAJiB,KAINC,EAJM,OAKgBrD,YAAkB,sBAAuB,GALzD,mBAKjBsD,EALiB,KAKHC,EALG,OAQcvD,YAAkB,qBAAsB,GARtD,mBAQjBwD,EARiB,KAQJC,EARI,OASgBzD,YAAkB,sBAAuB,GATzD,mBASjB0D,EATiB,KASHC,EATG,OAUY3D,YAAkB,oBAAqB,GAVnD,mBAUjB4D,EAViB,KAULC,EAVK,OAWkB7D,YAAkB,uBAAwB,GAX5D,mBAWjB8D,EAXiB,KAWFC,EAXE,KAaxB,OACE,oCACE,kBAAC,IAAD,CACEvC,MAAM,wFACND,KAAM,CACJ,CAAEc,KAAM,uCAAUI,MAAOW,EAAWT,SAAUU,GAC9C,CAAEhB,KAAM,uCAAUI,MAAOS,EAAaP,SAAUQ,GAChD,CAAEd,KAAM,iCAASI,MAAOa,EAAcX,SAAUY,GAChD,CAAElB,KAAM,iCAASI,MAAOO,EAAYL,SAAUM,MAGlD,kBAAC,IAAD,CACEzB,MAAM,0GACND,KAAM,CACJ,CAAEc,KAAM,uCAAUI,MAAOmB,EAAYjB,SAAUkB,GAC/C,CAAExB,KAAM,uCAAUI,MAAOiB,EAAcf,SAAUgB,GACjD,CAAEtB,KAAM,iCAASI,MAAOqB,EAAenB,SAAUoB,GACjD,CAAE1B,KAAM,iCAASI,MAAOe,EAAab,SAAUc","file":"static/js/24.da4456d6.chunk.js","sourcesContent":["import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\nconst IndentControl = ({ list, title }) => {\n  const handleChange = (e, onChange) => {\n    const val = parseInt(e.target.value);\n    onChange(val);\n  };\n\n  return (\n    <Form.Row>\n      <Form.Label className=\"w-100\">{title}</Form.Label>\n      {list.map((item, index) => (\n        <Form.Group key={index} as={Col}>\n          <Form.Text muted>{item.name}</Form.Text>\n          <Form.Control\n            type=\"number\"\n            size=\"sm\"\n            value={parseInt(item.value)}\n            onChange={(e) => handleChange(e, item.onChange)}\n          />\n        </Form.Group>\n      ))}\n    </Form.Row>\n  );\n};\n\nexport default IndentControl;\n","import React from \"react\";\n\nimport useWidgetSettings from \"../../../hooks/useWidgetSettings\";\nimport IndentControl from \"../controls/IndentControl\";\n\nconst Indentation = () => {\n  // Margins\n  const [marginLeft, setMarginLeft] = useWidgetSettings(\"styles.marginLeft\", 0);\n  const [marginRight, setMarginRight] = useWidgetSettings(\"styles.marginRight\", 0);\n  const [marginTop, setMarginTop] = useWidgetSettings(\"styles.marginTop\", 0);\n  const [marginBottom, setMarginBottom] = useWidgetSettings(\"styles.marginBottom\", 0);\n\n  // Paddings\n  const [paddingLeft, setPaddingLeft] = useWidgetSettings(\"styles.paddingLeft\", 0);\n  const [paddingRight, setPaddingRight] = useWidgetSettings(\"styles.paddingRight\", 0);\n  const [paddingTop, setPaddingTop] = useWidgetSettings(\"styles.paddingTop\", 0);\n  const [paddingBottom, setPaddingBottom] = useWidgetSettings(\"styles.paddingBottom\", 0);\n\n  return (\n    <>\n      <IndentControl\n        title=\"Внешние отступы\"\n        list={[\n          { name: \"Вверху\", value: marginTop, onChange: setMarginTop },\n          { name: \"Справа\", value: marginRight, onChange: setMarginRight },\n          { name: \"Внизу\", value: marginBottom, onChange: setMarginBottom },\n          { name: \"Слева\", value: marginLeft, onChange: setMarginLeft },\n        ]}\n      />\n      <IndentControl\n        title=\"Внутренние отступы\"\n        list={[\n          { name: \"Вверху\", value: paddingTop, onChange: setPaddingTop },\n          { name: \"Справа\", value: paddingRight, onChange: setPaddingRight },\n          { name: \"Внизу\", value: paddingBottom, onChange: setPaddingBottom },\n          { name: \"Слева\", value: paddingLeft, onChange: setPaddingLeft },\n        ]}\n      />\n    </>\n  );\n};\n\nexport default Indentation;\n"],"sourceRoot":""}