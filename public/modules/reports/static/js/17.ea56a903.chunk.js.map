{"version":3,"sources":["widgets/Divider/settings.js","hooks/useWidgetSettings.js"],"names":["DividerSettings","useWidgetSettings","size","setSize","color","setColor","breakAfter","setBreakAfter","name","value","onChange","options","min","max","step","appendix","list","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget"],"mappings":"mMAmCeA,UA5BS,WAAO,IAAD,EACJC,YAAkB,OAAQ,GADtB,mBACrBC,EADqB,KACfC,EADe,OAEFF,YAAkB,QAAS,WAFzB,mBAErBG,EAFqB,KAEdC,EAFc,OAGQJ,YAAkB,aAAc,QAHxC,mBAGrBK,EAHqB,KAGTC,EAHS,KAK5B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,gHACLC,MAAOP,EACPQ,SAAUP,EACVQ,QAAS,CAAEC,IAAK,EAAGC,IAAK,GAAIC,KAAM,EAAGC,SAAU,QAEjD,kBAAC,IAAD,CAAaP,KAAK,8FAAmBC,MAAOL,EAAOM,SAAUL,IAC7D,kBAAC,IAAD,CACEG,KAAK,gJACLC,MAAOH,EACPI,SAAUH,EACVS,KAAM,CACJ,CAAER,KAAM,iFAAiBC,MAAO,QAChC,CAAED,KAAM,0GAAsBC,MAAO,QACrC,CAAED,KAAM,uHAAyBC,MAAO,e,iCC5BlD,4CA4CeR,IAvCW,SAACgB,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH","file":"static/js/17.ea56a903.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport RangeControl from \"../../components/painter/controls/RangeControl\";\nimport ColorPicker from \"../../components/painter/controls/ColorPicker\";\nimport SelectControl from \"../../components/painter/controls/SelectControl\";\n\nconst DividerSettings = () => {\n  const [size, setSize] = useWidgetSettings(\"size\", 2);\n  const [color, setColor] = useWidgetSettings(\"color\", \"#000000\");\n  const [breakAfter, setBreakAfter] = useWidgetSettings(\"breakAfter\", \"auto\");\n\n  return (\n    <Form>\n      <RangeControl\n        name=\"Толщина разделителя\"\n        value={size}\n        onChange={setSize}\n        options={{ min: 1, max: 10, step: 1, appendix: \"px\" }}\n      />\n      <ColorPicker name=\"Цвет разделителя\" value={color} onChange={setColor} />\n      <SelectControl\n        name=\"Разрыв страницы при печати\"\n        value={breakAfter}\n        onChange={setBreakAfter}\n        list={[\n          { name: \"Автоматически\", value: \"auto\" },\n          { name: \"Разорвать страницу\", value: \"page\" },\n          { name: \"Не разрывать страницу\", value: \"avoid\" },\n        ]}\n      />\n    </Form>\n  );\n};\n\nexport default DividerSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}