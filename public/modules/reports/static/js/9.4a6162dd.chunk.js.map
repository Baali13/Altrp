{"version":3,"sources":["widgets/Table/sourceTypes.js","widgets/Table/api.js","widgets/Table/custom.js","widgets/Table/render.js","widgets/Table/settings.js","hooks/useWidgetSettings.js","components/painter/controls/InputControl.js","components/painter/controls/ToggleControl.js"],"names":["sourceTypes","API","CUSTOM","RENDER","sourceTypesList","name","value","ApiTableSettings","useWidgetSettings","api","setApi","onChange","CustomTableSettings","columns","setColumns","rows","setRows","useState","columnName","setColumnName","addColumn","useCallback","addRow","e","preventDefault","formData","FormData","target","newRow","forEach","key","reset","removeColumn","filter","_","index","Group","Label","placeholder","onKeyPress","Append","variant","onClick","onSubmit","className","map","item","size","type","RenderTableSettings","variable","setVariable","handleChange","row","mutate","set","length","TableSettings","dataFrom","setDataFrom","striped","setStriped","bordered","setBordered","borderless","setBorderless","hover","setHover","setVariant","setSize","list","showSettings","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","settings","get","params","newSettings","changeWidget","InputControl","options","Control","ToggleControl","Check","Input"],"mappings":"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","file":"static/js/9.4a6162dd.chunk.js","sourcesContent":["export const sourceTypes = {\n  API: \"api\",\n  CUSTOM: \"custom\",\n  RENDER: \"rendering\",\n};\n\nexport const sourceTypesList = [\n  { name: \"API\", value: sourceTypes.API },\n  { name: \"В ручную\", value: sourceTypes.CUSTOM },\n  { name: \"Для рендеринга\", value: sourceTypes.RENDER },\n];\n","import React from \"react\";\nimport InputControl from \"components/painter/controls/InputControl\";\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\n\nconst ApiTableSettings = () => {\n  const [api, setApi] = useWidgetSettings(\n    \"api\",\n    \"https://regagro.herokuapp.com/animals\"\n  );\n  return <InputControl name=\"URL-адрес данных\" value={api} onChange={setApi} />;\n};\n\nexport default ApiTableSettings;\n","import React, { useState, useCallback } from \"react\";\nimport { Form, FormControl, Button, InputGroup } from \"react-bootstrap\";\n\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\n\nconst CustomTableSettings = () => {\n  // Список колонок\n  const [columns, setColumns] = useWidgetSettings(\"columns\", []);\n  const [rows, setRows] = useWidgetSettings(\"rows\", []);\n\n  // Временное название новой колонки\n  const [columnName, setColumnName] = useState(\"\");\n\n  // Добавляем новую колонку\n  const addColumn = useCallback(() => {\n    setColumns([...columns, columnName]);\n    setColumnName(\"\");\n  }, [columnName, columns, setColumns]);\n\n  // Добавляем новую запись\n  const addRow = useCallback(\n    (e) => {\n      e.preventDefault();\n      const formData = new FormData(e.target);\n      let newRow = {};\n      formData.forEach((value, key) => {\n        newRow[key] = value;\n      });\n      setRows([...rows, newRow]);\n      e.target.reset();\n    },\n    [rows, setRows]\n  );\n\n  // Удаляем колонку\n  const removeColumn = useCallback(\n    (key) => {\n      setColumns(columns.filter((_, index) => index !== key));\n    },\n    [columns, setColumns]\n  );\n\n  return (\n    <>\n      <Form.Group>\n        <Form.Label>Колонки</Form.Label>\n        <InputGroup>\n          <FormControl\n            placeholder=\"Имя колонки\"\n            value={columnName}\n            onKeyPress={(e) => e.key === \"Enter\" && addColumn()}\n            onChange={(e) => setColumnName(e.target.value)}\n          />\n          <InputGroup.Append>\n            <Button variant=\"primary\" onClick={addColumn}>\n              +\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form.Group>\n      <Form onSubmit={addRow} className=\"mb-3\">\n        {columns.map((item, key) => (\n          <Form.Group key={key}>\n            <Form.Label>{item}</Form.Label>\n            <InputGroup>\n              <FormControl name={item} />\n              <InputGroup.Append>\n                <Button variant=\"danger\" onClick={() => removeColumn(key)}>\n                  -\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form.Group>\n        ))}\n        <Button size=\"sm\" variant=\"success\" type=\"submit\">\n          Добавить запись\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default CustomTableSettings;\n","import React, { useCallback } from \"react\";\nimport InputControl from \"components/painter/controls/InputControl\";\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\nimport mutate from \"dot-prop-immutable\";\n\nconst RenderTableSettings = () => {\n  const [columns] = useWidgetSettings(\"columns\", []);\n  const [rows, setRows] = useWidgetSettings(\"rows\", []);\n  const [variable, setVariable] = useWidgetSettings(\"variable\", \"\");\n\n  const handleChange = useCallback(\n    (name, value) => {\n      const row = mutate.set(rows, `0`, { ...rows[0], [name]: value });\n      setRows(row);\n    },\n    [rows, setRows]\n  );\n\n  return (\n    <>\n      <InputControl\n        name=\"Переменная цикла\"\n        value={variable}\n        onChange={setVariable}\n      />\n      {columns.map((name, key) => (\n        <InputControl\n          key={key}\n          name={name}\n          value={rows.length > 0 ? rows[0][name] : \"\"}\n          onChange={(value) => handleChange(name, value)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default RenderTableSettings;\n","import React from \"react\";\n\nimport SelectControl from \"components/painter/controls/SelectControl\";\nimport ToggleControl from \"components/painter/controls/ToggleControl\";\n\nimport ApiTableSettings from \"./api\";\nimport CustomTableSettings from \"./custom\";\nimport RenderTableSettings from \"./render\";\n\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\n\nimport { sourceTypes, sourceTypesList } from \"./sourceTypes\";\n\nimport \"./table.scss\";\n\nconst TableSettings = () => {\n  const [dataFrom, setDataFrom] = useWidgetSettings(\"dataFrom\", sourceTypes.API);\n\n  const [striped, setStriped] = useWidgetSettings(\"striped\", false);\n  const [bordered, setBordered] = useWidgetSettings(\"bordered\", false);\n  const [borderless, setBorderless] = useWidgetSettings(\"borderless\", false);\n  const [hover, setHover] = useWidgetSettings(\"hover\", false);\n  const [variant, setVariant] = useWidgetSettings(\"variant\", \"\");\n  const [size, setSize] = useWidgetSettings(\"size\", \"\");\n\n  const showSettings = () => {\n    switch (dataFrom) {\n      case sourceTypes.API:\n        return <ApiTableSettings />;\n      case sourceTypes.CUSTOM:\n        return <CustomTableSettings />;\n      case sourceTypes.RENDER:\n        return <RenderTableSettings />;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <SelectControl\n        name=\"Источник данных\"\n        value={dataFrom}\n        onChange={setDataFrom}\n        list={sourceTypesList}\n      />\n      {showSettings()}\n      <SelectControl\n        name=\"Тема таблицы\"\n        value={variant}\n        onChange={setVariant}\n        list={[\n          { name: \"Светлая\", value: \"\" },\n          { name: \"Темная\", value: \"dark\" },\n        ]}\n      />\n      <SelectControl\n        name=\"Размер таблицы\"\n        value={size}\n        onChange={setSize}\n        list={[\n          { name: \"Обычный\", value: \"\" },\n          { name: \"Уменьшенный\", value: \"sm\" },\n        ]}\n      />\n      <ToggleControl name=\"Выделить все нечетные строки\" value={striped} onChange={setStriped} />\n      <ToggleControl name=\"Выделять строку при наведении\" value={hover} onChange={setHover} />\n      <ToggleControl name=\"Добавить вертикальные границы\" value={bordered} onChange={setBordered} />\n      <ToggleControl name=\"Убрать все границы\" value={borderless} onChange={setBorderless} />\n    </>\n  );\n};\n\nexport default TableSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst InputControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Label>{name}</Form.Label>\n      <Form.Control size=\"sm\" {...options} value={value} onChange={handleChange} />\n    </Form.Group>\n  );\n};\n\nexport default InputControl;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst ToggleControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(!value);\n    },\n    [onChange, value]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Check {...options}>\n        <Form.Check.Label>\n          <Form.Check.Input type=\"checkbox\" value={value} onChange={handleChange} /> {name}\n        </Form.Check.Label>\n      </Form.Check>\n    </Form.Group>\n  );\n};\n\nexport default ToggleControl;\n"],"sourceRoot":""}