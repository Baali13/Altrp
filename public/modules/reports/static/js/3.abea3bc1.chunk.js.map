{"version":3,"sources":["hooks/useWidgetSettings.js","components/painter/controls/WysiwygInlineControl.js","widgets/Text/index.js"],"names":["useWidgetSettings","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget","WysiwygInlineControl","value","onChange","useState","text","setText","editable","setEditable","draggable","onDoubleClick","onDragStart","e","stopPropagation","preventDefault","onEditorChange","content","onBlur","inline","disabled","init","menubar","contextmenu","plugins","toolbar","table_toolbar","Text","props"],"mappings":"kHAAA,6CA4CeA,IAvCW,SAACC,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH,Q,oFCWbI,G,+DAlCc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAC5BC,mBAASF,GADmB,mBAC7CG,EAD6C,KACvCC,EADuC,OAEpBF,oBAAS,GAFW,mBAE7CG,EAF6C,KAEnCC,EAFmC,KAIpD,OACE,yBACEC,WAAS,EACTC,cAAe,kBAAMF,GAAY,IACjCG,YAAa,SAACC,GACRL,IACFK,EAAEC,kBACFD,EAAEE,oBAIN,kBAAC,IAAD,CACEZ,MAAOG,EACPU,eAAgB,SAACC,GAAD,OAAaV,EAAQU,IACrCC,OAAQ,kBAAMd,EAASE,IACvBa,QAAQ,EACRC,UAAWZ,EACXa,KAAM,CACJC,SAAS,EACTC,aAAa,EACbC,QAAS,CAAC,sCACVC,QAAQ,8JAERC,cAAe,SC/BVC,UANF,SAACC,GAAW,IAAD,EACFhD,YAAkB,QAA7B2B,EADa,oBAGtB,OAAO,kBAAC,EAAD,CAAsBJ,MAAOyB,EAAMtB,KAAMF,SAAU,SAACE,GAAD,OAAUC,EAAQD","file":"static/js/3.abea3bc1.chunk.js","sourcesContent":["import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React, { useState } from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\";\n\nimport \"tinymce/tinymce.min.js\";\nimport \"tinymce/icons/default\";\nimport \"tinymce/themes/silver\";\nimport \"tinymce/plugins/insertdatetime\";\nimport \"tinymce/plugins/table\";\nimport \"tinymce/plugins/autolink\";\nimport \"tinymce/plugins/code\";\n\nimport \"tinymce/skins/ui/oxide/skin.min.css\";\nimport \"tinymce/skins/ui/oxide/content.inline.min.css\";\n\nconst WysiwygInlineControl = ({ value, onChange }) => {\n  const [text, setText] = useState(value);\n  const [editable, setEditable] = useState(false);\n\n  return (\n    <div\n      draggable\n      onDoubleClick={() => setEditable(true)}\n      onDragStart={(e) => {\n        if (editable) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }}\n    >\n      <Editor\n        value={text}\n        onEditorChange={(content) => setText(content)}\n        onBlur={() => onChange(text)}\n        inline={true}\n        disabled={!editable}\n        init={{\n          menubar: false,\n          contextmenu: false,\n          plugins: [\"autolink insertdatetime table code\"],\n          toolbar: `styleselect table insertdatetime | bold italic underline | align | forecolor | bullist numlist | outdent indent |\n           undo redo | removeformat code`,\n          table_toolbar: \"\",\n        }}\n      />\n    </div>\n  );\n};\n\nexport default WysiwygInlineControl;\n","import React from \"react\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport WysiwygInlineControl from \"../../components/painter/controls/WysiwygInlineControl\";\n\nconst Text = (props) => {\n  const [, setText] = useWidgetSettings(\"text\");\n\n  return <WysiwygInlineControl value={props.text} onChange={(text) => setText(text)} />;\n};\n\nexport default Text;\n"],"sourceRoot":""}