{"version":3,"sources":["../node_modules/react-bootstrap/esm/InputGroup.js","widgets/Table/custom.js","hooks/useWidgetSettings.js"],"names":["InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","Component","InputGroup","React","forwardRef","_ref","ref","bsPrefix","size","className","_ref$as","as","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","createElement","_extends","classNames","displayName","InputGroupWithExtras","Text","Radio","type","Checkbox","Append","Prepend","CustomTableSettings","useWidgetSettings","columns","setColumns","rows","setRows","useState","columnName","setColumnName","addColumn","useCallback","addRow","e","preventDefault","formData","FormData","target","newRow","forEach","value","key","reset","removeColumn","filter","_","index","Form","Group","Label","FormControl","placeholder","onKeyPress","onChange","Button","variant","onClick","onSubmit","map","item","name","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","settings","mutate","get","params","newSettings","set","changeWidget"],"mappings":"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","file":"static/js/17.5a02d160.chunk.js","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nInputGroup.displayName = 'InputGroup';\n\nvar InputGroupWithExtras = _extends({}, InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox,\n  Append: InputGroupAppend,\n  Prepend: InputGroupPrepend\n});\n\nexport default InputGroupWithExtras;","import React, { useState, useCallback } from \"react\";\nimport { Form, FormControl, Button, InputGroup } from \"react-bootstrap\";\n\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\n\nconst CustomTableSettings = () => {\n  // Список колонок\n  const [columns, setColumns] = useWidgetSettings(\"columns\", []);\n  const [rows, setRows] = useWidgetSettings(\"rows\", []);\n\n  // Временное название новой колонки\n  const [columnName, setColumnName] = useState(\"\");\n\n  // Добавляем новую колонку\n  const addColumn = useCallback(() => {\n    setColumns([...columns, columnName]);\n    setColumnName(\"\");\n  }, [columnName, columns, setColumns]);\n\n  // Добавляем новую запись\n  const addRow = useCallback(\n    (e) => {\n      e.preventDefault();\n      const formData = new FormData(e.target);\n      let newRow = {};\n      formData.forEach((value, key) => {\n        newRow[key] = value;\n      });\n      setRows([...rows, newRow]);\n      e.target.reset();\n    },\n    [rows, setRows]\n  );\n\n  // Удаляем колонку\n  const removeColumn = useCallback(\n    (key) => {\n      setColumns(columns.filter((_, index) => index !== key));\n    },\n    [columns, setColumns]\n  );\n\n  return (\n    <>\n      <Form.Group>\n        <Form.Label>Колонки</Form.Label>\n        <InputGroup>\n          <FormControl\n            placeholder=\"Имя колонки\"\n            value={columnName}\n            onKeyPress={(e) => e.key === \"Enter\" && addColumn()}\n            onChange={(e) => setColumnName(e.target.value)}\n          />\n          <InputGroup.Append>\n            <Button variant=\"primary\" onClick={addColumn}>\n              +\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form.Group>\n      <Form onSubmit={addRow} className=\"mb-3\">\n        {columns.map((item, key) => (\n          <Form.Group key={key}>\n            <Form.Label>{item}</Form.Label>\n            <InputGroup>\n              <FormControl name={item} />\n              <InputGroup.Append>\n                <Button variant=\"danger\" onClick={() => removeColumn(key)}>\n                  -\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form.Group>\n        ))}\n        <Button size=\"sm\" variant=\"success\" type=\"submit\">\n          Добавить запись\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default CustomTableSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}