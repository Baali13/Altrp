{"version":3,"sources":["widgets/Table/StyleController.js","components/painter/controls/ToggleControl.js"],"names":["StyleController","useWidgetSettings","striped","setStriped","bordered","setBordered","borderless","setBorderless","hover","setHover","variant","setVariant","size","setSize","name","value","onChange","list","ToggleControl","options","handleChange","useCallback","e","Group","Check","Label","Input","type"],"mappings":"gLA0CeA,UApCS,WAAO,IAAD,EACEC,YAAkB,WAAW,GAD/B,mBACrBC,EADqB,KACZC,EADY,OAEIF,YAAkB,YAAY,GAFlC,mBAErBG,EAFqB,KAEXC,EAFW,OAGQJ,YAAkB,cAAc,GAHxC,mBAGrBK,EAHqB,KAGTC,EAHS,OAIFN,YAAkB,SAAS,GAJzB,mBAIrBO,EAJqB,KAIdC,EAJc,OAKER,YAAkB,UAAW,IAL/B,mBAKrBS,EALqB,KAKZC,EALY,OAMJV,YAAkB,OAAQ,IANtB,mBAMrBW,EANqB,KAMfC,EANe,KAQ5B,OACE,oCACE,kBAAC,IAAD,CACEC,KAAK,sEACLC,MAAOL,EACPM,SAAUL,EACVM,KAAM,CACJ,CAAEH,KAAM,6CAAWC,MAAO,IAC1B,CAAED,KAAM,uCAAUC,MAAO,WAG7B,kBAAC,IAAD,CACED,KAAK,kFACLC,MAAOH,EACPI,SAAUH,EACVI,KAAM,CACJ,CAAEH,KAAM,6CAAWC,MAAO,IAC1B,CAAED,KAAM,qEAAeC,MAAO,SAGlC,kBAAC,IAAD,CAAeD,KAAK,4JAA+BC,MAAOb,EAASc,SAAUb,IAC7E,kBAAC,IAAD,CAAeW,KAAK,kKAAgCC,MAAOP,EAAOQ,SAAUP,IAC5E,kBAAC,IAAD,CAAeK,KAAK,uKAAgCC,MAAOX,EAAUY,SAAUX,IAC/E,kBAAC,IAAD,CAAeS,KAAK,qGAAqBC,MAAOT,EAAYU,SAAUT,O,iCCrC5E,4BAsBeW,IAnBO,SAAC,GAA6C,IAA3CJ,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAA6B,IAAnBG,eAAmB,MAAT,GAAS,EAC3DC,EAAeC,uBACnB,SAACC,GACCN,GAAUD,KAEZ,CAACC,EAAUD,IAGb,OACE,kBAAC,IAAKQ,MAAN,KACE,kBAAC,IAAKC,MAAUL,EACd,kBAAC,IAAKK,MAAMC,MAAZ,KACE,kBAAC,IAAKD,MAAME,MAAZ,CAAkBC,KAAK,WAAWZ,MAAOA,EAAOC,SAAUI,IAD5D,IAC8EN","file":"static/js/29.61de7df2.chunk.js","sourcesContent":["import React from \"react\";\nimport SelectControl from \"components/painter/controls/SelectControl\";\nimport ToggleControl from \"components/painter/controls/ToggleControl\";\n\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\n\nconst StyleController = () => {\n  const [striped, setStriped] = useWidgetSettings(\"striped\", false);\n  const [bordered, setBordered] = useWidgetSettings(\"bordered\", false);\n  const [borderless, setBorderless] = useWidgetSettings(\"borderless\", false);\n  const [hover, setHover] = useWidgetSettings(\"hover\", false);\n  const [variant, setVariant] = useWidgetSettings(\"variant\", \"\");\n  const [size, setSize] = useWidgetSettings(\"size\", \"\");\n\n  return (\n    <>\n      <SelectControl\n        name=\"Тема таблицы\"\n        value={variant}\n        onChange={setVariant}\n        list={[\n          { name: \"Светлая\", value: \"\" },\n          { name: \"Темная\", value: \"dark\" },\n        ]}\n      />\n      <SelectControl\n        name=\"Размер таблицы\"\n        value={size}\n        onChange={setSize}\n        list={[\n          { name: \"Обычный\", value: \"\" },\n          { name: \"Уменьшенный\", value: \"sm\" },\n        ]}\n      />\n      <ToggleControl name=\"Выделить все нечетные строки\" value={striped} onChange={setStriped} />\n      <ToggleControl name=\"Выделять строку при наведении\" value={hover} onChange={setHover} />\n      <ToggleControl name=\"Добавить вертикальные границы\" value={bordered} onChange={setBordered} />\n      <ToggleControl name=\"Убрать все границы\" value={borderless} onChange={setBorderless} />\n    </>\n  );\n};\n\nexport default StyleController;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst ToggleControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(!value);\n    },\n    [onChange, value]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Check {...options}>\n        <Form.Check.Label>\n          <Form.Check.Input type=\"checkbox\" value={value} onChange={handleChange} /> {name}\n        </Form.Check.Label>\n      </Form.Check>\n    </Form.Group>\n  );\n};\n\nexport default ToggleControl;\n"],"sourceRoot":""}