{"version":3,"sources":["widgets/Link/settings.js","hooks/useWidgetSettings.js","components/painter/controls/InputControl.js","components/painter/controls/ToggleControl.js"],"names":["LinkSettings","useWidgetSettings","url","setUrl","target","setTarget","text","setText","isButton","setIsButton","name","value","onChange","list","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget","InputControl","options","handleChange","useCallback","e","Group","Label","Control","size","ToggleControl","Check","Input","type"],"mappings":"iMA4BeA,UArBM,WAAO,IAAD,EACHC,YAAkB,MAAO,KADtB,mBAClBC,EADkB,KACbC,EADa,OAEGF,YAAkB,SAAU,SAF/B,mBAElBG,EAFkB,KAEVC,EAFU,OAGDJ,YAAkB,OAAQ,wCAHzB,mBAGlBK,EAHkB,KAGZC,EAHY,OAION,YAAkB,YAAY,GAJrC,mBAIlBO,EAJkB,KAIRC,EAJQ,KAMzB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcC,KAAK,sEAAeC,MAAOL,EAAMM,SAAUL,IACzD,kBAAC,IAAD,CAAcG,KAAK,MAAMC,MAAOT,EAAKU,SAAUT,IAC/C,kBAAC,IAAD,CACEU,KAAM,CAAC,QAAS,UAChBH,KAAK,+DACLC,MAAOP,EACPQ,SAAUP,IAEZ,kBAAC,IAAD,CAAeK,KAAK,uCAASC,MAAOH,EAAUI,SAAUH,O,iCCvB9D,4CA4CeR,IAvCW,SAACa,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH,Q,iCCrC5B,4BAmBeI,IAhBM,SAAC,GAA6C,IAA3CzB,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAA6B,IAAnBwB,eAAmB,MAAT,GAAS,EAC1DC,EAAeC,uBACnB,SAACC,GACC3B,EAAS2B,EAAEnC,OAAOO,SAEpB,CAACC,IAGH,OACE,kBAAC,IAAK4B,MAAN,KACE,kBAAC,IAAKC,MAAN,KAAa/B,GACb,kBAAC,IAAKgC,QAAN,eAAcC,KAAK,MAASP,EAA5B,CAAqCzB,MAAOA,EAAOC,SAAUyB,Q,iCCdnE,4BAsBeO,IAnBO,SAAC,GAA6C,IAA3ClC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAA6B,IAAnBwB,eAAmB,MAAT,GAAS,EAC3DC,EAAeC,uBACnB,SAACC,GACC3B,GAAUD,KAEZ,CAACC,EAAUD,IAGb,OACE,kBAAC,IAAK6B,MAAN,KACE,kBAAC,IAAKK,MAAUT,EACd,kBAAC,IAAKS,MAAMJ,MAAZ,KACE,kBAAC,IAAKI,MAAMC,MAAZ,CAAkBC,KAAK,WAAWpC,MAAOA,EAAOC,SAAUyB,IAD5D,IAC8E3B","file":"static/js/10.7646abb4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport InputControl from \"../../components/painter/controls/InputControl\";\nimport SelectControl from \"../../components/painter/controls/SelectControl\";\nimport ToggleControl from \"../../components/painter/controls/ToggleControl\";\n\nconst LinkSettings = () => {\n  const [url, setUrl] = useWidgetSettings(\"url\", \"#\");\n  const [target, setTarget] = useWidgetSettings(\"target\", \"_self\");\n  const [text, setText] = useWidgetSettings(\"text\", \"Ссылка\");\n  const [isButton, setIsButton] = useWidgetSettings(\"isButton\", false);\n\n  return (\n    <Form>\n      <InputControl name=\"Текст ссылки\" value={text} onChange={setText} />\n      <InputControl name=\"URL\" value={url} onChange={setUrl} />\n      <SelectControl\n        list={[\"_self\", \"_blank\"]}\n        name=\"Назначение\"\n        value={target}\n        onChange={setTarget}\n      />\n      <ToggleControl name=\"Кнопка\" value={isButton} onChange={setIsButton} />\n    </Form>\n  );\n};\n\nexport default LinkSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst InputControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Label>{name}</Form.Label>\n      <Form.Control size=\"sm\" {...options} value={value} onChange={handleChange} />\n    </Form.Group>\n  );\n};\n\nexport default InputControl;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst ToggleControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(!value);\n    },\n    [onChange, value]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Check {...options}>\n        <Form.Check.Label>\n          <Form.Check.Input type=\"checkbox\" value={value} onChange={handleChange} /> {name}\n        </Form.Check.Label>\n      </Form.Check>\n    </Form.Group>\n  );\n};\n\nexport default ToggleControl;\n"],"sourceRoot":""}