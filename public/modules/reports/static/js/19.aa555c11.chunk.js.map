{"version":3,"sources":["components/painter/controls/WysiwygControl.js","components/painter/controls/ModelControl.js","widgets/DText/settings.js","hooks/useWidgetSettings.js"],"names":["WysiwygControl","value","onChange","disabled","onEditorChange","init","height","menubar","plugins","toolbar","ModelControl","useState","models","setModels","items","setItems","model","selectedModel","setSelectedModel","isLoading","setIsLoading","getModels","useCallback","a","axios","req","status","data","getItems","showTableData","item","label","key","hasOwnProperty","useEffect","Form","Group","Label","options","map","name","title","defaultValue","JSON","stringify","DTextSettings","useWidgetSettings","text","setText","setModel","property","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget"],"mappings":"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","file":"static/js/19.aa555c11.chunk.js","sourcesContent":["import React from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport \"tinymce/tinymce.min.js\";\nimport \"tinymce/icons/default\";\nimport \"tinymce/themes/silver\";\nimport \"tinymce/plugins/fullpage\";\nimport \"tinymce/plugins/insertdatetime\";\nimport \"tinymce/plugins/table\";\nimport \"tinymce/plugins/visualblocks\";\nimport \"tinymce/plugins/autolink\";\n\nimport \"tinymce/skins/ui/oxide/skin.min.css\";\n\nconst WysiwygControl = ({ value, onChange, disabled = false }) => {\n  return (\n    <Editor\n      value={value}\n      onEditorChange={onChange}\n      disabled={disabled}\n      init={{\n        height: 400,\n        menubar: true,\n        plugins: [\"autolink\", \"visualblocks fullpage\", \"insertdatetime table\"],\n        toolbar: `undo redo | formatselect | bold italic backcolor | \n    alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | \n    removeformat`,\n      }}\n    />\n  );\n};\n\nexport default WysiwygControl;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\n\nconst ModelControl = ({ value, onChange }) => {\n  const [models, setModels] = useState([]);\n  const [items, setItems] = useState([]);\n  const [selectedModel, setSelectedModel] = useState(value.model);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /*\n    Получаем список моделей\n  */\n  const getModels = useCallback(async () => {\n    const req = await axios(\"/admin/ajax/tables\");\n    if (req.status === 200) {\n      setModels(req.data);\n    }\n  }, [setModels]);\n\n  /* \n    Получаем список записей выбранной модели \n  */\n  const getItems = useCallback(async (model) => {\n    setSelectedModel(model);\n    setIsLoading(true);\n    setItems([]);\n    const req = await axios(`/admin/ajax/tables/${model.value}/items`);\n    if (req.status === 200) {\n      setItems(req.data);\n      setIsLoading(false);\n    }\n  }, []);\n\n  const handleSelected = (item) => {\n    onChange({ model: selectedModel, item });\n  };\n\n  const showTableData = (item) => {\n    let label = ``;\n    for (const key in item) {\n      if (item.hasOwnProperty(key)) {\n        label += item[key] + \", \";\n      }\n    }\n    return label;\n  };\n\n  useEffect(() => {\n    getModels();\n  }, [getModels]);\n\n  return (\n    <>\n      <Form.Group>\n        <Form.Label>Выберите модель</Form.Label>\n        <Select\n          options={models.map((item) => {\n            return {\n              value: item.name,\n              label: item.title,\n            };\n          })}\n          defaultValue={selectedModel}\n          onChange={getItems}\n        />\n      </Form.Group>\n\n      {setSelectedModel && (\n        <Form.Group>\n          <Form.Label>Выберите запись</Form.Label>\n          <Select\n            isLoading={isLoading}\n            defaultValue={value.item}\n            options={items.map((item) => {\n              return {\n                value: item,\n                label: showTableData(item),\n              };\n            })}\n            onChange={handleSelected}\n          />\n        </Form.Group>\n      )}\n      {value.item?.value && <pre>{JSON.stringify(value, null, 2)}</pre>}\n    </>\n  );\n};\n\nexport default ModelControl;\n","import React from \"react\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport WisywigControl from \"../../components/painter/controls/WysiwygControl\";\nimport ModelControl from \"../../components/painter/controls/ModelControl\";\n\nconst DTextSettings = () => {\n  const [text, setText] = useWidgetSettings(\"text\", \"\");\n  const [model, setModel] = useWidgetSettings(\"model\", {});\n  return (\n    <>\n      <WisywigControl value={text} onChange={setText} />\n      <ModelControl value={model} onChange={setModel} />\n    </>\n  );\n};\n\nexport default DTextSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}