{"version":3,"sources":["widgets/Table/render.js","hooks/useWidgetSettings.js","components/painter/controls/InputControl.js"],"names":["RenderTableSettings","useWidgetSettings","columns","rows","setRows","variable","setVariable","handleChange","useCallback","name","value","row","mutate","set","onChange","map","key","length","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","settings","get","params","newSettings","changeWidget","InputControl","options","e","target","Group","Label","Control","size"],"mappings":"wMAqCeA,UAhCa,WAAO,IAAD,EACdC,YAAkB,UAAW,IAAxCC,EADyB,sBAERD,YAAkB,OAAQ,IAFlB,mBAEzBE,EAFyB,KAEnBC,EAFmB,OAGAH,YAAkB,WAAY,IAH9B,mBAGzBI,EAHyB,KAGfC,EAHe,KAK1BC,EAAeC,uBACnB,SAACC,EAAMC,GACL,IAAMC,EAAMC,IAAOC,IAAIV,EAAX,+BAA2BA,EAAK,IAAhC,kBAAqCM,EAAOC,KACxDN,EAAQO,KAEV,CAACR,EAAMC,IAGT,OACE,oCACE,kBAAC,IAAD,CACEK,KAAK,8FACLC,MAAOL,EACPS,SAAUR,IAEXJ,EAAQa,KAAI,SAACN,EAAMO,GAAP,OACX,kBAAC,IAAD,CACEA,IAAKA,EACLP,KAAMA,EACNC,MAAOP,EAAKc,OAAS,EAAId,EAAK,GAAGM,GAAQ,GACzCK,SAAU,SAACJ,GAAD,OAAWH,EAAaE,EAAMC,Y,iCC9BlD,6CA4CeT,IAvCW,SAACiB,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcxB,QAAQyB,GAAaC,GAEvDG,EAAW,GAGXD,GAAUZ,EAEZa,EAAWnB,IAAOoB,IAAIF,EAAOG,OAAQf,IAAaC,EACzCW,IACTC,EAAWD,EAAOG,QAapB,MAAO,CAACF,EATY,SAACE,GACnB,GAAIf,EAAU,CACZ,IAAMgB,EAActB,IAAOC,IAAIiB,EAAOG,OAAQf,EAAUe,GACxDb,EAASe,YAAaD,SAEtBd,EAASe,YAAaF,Q,iCCrC5B,4BAmBeG,IAhBM,SAAC,GAA6C,IAA3C3B,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOI,EAA6B,EAA7BA,SAA6B,IAAnBuB,eAAmB,MAAT,GAAS,EAC1D9B,EAAeC,uBACnB,SAAC8B,GACCxB,EAASwB,EAAEC,OAAO7B,SAEpB,CAACI,IAGH,OACE,kBAAC,IAAK0B,MAAN,KACE,kBAAC,IAAKC,MAAN,KAAahC,GACb,kBAAC,IAAKiC,QAAN,eAAcC,KAAK,MAASN,EAA5B,CAAqC3B,MAAOA,EAAOI,SAAUP","file":"static/js/13.74afb086.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport InputControl from \"components/painter/controls/InputControl\";\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\nimport mutate from \"dot-prop-immutable\";\n\nconst RenderTableSettings = () => {\n  const [columns] = useWidgetSettings(\"columns\", []);\n  const [rows, setRows] = useWidgetSettings(\"rows\", []);\n  const [variable, setVariable] = useWidgetSettings(\"variable\", \"\");\n\n  const handleChange = useCallback(\n    (name, value) => {\n      const row = mutate.set(rows, `0`, { ...rows[0], [name]: value });\n      setRows(row);\n    },\n    [rows, setRows]\n  );\n\n  return (\n    <>\n      <InputControl\n        name=\"Переменная цикла\"\n        value={variable}\n        onChange={setVariable}\n      />\n      {columns.map((name, key) => (\n        <InputControl\n          key={key}\n          name={name}\n          value={rows.length > 0 ? rows[0][name] : \"\"}\n          onChange={(value) => handleChange(name, value)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default RenderTableSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst InputControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Label>{name}</Form.Label>\n      <Form.Control size=\"sm\" {...options} value={value} onChange={handleChange} />\n    </Form.Group>\n  );\n};\n\nexport default InputControl;\n"],"sourceRoot":""}