{"version":3,"sources":["widgets/Image/settings.js","hooks/useWidgetSettings.js","components/painter/controls/InputControl.js"],"names":["ImageSettings","useWidgetSettings","AddImagePNG","url","setUrl","alt","setAlt","width","setWidth","name","value","onChange","options","min","max","step","appendix","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget","InputControl","handleChange","useCallback","e","target","Group","Label","Control","size"],"mappings":"kNAgCeA,UAxBO,WAAO,IAAD,EACJC,YAAkB,MAAOC,KADrB,mBACnBC,EADmB,KACdC,EADc,OAEJH,YAAkB,MAAO,IAFrB,mBAEnBI,EAFmB,KAEdC,EAFc,OAGAL,YAAkB,QAAS,KAH3B,mBAGnBM,EAHmB,KAGZC,EAHY,KAK1B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcC,KAAK,qEAAcC,MAAOP,EAAKQ,SAAUP,IACvD,kBAAC,IAAD,CAAcK,KAAK,uHAAwBC,MAAOL,EAAKM,SAAUL,IACjE,kBAAC,IAAD,CACEG,KAAK,0GACLC,MAAOH,EACPI,SAAUH,EACVI,QAAS,CACPC,IAAK,GACLC,IAAK,IACLC,KAAM,EACNC,SAAU,W,iCCzBpB,4CA4Cef,IAvCW,SAACgB,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH,Q,iCCrC5B,4BAmBeI,IAhBM,SAAC,GAA6C,IAA3C7B,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAA6B,IAAnBC,eAAmB,MAAT,GAAS,EAC1D2B,EAAeC,uBACnB,SAACC,GACC9B,EAAS8B,EAAEC,OAAOhC,SAEpB,CAACC,IAGH,OACE,kBAAC,IAAKgC,MAAN,KACE,kBAAC,IAAKC,MAAN,KAAanC,GACb,kBAAC,IAAKoC,QAAN,eAAcC,KAAK,MAASlC,EAA5B,CAAqCF,MAAOA,EAAOC,SAAU4B","file":"static/js/15.942ae548.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\nimport InputControl from \"../../components/painter/controls/InputControl\";\nimport RangeControl from \"../../components/painter/controls/RangeControl\";\nimport MediaControl from \"components/painter/controls/MediaControl\";\nimport AddImagePNG from \"icons/add-image.png\";\n\nconst ImageSettings = () => {\n  const [url, setUrl] = useWidgetSettings(\"src\", AddImagePNG);\n  const [alt, setAlt] = useWidgetSettings(\"alt\", \"\");\n  const [width, setWidth] = useWidgetSettings(\"width\", 100);\n\n  return (\n    <Form>\n      <MediaControl name=\"Изображения\" value={url} onChange={setUrl} />\n      <InputControl name=\"Подпись к изображению\" value={alt} onChange={setAlt} />\n      <RangeControl\n        name=\"Ширина изображения\"\n        value={width}\n        onChange={setWidth}\n        options={{\n          min: 10,\n          max: 2000,\n          step: 1,\n          appendix: \"px\",\n        }}\n      />\n    </Form>\n  );\n};\n\nexport default ImageSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nconst InputControl = ({ name, value, onChange, options = {} }) => {\n  const handleChange = useCallback(\n    (e) => {\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Label>{name}</Form.Label>\n      <Form.Control size=\"sm\" {...options} value={value} onChange={handleChange} />\n    </Form.Group>\n  );\n};\n\nexport default InputControl;\n"],"sourceRoot":""}