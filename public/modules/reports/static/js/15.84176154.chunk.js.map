{"version":3,"sources":["widgets/Button/settings.js","hooks/useWidgetSettings.js"],"names":["defaultParams","widgetName","props","title","ButtonSettings","useWidgetSettings","settings","setSettings","onChange","useCallback","e","target","name","value","Group","Label","Control","type","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","mutate","get","params","newSettings","set","changeWidget"],"mappings":"6NAIaA,EAAgB,CAC3BC,WAAY,QACZC,MAAO,CACLC,MAAO,yCAwBIC,UApBQ,WAAO,IAAD,EACOC,cAA1BC,EADmB,EACnBA,SAAUC,EADS,EACTA,YAEZC,EAAWC,uBACf,SAACC,GACCH,EAAY,2BAAKD,GAAN,kBAAiBI,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,WAEvD,CAACN,EAAaD,IAGhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAKQ,MAAN,KACE,kBAAC,IAAKC,MAAN,qGACA,kBAAC,IAAKC,QAAN,CAAcJ,KAAK,MAAMK,KAAK,OAAOJ,MAAOP,EAASH,MAAOK,SAAUA,Q,iCCzB9E,6CA4CeH,IAvCW,SAACa,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDtB,EAAW,GAGXwB,GAAUZ,EAEZZ,EAAW0B,IAAOC,IAAIH,EAAOI,OAAQhB,IAAaC,EACzCW,IACTxB,EAAWwB,EAAOI,QAapB,MAAO,CAAC5B,EATY,SAAC4B,GACnB,GAAIhB,EAAU,CACZ,IAAMiB,EAAcH,IAAOI,IAAIN,EAAOI,OAAQhB,EAAUgB,GACxDd,EAASiB,YAAaF,SAEtBf,EAASiB,YAAaH","file":"static/js/15.84176154.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport useWidgetSettings from \"../../hooks/useWidgetSettings\";\n\nexport const defaultParams = {\n  widgetName: \"Image\",\n  props: {\n    title: \"Кнопка\",\n  },\n};\n\nconst ButtonSettings = () => {\n  const { settings, setSettings } = useWidgetSettings();\n\n  const onChange = useCallback(\n    (e) => {\n      setSettings({ ...settings, [e.target.name]: e.target.value });\n    },\n    [setSettings, settings]\n  );\n\n  return (\n    <Form>\n      <Form.Group>\n        <Form.Label>Надпись на кнопке</Form.Label>\n        <Form.Control name=\"alt\" type=\"text\" value={settings.title} onChange={onChange} />\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default ButtonSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}