{"version":3,"sources":["hooks/useWidgetSettings.js","components/painter/widgets/Appearance.js"],"names":["useWidgetSettings","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget","Appearance","fontSize","setFontSize","color","setColor","bgColor","setBgColor","name","options","min","max","step","appendix","value","onChange"],"mappings":"mHAAA,4CA4CeA,IAvCW,SAACC,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH,Q,sGCVbI,UAnBI,WAAO,IAAD,EACStB,YAAkB,kBAAmB,GAD9C,mBAChBuB,EADgB,KACNC,EADM,OAEGxB,YAAkB,eAAgB,WAFrC,mBAEhByB,EAFgB,KAETC,EAFS,OAGO1B,YAAkB,yBAA0B,WAHnD,mBAGhB2B,EAHgB,KAGPC,EAHO,KAKvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,4EACLC,QAAS,CAAEC,IAAK,GAAKC,IAAK,EAAGC,KAAM,GAAKC,SAAU,OAClDC,MAAOZ,EACPa,SAAUZ,IAEZ,kBAAC,IAAD,CAAaK,KAAK,gEAAcM,MAAOV,EAAOW,SAAUV,IACxD,kBAAC,IAAD,CAAaG,KAAK,oDAAYM,MAAOR,EAASS,SAAUR","file":"static/js/31.ea389ee1.chunk.js","sourcesContent":["import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nimport RangeControl from \"../controls/RangeControl\";\nimport ColorPicker from \"../controls/ColorPicker\";\n\nimport useWidgetSettings from \"../../../hooks/useWidgetSettings\";\n\nconst Appearance = () => {\n  const [fontSize, setFontSize] = useWidgetSettings(\"styles.fontSize\", 1);\n  const [color, setColor] = useWidgetSettings(\"styles.color\", \"#000000\");\n  const [bgColor, setBgColor] = useWidgetSettings(\"styles.backgroundColor\", \"#ffffff\");\n\n  return (\n    <Form>\n      <RangeControl\n        name=\"Размер текста\"\n        options={{ min: 0.2, max: 5, step: 0.1, appendix: \"rem\" }}\n        value={fontSize}\n        onChange={setFontSize}\n      />\n      <ColorPicker name=\"Цвет текста\" value={color} onChange={setColor} />\n      <ColorPicker name=\"Цвет фона\" value={bgColor} onChange={setBgColor} />\n    </Form>\n  );\n};\n\nexport default Appearance;\n"],"sourceRoot":""}