{"version":3,"sources":["hooks/useWidgetSettings.js","components/painter/widgets/Alignments.js"],"names":["useWidgetSettings","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget","Alignments","textAlign","setTextAlign","float","setFloat","list","name","value","onChange"],"mappings":"mHAAA,6CA4CeA,IAvCW,SAACC,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH,Q,4FCqBbI,UArDI,WAAO,IAAD,EACWtB,YAAkB,mBAAoB,QADjD,mBAChBuB,EADgB,KACLC,EADK,OAGGxB,YAAkB,eAAgB,WAHrC,mBAGhByB,EAHgB,KAGTC,EAHS,KAKvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAM,CACJ,CACEC,KAAM,sEACNC,MAAO,QAET,CACED,KAAM,iCACNC,MAAO,QAET,CACED,KAAM,uCACNC,MAAO,UAGXD,KAAK,4GACLC,MAAOJ,EACPK,SAAUJ,IAEZ,kBAAC,IAAD,CACEC,KAAM,CACJ,CACEC,KAAM,6EACNC,MAAO,QAET,CACED,KAAM,oDACNC,MAAO,UAET,CACED,KAAM,mFACNC,MAAO,SAET,CACED,KAAM,oDACNC,MAAO,YAGXD,KAAK,6HACLC,MAAON,EACPO,SAAUN","file":"static/js/27.cfe98eee.chunk.js","sourcesContent":["import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport SelectControl from \"../controls/SelectControl\";\nimport useWidgetSettings from \"../../../hooks/useWidgetSettings\";\n\nconst Alignments = () => {\n  const [textAlign, setTextAlign] = useWidgetSettings(\"styles.textAlign\", \"left\");\n\n  const [float, setFloat] = useWidgetSettings(\"styles.float\", \"inherit\");\n\n  return (\n    <Form>\n      <SelectControl\n        list={[\n          {\n            name: \"По-умолчанию\",\n            value: \"none\",\n          },\n          {\n            name: \"Слева\",\n            value: \"left\",\n          },\n          {\n            name: \"Справа\",\n            value: \"right\",\n          },\n        ]}\n        name=\"Положение виджета (float)\"\n        value={float}\n        onChange={setFloat}\n      />\n      <SelectControl\n        list={[\n          {\n            name: \"По левому краю\",\n            value: \"left\",\n          },\n          {\n            name: \"По центру\",\n            value: \"center\",\n          },\n          {\n            name: \"По правому краю\",\n            value: \"right\",\n          },\n          {\n            name: \"По ширине\",\n            value: \"justify\",\n          },\n        ]}\n        name=\"Расположение текста (text-align)\"\n        value={textAlign}\n        onChange={setTextAlign}\n      />\n    </Form>\n  );\n};\n\nexport default Alignments;\n"],"sourceRoot":""}