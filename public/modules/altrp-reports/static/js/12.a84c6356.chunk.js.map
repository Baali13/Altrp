{"version":3,"sources":["components/painter/controls/SourceControl.js","widgets/Table/settings.js","hooks/useWidgetSettings.js"],"names":["SourceControl","name","value","onChange","options","useState","sources","setSources","getSources","useCallback","a","axios","req","status","console","log","data","useEffect","handleChange","e","target","Form","Group","Label","Control","as","size","map","s","i","key","label","TableSettings","useWidgetSettings","source","setSource","categories","cmp","loadable","Accordion","category","index","Card","Toggle","Header","eventKey","Collapse","Body","render","property","defaultValue","dispatch","useDispatch","sections","useSelector","present","selectedWidget","sectionIndex","columnIndex","rowIndex","isNumber","widget","columns","settings","mutate","get","params","newSettings","set","changeWidget"],"mappings":"wOAyCeA,EArCO,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAA6B,IAAnBC,eAAmB,MAAT,GAAS,IACnCC,mBAAS,IAD0B,mBAC1DC,EAD0D,KACjDC,EADiD,KAG3DC,EAAaC,sBAAW,sBAAC,4BAAAC,EAAA,sEACXC,IAAM,sCADK,OAEV,OADbC,EADuB,QAErBC,SACNC,QAAQC,IAAI,WAAYH,GACxBL,EAAWK,EAAII,KAAK,GAAGZ,UAJI,2CAM5B,CAACG,IAEJU,qBAAU,WACRT,MACC,CAACA,IAEJ,IAAMU,EAAeT,uBACnB,SAACU,GACChB,EAASgB,EAAEC,OAAOlB,SAEpB,CAACC,IAGH,OACE,kBAACkB,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,KAAatB,GACb,kBAACoB,EAAA,EAAKG,QAAN,iBAAkBpB,EAAlB,CAA2BqB,GAAG,SAASC,KAAK,KAAKxB,MAAOA,EAAOC,SAAUe,IACvE,4BAAQhB,MAAM,IAAd,+CACCI,EAAQqB,KAAI,SAACC,EAAGC,GAAJ,OACX,4BAAQC,IAAKD,EAAG3B,MAAO0B,EAAE1B,OACtB0B,EAAEG,a,gBCSAC,UAjCO,WAAO,IAAD,EACEC,YAAkB,SAAU,IAD9B,mBACnBC,EADmB,KACXC,EADW,KAGpBC,EAAa,CACjB,CACEnC,KAAM,6CACNoC,IAAKC,aAAS,kBAAM,kCAEtB,CACErC,KAAM,yDACNoC,IAAKC,aAAS,kBAAM,oCAIxB,OACE,oCACE,kBAAC,EAAD,CAAerC,KAAK,wFAAkBC,MAAOgC,EAAQ/B,SAAUgC,IAC/D,kBAACI,EAAA,EAAD,KACGH,EAAWT,KAAI,SAACa,EAAUC,GAAX,OACd,kBAACC,EAAA,EAAD,CAAMZ,IAAKW,GACT,kBAACF,EAAA,EAAUI,OAAX,CAAkBlB,GAAIiB,IAAKE,OAAQC,SAAUL,EAASvC,MACnDuC,EAASvC,MAEZ,kBAACsC,EAAA,EAAUO,SAAX,CAAoBD,SAAUL,EAASvC,MACrC,kBAACyC,EAAA,EAAKK,KAAN,KAAYP,EAASH,IAAIW,mB,uDCjCvC,4CA4Cef,IAvCW,SAACgB,EAAUC,GACnC,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,qBAAGD,SAAwBE,QAAQF,YAHZ,EAMJC,aAC9C,qBAAGD,SAAwBE,QAAQC,kBAD7BC,EAN4C,EAM5CA,aAAcC,EAN8B,EAM9BA,YAAaC,EANiB,EAMjBA,SAKnC,IAAKC,YAASH,GAAe,MAAO,CAAC,GAAI,cAGzC,IAAMI,EAASR,EAASI,GAAcK,QAAQJ,GAAaC,GAEvDI,EAAW,GAGXF,GAAUZ,EAEZc,EAAWC,IAAOC,IAAIJ,EAAOK,OAAQjB,IAAaC,EACzCW,IACTE,EAAWF,EAAOK,QAapB,MAAO,CAACH,EATY,SAACG,GACnB,GAAIjB,EAAU,CACZ,IAAMkB,EAAcH,IAAOI,IAAIP,EAAOK,OAAQjB,EAAUiB,GACxDf,EAASkB,YAAaF,SAEtBhB,EAASkB,YAAaH","file":"static/js/12.a84c6356.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nconst SourceControl = ({ name, value, onChange, options = {} }) => {\n  const [sources, setSources] = useState([]);\n\n  const getSources = useCallback(async () => {\n    const req = await axios(\"/admin/ajax/data_sources_for_query\");\n    if (req.status === 200) {\n      console.log(\"req :>> \", req);\n      setSources(req.data[1].options);\n    }\n  }, [setSources]);\n\n  useEffect(() => {\n    getSources();\n  }, [getSources]);\n\n  const handleChange = useCallback(\n    (e) => {\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return (\n    <Form.Group>\n      <Form.Label>{name}</Form.Label>\n      <Form.Control {...options} as=\"select\" size=\"sm\" value={value} onChange={handleChange}>\n        <option value=\"\">В ручную</option>\n        {sources.map((s, i) => (\n          <option key={i} value={s.value}>\n            {s.label}\n          </option>\n        ))}\n      </Form.Control>\n    </Form.Group>\n  );\n};\n\nexport default SourceControl;\n","import React from \"react\";\nimport { Card, Accordion } from \"react-bootstrap\";\nimport loadable from \"@loadable/component\";\n\nimport SourceControl from \"components/painter/controls/SourceControl\";\nimport useWidgetSettings from \"hooks/useWidgetSettings\";\n\nimport \"./table.scss\";\n\nconst TableSettings = () => {\n  const [source, setSource] = useWidgetSettings(\"source\", \"\");\n\n  const categories = [\n    {\n      name: \"Колонки\",\n      cmp: loadable(() => import(`./ColumnController`)),\n    },\n    {\n      name: \"Настройки\",\n      cmp: loadable(() => import(`./StyleController`)),\n    },\n  ];\n\n  return (\n    <>\n      <SourceControl name=\"Источник данных\" value={source} onChange={setSource} />\n      <Accordion>\n        {categories.map((category, index) => (\n          <Card key={index}>\n            <Accordion.Toggle as={Card.Header} eventKey={category.name}>\n              {category.name}\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey={category.name}>\n              <Card.Body>{category.cmp.render()}</Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        ))}\n      </Accordion>\n    </>\n  );\n};\n\nexport default TableSettings;\n","import mutate from \"dot-prop-immutable\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeWidget } from \"../store/sections/actions\";\nimport { isNumber } from \"../helpers/number\";\n\nconst useWidgetSettings = (property, defaultValue) => {\n  const dispatch = useDispatch();\n  // Получаем секции\n  const sections = useSelector(({ sections }) => sections.present.sections);\n\n  // Получаем позицию выбранного виджета в массиве\n  const { sectionIndex, columnIndex, rowIndex } = useSelector(\n    ({ sections }) => sections.present.selectedWidget\n  );\n\n  // Если виджет не выбран то выводим undefined\n  if (!isNumber(sectionIndex)) return [{}, () => {}];\n\n  // Получаем данные виджета\n  const widget = sections[sectionIndex].columns[columnIndex][rowIndex];\n\n  let settings = {};\n\n  // Если указано конкретное свойство, возвращаем только его\n  if (widget && property) {\n    //console.log(\"widget.params\", widget.params);\n    settings = mutate.get(widget.params, property) || defaultValue;\n  } else if (widget) {\n    settings = widget.params;\n  }\n\n  // Записываем новые настройки\n  const setSettings = (params) => {\n    if (property) {\n      const newSettings = mutate.set(widget.params, property, params);\n      dispatch(changeWidget(newSettings));\n    } else {\n      dispatch(changeWidget(params));\n    }\n  };\n\n  return [settings, setSettings];\n};\n\nexport default useWidgetSettings;\n"],"sourceRoot":""}