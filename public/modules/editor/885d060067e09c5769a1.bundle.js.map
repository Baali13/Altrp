{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/dashboard/widgets/EmptyWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/services/getWidgetData.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicBarChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicPieChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicLineChart.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicTableWidget.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicDonutChart.js","webpack:///./resources/modules/admin/src/components/dashboard/Spinner.js","webpack:///./resources/modules/admin/src/components/dashboard/widgets/DynamicAreaChart.js","webpack:///./resources/modules/admin/src/components/dashboard/WidgetDiagram.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/fields/TypeField.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/fields/LegendField.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/fields/SourceField.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/fields/colorSchemeField.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/AddWidget.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/EditWidget.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/CardWidget.js","webpack:///./resources/modules/editor/src/js/components/altrp-dashboards/AltrpDashboards.js"],"names":["EmptyWidget","text","className","queryString","obj","Object","keys","reduce","str","key","i","encodeURIComponent","join","getWidgetData","url","filter","a","params","axios","status","Spinner","style","width","height","role","DynamicBarChart","widget","useState","isLoading","setIsLoading","data","setData","getData","useCallback","source","charts","useEffect","length","entries","map","item","label","series","colorScheme","options","bar","gradient","stops","stopOpacity","legend","orientation","DynamicPieChart","explode","fontSize","fontFill","DynamicLineChart","strokeWidth","newData","Date","xAxis","type","tickSeries","format","d","firstDate","slice","shift","lastDate","pop","diff","parseInt","formatDistanceStrict","unit","locale","ru","line","sortData","order","b","hasOwnProperty","varA","toUpperCase","varB","comparison","DynamicTableWidget","sort","summary","useMemo","acc","isVertical","DynamicDonutChart","doughnut","DynamicAreaChart","color","Array","isArray","markLine","area","WidgetDiagram","BAR","PIE","DONUT","LINE","TABLE","AREA","TypeField","setWidget","allowedTypes","Form","Group","Label","Control","as","custom","value","onChange","e","target","getTypeName","LegendField","required","SourceField","sources","name","ColorSchemeField","colors","schemes","AddWidget","s","id","onAdd","setIsShow","title","useRef","onSave","current","JSON","stringify","post","req","Card","Header","Title","Body","ref","onFocus","onBlur","defaultValue","model","find","types","Footer","Button","variant","onClick","disabled","React","memo","EditWidget","onEdited","setIsEdit","CardWidget","onDeleted","isEdit","AltrpDashboards","settings","widgets","setWidgets","isShow","console","log","getWidgets","w","parse","handleRemove","handleEdit","put","sql"],"mappings":"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","file":"885d060067e09c5769a1.bundle.js","sourcesContent":["import React from \"react\";\r\n\r\nconst EmptyWidget = ({ text }) => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-container__text\">{text ? text : \"Нет данных\"}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmptyWidget;\r\n","import axios from \"axios\";\r\n\r\nexport const queryString = (obj = {}) =>\r\n  Object.keys(obj).reduce((str, key, i) => {\r\n    let delimiter, val;\r\n    delimiter = i === 0 ? \"?\" : \"&\";\r\n    key = encodeURIComponent(key);\r\n    val = encodeURIComponent(obj[key]);\r\n    return [str, delimiter, key, \"=\", val].join(\"\");\r\n  }, \"\");\r\n\r\nexport const getWidgetData = async (url, filter) => {\r\n  const params = queryString(filter);\r\n  try {\r\n    return await axios(url + params);\r\n  } catch (error) {\r\n    return { status: 500 };\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  BarChart,\r\n  BarSeries,\r\n  Bar,\r\n  Gradient,\r\n  GradientStop,\r\n  DiscreteLegend,\r\n  DiscreteLegendEntry,\r\n} from \"reaviz\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst DynamicBarChart = ({ widget, width = 300, height = 300 }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  // Формируем легенду\r\n  const entries = data.map((item, i) => {\r\n    return (\r\n      <DiscreteLegendEntry\r\n        key={i}\r\n        className=\"discrete__legend-item\"\r\n        label={`${item.key} (${item.data})`}\r\n        //color={colorScheme(item, i)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <BarChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        series={\r\n          <BarSeries\r\n            colorScheme={widget.options.colorScheme}\r\n            bar={<Bar gradient={<Gradient stops={[<GradientStop stopOpacity={1} />]} />} />}\r\n          />\r\n        }\r\n      />\r\n      {widget.options?.legend && (\r\n        <DiscreteLegend\r\n          className=\"discrete__legend\"\r\n          orientation={widget.options.legend}\r\n          entries={entries}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicBarChart;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { PieChart, PieArcSeries, PieArcLabel, DiscreteLegend, DiscreteLegendEntry } from \"reaviz\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst DynamicPieChart = ({ widget, width = 300, height = 300 }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data || []);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if ((! data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  // Формируем легенду\r\n  const entries = data.map((item, i) => {\r\n    return (\r\n      <DiscreteLegendEntry\r\n        key={i}\r\n        className=\"discrete__legend-item\"\r\n        label={`${item.key} (${item.data})`}\r\n        //color={colorScheme(item, i)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <PieChart\r\n        height={height}\r\n        width={width}\r\n        data={data || []}\r\n        series={\r\n          <PieArcSeries\r\n            explode={widget.options.explode}\r\n            colorScheme={widget.options.colorScheme}\r\n            label={<PieArcLabel fontSize={12} fontFill=\"#000000\" />}\r\n          />\r\n        }\r\n      />\r\n      {widget.options?.legend && (\r\n        <DiscreteLegend\r\n          className=\"discrete__legend\"\r\n          orientation={widget.options.legend}\r\n          entries={entries}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicPieChart;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  LineChart,\r\n  LineSeries,\r\n  Line,\r\n  LinearXAxis,\r\n  LinearXAxisTickSeries,\r\n  LinearXAxisTickLabel,\r\n} from \"reaviz\";\r\nimport format from \"date-fns/format\";\r\nimport formatDistanceStrict from \"date-fns/formatDistanceStrict\";\r\nimport ru from \"date-fns/locale/ru\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst DynamicLineChart = ({ widget, width = 300, height = 300, strokeWidth = 3 }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      const newData = charts.data.data.map((item) => {\r\n        const key = new Date(item.key);\r\n        if (key) {\r\n          return {\r\n            key,\r\n            data: item.data,\r\n          };\r\n        }\r\n      });\r\n      setData(newData);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const formattingDate = (d) => {\r\n    //  Первая дата\r\n    const firstDate = data.slice().shift();\r\n    // Последняя дата\r\n    const lastDate = data.slice().pop();\r\n    // Разница между датами в месяцах\r\n    const diff = parseInt(\r\n      formatDistanceStrict(firstDate.key, lastDate.key, {\r\n        unit: \"month\",\r\n      })\r\n    );\r\n\r\n    if (diff >= 0 && diff <= 12) {\r\n      return format(d, \"d MMM\", { locale: ru });\r\n    } else {\r\n      return format(d, \"d MMM yy\", { locale: ru });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <>\r\n      <LineChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        xAxis={\r\n          <LinearXAxis\r\n            type=\"time\"\r\n            tickSeries={\r\n              <LinearXAxisTickSeries\r\n                label={\r\n                  <LinearXAxisTickLabel\r\n                    //fontSize={12}\r\n                    //fill=\"#000000\"\r\n                    format={formattingDate}\r\n                  />\r\n                }\r\n              />\r\n            }\r\n          />\r\n        }\r\n        series={\r\n          <LineSeries line={<Line strokeWidth={strokeWidth} />} colorScheme={widget.colorScheme} />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicLineChart;\r\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\n\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst sortData = (key, order = \"desc\") => {\r\n  return function innerSort(a, b) {\r\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\r\n      return 0;\r\n    }\r\n\r\n    const varA = typeof a[key] === \"string\" ? a[key].toUpperCase() : a[key];\r\n    const varB = typeof b[key] === \"string\" ? b[key].toUpperCase() : b[key];\r\n\r\n    let comparison = 0;\r\n    if (varA > varB) {\r\n      comparison = 1;\r\n    } else if (varA < varB) {\r\n      comparison = -1;\r\n    }\r\n    return order === \"desc\" ? comparison * -1 : comparison;\r\n  };\r\n};\r\n\r\nconst DynamicTableWidget = ({ widget }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data.sort(sortData(\"data\")));\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const summary = useMemo(() => data.reduce((acc, item) => acc + item.data, 0), [data]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  if (widget.options.isVertical) {\r\n    return (\r\n      <div className=\"widget-table\">\r\n        <table className=\"vertical-table\">\r\n          <tbody>\r\n            {data.map((item, key) => (\r\n              <tr key={key}>\r\n                <td>{item.key}</td>\r\n                <td>{item.data}</td>\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <td>ИТОГО</td>\r\n              <td>{summary}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"widget-table\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {data.map((item, key) => (\r\n              <th key={key}>{item.key}</th>\r\n            ))}\r\n            <th>ИТОГО</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            {data.map((item, key) => (\r\n              <td key={key}>{item.data}</td>\r\n            ))}\r\n            <td>{summary}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicTableWidget;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { PieChart, PieArcSeries, PieArcLabel, DiscreteLegend, DiscreteLegendEntry } from \"reaviz\";\r\nimport Spinner from \"./Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst DynamicDonutChart = ({ widget, width = 300, height = 300 }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200) {\r\n      setData(charts.data.data);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (data.length === 0) return <EmptyWidget />;\r\n\r\n  // Формируем легенду\r\n  const entries = data.map((item, i) => {\r\n    return (\r\n      <DiscreteLegendEntry\r\n        key={i}\r\n        className=\"discrete__legend-item\"\r\n        label={`${item.key} (${item.data})`}\r\n        //color={colorScheme(item, i)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <PieChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        series={\r\n          <PieArcSeries\r\n            doughnut={true}\r\n            colorScheme={widget.options.colorScheme}\r\n            label={<PieArcLabel fontSize={12} fontFill=\"#000000\" />}\r\n          />\r\n        }\r\n      />\r\n      {widget.options?.legend && (\r\n        <DiscreteLegend\r\n          className=\"discrete__legend\"\r\n          orientation={widget.options.legend}\r\n          entries={entries}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicDonutChart;\r\n","import React from \"react\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner-border\" style={{ width: \"3rem\", height: \"3rem\" }} role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  AreaChart,\r\n  AreaSeries,\r\n  MarkLine,\r\n  Line,\r\n  LinearXAxis,\r\n  LinearXAxisTickSeries,\r\n  LinearXAxisTickLabel,\r\n  Area,\r\n  Gradient,\r\n  GradientStop,\r\n} from \"reaviz\";\r\n\r\nimport format from \"date-fns/format\";\r\nimport formatDistanceStrict from \"date-fns/formatDistanceStrict\";\r\nimport ru from \"date-fns/locale/ru\";\r\n\r\nimport Spinner from \"../Spinner\";\r\nimport EmptyWidget from \"./EmptyWidget\";\r\n\r\nimport { getWidgetData } from \"../services/getWidgetData\";\r\n\r\nconst DynamicAreaChart = ({ widget, width = 300, height = 300, color = \"#FFD51F\" }) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    const charts = await getWidgetData(widget.source, widget.filter);\r\n    if (charts.status === 200 && typeof charts.data !== \"string\") {\r\n      const newData = charts.data.data.map((item) => {\r\n        const key = new Date(item.key);\r\n        if (key) {\r\n          return {\r\n            key,\r\n            data: item.data,\r\n          };\r\n        }\r\n      });\r\n      setData(newData);\r\n      setIsLoading(false);\r\n    }\r\n  }, [widget]);\r\n\r\n  const formattingDate = (d) => {\r\n    //  Первая дата\r\n    const firstDate = data.slice().shift();\r\n    // Последняя дата\r\n    const lastDate = data.slice().pop();\r\n    // Разница между датами в месяцах\r\n    const diff = parseInt(\r\n      formatDistanceStrict(firstDate.key, lastDate.key, {\r\n        unit: \"month\",\r\n      })\r\n    );\r\n\r\n    if (diff >= 0 && diff <= 12) {\r\n      return format(d, \"d LLL\", { locale: ru });\r\n    } else {\r\n      return format(d, \"d MMM yy\", { locale: ru });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  if (isLoading) return <Spinner />;\r\n\r\n  if (!Array.isArray(data) || data.length === 0) return <EmptyWidget />;\r\n\r\n  return (\r\n    <>\r\n      <AreaChart\r\n        height={height}\r\n        width={width}\r\n        data={data}\r\n        xAxis={\r\n          <LinearXAxis\r\n            type=\"time\"\r\n            tickSeries={\r\n              <LinearXAxisTickSeries label={<LinearXAxisTickLabel format={formattingDate} />} />\r\n            }\r\n          />\r\n        }\r\n        series={\r\n          <AreaSeries\r\n            type={widget.options.type || \"standard\"}\r\n            markLine={<MarkLine strokeWidth={0} />}\r\n            line={<Line strokeWidth={0} />}\r\n            area={\r\n              <Area\r\n                gradient={<Gradient color={color} stops={[<GradientStop color={color} />]} />}\r\n              />\r\n            }\r\n          />\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DynamicAreaChart;\r\n","import React from \"react\";\r\n\r\nimport { BAR, PIE, LINE, AREA, TABLE, DONUT } from \"./widgetTypes\";\r\n\r\nimport DynamicBarChart from \"./widgets/DynamicBarChart\";\r\nimport DynamicPieChart from \"./widgets/DynamicPieChart\";\r\nimport DynamicAreaChart from \"./widgets/DynamicAreaChart\";\r\nimport DynamicLineChart from \"./widgets/DynamicLineChart\";\r\nimport DynamicTableWidget from \"./widgets/DynamicTableWidget\";\r\nimport DynamicDonutChart from \"./widgets/DynamicDonutChart\";\r\n\r\nconst WidgetDiagram = ({ widget, width = 360, height = 300 }) => {\r\n  switch (widget.type) {\r\n    case BAR:\r\n      return <DynamicBarChart width={width} height={height} widget={widget} />;\r\n    case PIE:\r\n      return <DynamicPieChart width={width} height={height} widget={widget} />;\r\n    case DONUT:\r\n      return <DynamicDonutChart width={width} height={height} widget={widget} />;\r\n    case LINE:\r\n      return <DynamicLineChart width={width} height={height} widget={widget} />;\r\n    case TABLE:\r\n      return <DynamicTableWidget width={width} height={height} widget={widget} />;\r\n    case AREA:\r\n      return <DynamicAreaChart width={width} height={height} widget={widget} />;\r\n    default:\r\n      return <></>;\r\n  }\r\n};\r\n\r\nexport default WidgetDiagram;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nimport { getTypeName } from \"../../../../../../admin/src/components/dashboard/widgetTypes\";\r\n\r\nfunction TypeField({ widget, setWidget, allowedTypes }) {\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Тип виджета</Form.Label>\r\n      <Form.Control\r\n        as=\"select\"\r\n        custom\r\n        value={widget.type}\r\n        onChange={(e) => setWidget({ ...widget, type: e.target.value })}\r\n      >\r\n        {allowedTypes.map((value, key) => (\r\n          <option key={key} value={value}>\r\n            {getTypeName(value)}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nexport default TypeField;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nfunction LegendField({ widget, setWidget }) {\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Легенда</Form.Label>\r\n      <Form.Control\r\n        as=\"select\"\r\n        custom\r\n        value={widget.options.legend}\r\n        onChange={(e) =>\r\n          setWidget({\r\n            ...widget,\r\n            options: { ...widget.options, legend: e.target.value },\r\n          })\r\n        }\r\n        required\r\n      >\r\n        <option value=\"\">Не показывать</option>\r\n        <option value=\"horizontal\">Горизонтальная</option>\r\n        <option value=\"vertical\">Вертикальная</option>\r\n      </Form.Control>\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nexport default LegendField;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nfunction SourceField({ widget, setWidget, sources }) {\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Источник данных</Form.Label>\r\n      <Form.Control\r\n        as=\"select\"\r\n        custom\r\n        value={widget.source}\r\n        onChange={(e) =>\r\n          setWidget({\r\n            ...widget,\r\n            source: e.target.value,\r\n          })\r\n        }\r\n        required\r\n      >\r\n        <option value=\"\">-</option>\r\n        {sources.map(({ url, name }) => (\r\n          <option key={url} value={url}>\r\n            {name}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nexport default SourceField;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { schemes } from \"reaviz\";\r\n\r\nfunction ColorSchemeField({ widget, setWidget }) {\r\n  const colors = Object.keys(schemes).map((name) => {\r\n    return { label: name, value: name };\r\n  });\r\n\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>Цветовая схема</Form.Label>\r\n      <Form.Control\r\n        as=\"select\"\r\n        custom\r\n        value={widget.options.colorScheme}\r\n        onChange={(e) =>\r\n          setWidget({ ...widget, options: { ...widget.options, colorScheme: e.target.value } })\r\n        }\r\n        required\r\n      >\r\n        {colors.map(({ label, value }) => (\r\n          <option key={value} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    </Form.Group>\r\n  );\r\n}\r\n\r\nexport default ColorSchemeField;\r\n","import React, { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { BAR, PIE, TABLE, DONUT } from \"../../../../../admin/src/components/dashboard/widgetTypes\";\r\n\r\nimport WidgetDiagram from \"../../../../../admin/src/components/dashboard/WidgetDiagram\";\r\nimport TypeField from \"./fields/TypeField\";\r\nimport LegendField from \"./fields/LegendField\";\r\nimport SourceField from \"./fields/SourceField\";\r\nimport ColorSchemeField from \"./fields/colorSchemeField\";\r\n\r\nconst AddWidget = ({ id, onAdd, setIsShow, sources }) => {\r\n  const [widget, setWidget] = useState({\r\n    type: TABLE,\r\n    source: \"\",\r\n    options: {\r\n      isVertical: false,\r\n      legend: \"\",\r\n    },\r\n  });\r\n\r\n  const title = useRef(\"\");\r\n\r\n  const onSave = async () => {\r\n    const data = {\r\n      ...widget,\r\n      title: title.current.value,\r\n      options: JSON.stringify(widget.options),\r\n      filter: JSON.stringify({}),\r\n    };\r\n    const req = await axios.post(`/ajax/dashboards/${id}`, data);\r\n    if (req.status === 200) {\r\n      onAdd(req.data);\r\n      setIsShow(false);\r\n    }\r\n  };\r\n\r\n  const handleFocus = (e) => {\r\n    const { value } = e.target;\r\n    if (value === \"Новый виджет\") {\r\n      title.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    const { value } = e.target;\r\n    if (value === \"\") {\r\n      title.current.value = \"Новый виджет\";\r\n    }\r\n  };\r\n\r\n  const getTypesBySource = (s) => {\r\n    const source = sources.find((item) => s === `/ajax/models/queries/${item.model}/${item.value}`);\r\n    return source?.types?.map((type) => type.value) || [];\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Добавить виджет</Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label>Название виджета</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              ref={title}\r\n              onFocus={handleFocus}\r\n              onBlur={handleBlur}\r\n              defaultValue=\"Новый виджет\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n\r\n          <SourceField\r\n            widget={widget}\r\n            setWidget={setWidget}\r\n            sources={sources.map((item) => {\r\n              return { name: item.label, url: `/ajax/models/queries/${item.model}/${item.value}` };\r\n            })}\r\n          />\r\n\r\n          <TypeField\r\n            widget={widget}\r\n            setWidget={setWidget}\r\n            allowedTypes={getTypesBySource(widget.source)}\r\n          />\r\n\r\n          <ColorSchemeField widget={widget} setWidget={setWidget} />\r\n\r\n          <LegendField widget={widget} setWidget={setWidget} />\r\n        </Form>\r\n\r\n        <div className=\"widget-placeholder\">\r\n          {widget.source && <WidgetDiagram widget={widget} width={360} height={360} />}\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"secondary\" onClick={() => setIsShow(false)}>\r\n          Закрыть\r\n        </Button>\r\n        <Button variant=\"warning\" onClick={onSave} disabled={widget.source === \"\"}>\r\n          Сохранить изменения\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default React.memo(AddWidget);\r\n","import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport WidgetDiagram from \"../../../../../admin/src/components/dashboard/WidgetDiagram\";\r\nimport TypeField from \"./fields/TypeField\";\r\nimport LegendField from \"./fields/LegendField\";\r\nimport SourceField from \"./fields/SourceField\";\r\nimport ColorSchemeField from \"./fields/colorSchemeField\";\r\n\r\nconst EditWidget = ({ data, onEdited, setIsEdit, sources }) => {\r\n  const [widget, setWidget] = useState(data);\r\n\r\n  const title = useRef(widget.title);\r\n\r\n  const onSave = async () => {\r\n    onEdited({\r\n      ...widget,\r\n      title: title.current.value,\r\n    });\r\n    setIsEdit(false);\r\n  };\r\n\r\n  const getTypesBySource = (s) => {\r\n    const source = sources.find((item) => s === `/ajax/models/queries/${item.model}/${item.value}`);\r\n    return source?.types?.map((type) => type.value) || [];\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title>Редактировать виджет</Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label>Название виджета</Form.Label>\r\n            <Form.Control type=\"text\" ref={title} defaultValue={widget.title} required />\r\n          </Form.Group>\r\n\r\n          <SourceField\r\n            widget={widget}\r\n            setWidget={setWidget}\r\n            sources={sources.map((item) => {\r\n              return { name: item.label, url: `/ajax/models/queries/${item.model}/${item.value}` };\r\n            })}\r\n          />\r\n\r\n          <TypeField\r\n            widget={widget}\r\n            setWidget={setWidget}\r\n            allowedTypes={getTypesBySource(widget.source)}\r\n          />\r\n\r\n          <ColorSchemeField widget={widget} setWidget={setWidget} />\r\n\r\n          <LegendField widget={widget} setWidget={setWidget} />\r\n        </Form>\r\n\r\n        <div className=\"widget-placeholder\">\r\n          {widget.source && <WidgetDiagram widget={widget} width={360} height={360} />}\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"secondary\" onClick={() => setIsEdit(false)}>\r\n          Закрыть\r\n        </Button>\r\n        <Button variant=\"warning\" onClick={onSave} disabled={widget.source === \"\"}>\r\n          Сохранить изменения\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default React.memo(EditWidget);\r\n","import React, { useState } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport GearFill from \"react-bootstrap-icons/dist/icons/gear-fill\";\r\nimport TrashFill from \"react-bootstrap-icons/dist/icons/trash-fill\";\r\n\r\nimport EditWidget from \"./EditWidget\";\r\nimport WidgetDiagram from \"../../../../../admin/src/components/dashboard/WidgetDiagram\";\r\n\r\nfunction CardWidget({ widget, onDeleted, onEdited, sources }) {\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  return (\r\n    <Card key={widget.id}>\r\n      <Card.Header>\r\n        <Card.Title>{widget.title}</Card.Title>\r\n        <Card.Title>\r\n          <button type=\"button\" title=\"Настроить виджет\" onClick={() => setIsEdit(!isEdit)}>\r\n            <GearFill />\r\n          </button>\r\n          <button type=\"button\" title=\"Удалить виджет\" onClick={() => onDeleted(widget)}>\r\n            <TrashFill />\r\n          </button>\r\n        </Card.Title>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        {isEdit ? (\r\n          <EditWidget sources={sources} data={widget} onEdited={onEdited} setIsEdit={setIsEdit} />\r\n        ) : (\r\n          <WidgetDiagram widget={widget} width={360} height={300} />\r\n        )}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CardWidget;\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport AddWidget from \"./AddWidget\";\r\nimport CardWidget from \"./CardWidget\";\r\n\r\nconst AltrpDashboards = ({ id, settings }) => {\r\n  const [widgets, setWidgets] = useState([]);\r\n  const [isShow, setIsShow] = useState(false);\r\n  console.log(\"settings :>> \", settings);\r\n\r\n  const getWidgets = useCallback(\r\n    async (id) => {\r\n      try {\r\n        const req = await axios(`/ajax/dashboards/${id}`);\r\n        if (req.status === 200) {\r\n          setWidgets(\r\n            req.data.map((w) => {\r\n              return {\r\n                ...w,\r\n                options: JSON.parse(w.options),\r\n                filter: JSON.parse(w.filter),\r\n              };\r\n            })\r\n          );\r\n        }\r\n      } catch (error) {}\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const handleAdd = (widget) => {\r\n    setWidgets([widget, ...widgets]);\r\n  };\r\n\r\n  const handleRemove = (widget) => {\r\n    setWidgets(widgets.filter((w) => w.id !== widget.id));\r\n    axios.delete(`/ajax/dashboards/${widget.id}`);\r\n  };\r\n\r\n  const handleEdit = (widget) => {\r\n    setWidgets(widgets.map((w) => (w.id === widget.id ? widget : w)));\r\n    axios.put(`/ajax/dashboards/${widget.id}`, {\r\n      ...widget,\r\n      options: JSON.stringify(widget.options),\r\n      filter: JSON.stringify(widget.filter),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWidgets(id);\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className=\"altrp-dashboard\">\r\n      <div className=\"altrp-dashboard__controls\">\r\n        <button onClick={() => setIsShow(true)}>Добавить виджет</button>\r\n      </div>\r\n      <div className=\"altrp-dashboard__widgets\">\r\n        {isShow && (\r\n          <AddWidget sources={settings.sql} id={id} setIsShow={setIsShow} onAdd={handleAdd} />\r\n        )}\r\n        {widgets.map((widget) => (\r\n          <CardWidget\r\n            sources={settings.sql}\r\n            key={widget.id}\r\n            widget={widget}\r\n            onDeleted={handleRemove}\r\n            onEdited={handleEdit}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AltrpDashboards;\r\n"],"sourceRoot":""}