{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-table/component.js"],"names":["AltrpTable","settings","query","tables_columns","children","useQuery","modelName","getResource","getQueried","data","error","isFetching","columns","forEach","_column","column_name","accessor","push","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"uIA2EeA,UAjEI,SAAC,GAAsB,IAArBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAE7B,IAAKD,EAASE,eACZ,OAAO,2BAAKC,SAAS,sBAHiB,MAKNC,YAASH,EAAMI,WAAW,WAC1D,OAAOJ,EAAMK,cAAcC,gBADtBC,EALiC,EAKjCA,KAAMC,EAL2B,EAK3BA,MAAOC,EALoB,EAKpBA,WAGhBC,EAAU,GAIdX,EAASE,eAAeU,SAAQ,SAAAC,GAC1BA,EAAQC,aAAeD,EAAQE,UACjCJ,EAAQK,KAAKH,MAduB,MAwBpCI,mBAAS,CACXN,QAASO,MAAMC,SACX,kBACIR,GAAW,KAEf,CAACX,EAASE,iBAEdM,KAAMU,MAAMC,SAAQ,kBAAOX,GAAQ,KAAK,CAACA,MAZzCY,EAnBsC,EAmBtCA,cACAC,EApBsC,EAoBtCA,kBACAC,EArBsC,EAqBtCA,aACAC,EAtBsC,EAsBtCA,KACAC,EAvBsC,EAuBtCA,WAWF,OAAO,iCAAOC,UAAU,eAAkBL,KACxC,6BAAOK,UAAU,oBAChBH,EAAaI,KAAI,SAAAC,GAAW,OACzB,gCAAQA,EAAYC,sBAApB,CAA2CH,UAAU,mBAClDE,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC3B,gCAAQA,EAAOC,iBAAf,CAAiCN,UAAU,mBAAkBK,EAAOE,OAAO,wBAKrF,mCAAWX,IAAX,CAAgCI,UAAU,sBACxChB,EAAS,8BACL,wCAEAC,EAAa,8BACT,0CAEAa,EAAKG,KAAI,SAACO,EAAKC,GAEf,OADAV,EAAWS,GAEP,gCAAQA,EAAIE,cAAZ,CAA2BV,UAAU,mBAClCQ,EAAIG,MAAMV,KAAI,SAAAW,GACb,OAAO,gCAAQA,EAAKC,eAAb,CAA6Bb,UAAU,mBAAkBY,EAAKL,OAAO","file":"f15e7660915e432dc9f2.bundle.js","sourcesContent":["import {useTable} from \"react-table\";\r\nimport {useQuery} from \"react-query\";\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query}) => {\r\n\r\n  if (!settings.tables_columns) {\r\n    return <div children=\"Please add Column\"/>\r\n  }\r\n  const {data, error, isFetching} = useQuery(query.modelName, () => {\r\n    return query.getResource().getQueried()\r\n  });\r\n  let columns = [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  settings.tables_columns.forEach(_column => {\r\n    if (_column.column_name && _column.accessor) {\r\n      columns.push(_column);\r\n    }\r\n  });\r\n\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (data || []), [data]),\r\n  });\r\n\r\n  return <table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()} className=\"altrp-table-th\">{column.render('column_name')}</th>\r\n          ))}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {(error) ? <tr>\r\n          <td>error</td>\r\n        </tr>\r\n        : isFetching ? <tr>\r\n              <td>Loading</td>\r\n            </tr>\r\n            : rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                  <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n                    {row.cells.map(cell => {\r\n                      return <td {...cell.getCellProps()} className=\"altrp-table-td\">{cell.render('Cell')}</td>\r\n                    })}\r\n                  </tr>\r\n              )\r\n            })}\r\n    </tbody>\r\n  </table>\r\n};\r\n\r\nexport default AltrpTable\r\n"],"sourceRoot":""}