{"version":3,"sources":["webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?2657","webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?fb79","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","AltrpTable","settings","query","tables_columns","children","_status","_error","_latestData","_data","useState","page","setPage","fetchModels","useCallback","getQueried","pageSize","usePaginatedQuery","modelName","status","resolvedData","latestData","error","useEffect","hasMore","queryCache","prefetchQuery","useQuery","getResource","data","columns","forEach","_column","column_name","accessor","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","message","row","getRowProps","cells","cell","getCellProps","paginationType","onClick","old","Math","max","disabled","prev_text","current_page_text","next_text"],"mappings":"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","file":"da710ab450f3bbbdc33f.bundle.js","sourcesContent":["exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, {useCallback, useState, useEffect} from \"react\";\r\nimport {useTable} from \"react-table\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport '../../../sass/altrp-pagination.scss';\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query}) => {\r\n  if (!settings.tables_columns) {\r\n    return <div children=\"Please add Column\"/>\r\n  }\r\n  let _data =[], _status, _error, _latestData;\r\n  const [page, setPage] = useState(1);\r\n\r\n  const fetchModels = useCallback(async (key, page = 1) => {\r\n    return query.getQueried({\r\n      page,\r\n    })\r\n  });\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.modelName, page], fetchModels, {});\r\n    _data = resolvedData ? resolvedData[query.modelName] : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.modelName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery(query.modelName, () => {\r\n      return query.getResource().getQueried()\r\n    }, [query.modelName]);\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  let columns = [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  settings.tables_columns.forEach(_column => {\r\n    if (_column.column_name && _column.accessor) {\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (_data || []), [_data]),\r\n  });\r\n  return <><table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()} className=\"altrp-table-th\">{column.render('column_name')}</th>\r\n          ))}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {_status === \"error\" ? <tr>\r\n              <td>{_error.message}</td>\r\n            </tr> : _status === \"loading\" ? <tr>\r\n              <td>Loading</td>\r\n            </tr>\r\n            : rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                  <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n                    {row.cells.map(cell => {\r\n                      return <td {...cell.getCellProps()} className=\"altrp-table-td\">{cell.render('Cell')}</td>\r\n                    })}\r\n                  </tr>\r\n              )\r\n            })}\r\n    </tbody>\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => setPage(old => Math.max(old - 1, 0))}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || 'Previous Page'}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() =>\r\n                    setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || 'Next Page'}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\nexport default AltrpTable\r\n/*\r\nimport axios from \"axios\";\r\nimport { usePaginatedQuery, queryCache } from \"react-query\";\r\n\r\nfunction Todos() {\r\n  const [page, setPage] = React.useState(0);\r\n\r\n  const fetchProjects = React.useCallback(async (key, page = 0) => {\r\n    const { data } = await axios.get(\"/api/projects?page=\" + page);\r\n    return data;\r\n  }, []);\r\n\r\n  const {\r\n    status,\r\n    resolvedData,\r\n    latestData,\r\n    error,\r\n    isFetching\r\n  } = usePaginatedQuery([\"projects\", page], fetchProjects, {});\r\n\r\n  // Prefetch the next page!\r\n  React.useEffect(() => {\r\n    if (latestData?.hasMore) {\r\n      queryCache.prefetchQuery([\"projects\", page + 1], fetchProjects);\r\n    }\r\n  }, [latestData, fetchProjects, page]);\r\n\r\n  return (\r\n      <div>\r\n        <p>\r\n          In this example, each page of data remains visible as the next page is\r\n          fetched. The buttons and capability to proceed to the next page are also\r\n          supressed until the next page cursor is known. Each page is cached as a\r\n          normal query too, so when going to previous pages, you'll see them\r\n          instantaneously while they are also refetched invisibly in the\r\n          background.\r\n        </p>\r\n        {status === \"loading\" ? (\r\n            <div>Loading...</div>\r\n        ) : status === \"error\" ? (\r\n            <div>Error: {error.message}</div>\r\n        ) : (\r\n            // `resolvedData` will either resolve to the latest page's data\r\n            // or if fetching a new page, the last successful page's data\r\n            <div>\r\n              {resolvedData.projects.map(project => (\r\n                  <p key={project.id}>{project.name}</p>\r\n              ))}\r\n            </div>\r\n        )}\r\n        <span>Current Page: {page + 1}</span>\r\n        <button\r\n            onClick={() => setPage(old => Math.max(old - 1, 0))}\r\n            disabled={page === 0}\r\n        >\r\n          Previous Page\r\n        </button>{\" \"}\r\n        <button\r\n            onClick={() =>\r\n                // Here, we use `latestData` so the Next Page\r\n                // button isn't relying on potentially old data\r\n                setPage(old => (!latestData || !latestData.hasMore ? old : old + 1))\r\n            }\r\n            disabled={!latestData || !latestData.hasMore}\r\n        >\r\n          Next Page\r\n        </button>\r\n        {// Since the last page's data potentially sticks around between page requests,\r\n          // we can use `isFetching` to show a background loading\r\n          // indicator since our `status === 'loading'` state won't be triggered\r\n          isFetching ? <span> Loading...</span> : null}{\" \"}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Todos;\r\n*/"],"sourceRoot":""}