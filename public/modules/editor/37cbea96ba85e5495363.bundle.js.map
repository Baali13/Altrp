{"version":3,"sources":["webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?2657","webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?fb79","webpack:///./resources/modules/admin/src/components/AutoUpdateInput.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","AutoUpdateInput","props","resource","Resource","route","state","value","disabled","changeValue","bind","onChange","onKeyDown","this","get","resourceid","res","setState","e","keyCode","newValue","target","_","isFunction","changevalue","put","column_value","className","inputProps","onBlur","Component","AltrpTable","settings","query","data","tables_columns","length","children","_status","_error","_latestData","_data","useState","page","setPage","updatedData","setUpdatedData","sortSetting","setSortSettings","filterSetting","setFilterSettings","doubleClicked","setDoubleClicked","filterSettingJSON","JSON","stringify","fetchModels","useCallback","queryData","assign","filters","getQueried","pageSize","usePaginatedQuery","dataSourceName","status","resolvedData","latestData","error","useEffect","hasMore","queryCache","prefetchQuery","useQuery","getResource","columns","forEach","_column","column_name","accessor","_accessor","settingsToColumns","isArray","map","row","id","rowId","column","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","sortingHandler","order_by","order","filterHandler","filteredColumn","searchString","filterParams","additional_rows","additional_cells","cell","rowspan","colspan","role","colSpan","rowSpan","title","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","thProps","getHeaderProps","column_is_sorted","onClick","column_width","width","thText","render","iconsManager","renderIcon","column_is_filtered","type","stopPropagation","renderTh","message","getRowProps","cells","_i","cellContent","linkTag","isEditor","Link","cellProps","getCellProps","_cellContent","doubleClickContent","column_is_editable","column_edit_url","columnEditUrl","parseURLTemplate","original","onDoubleClick","cellClassName","isObject","column_link","createElement","to","paginationType","old","Math","max","prev_text","current_page_text","next_text"],"mappings":"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","file":"37cbea96ba85e5495363.bundle.js","sourcesContent":["exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, {Component} from \"react\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\n\r\nclass AutoUpdateInput extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.resource = new Resource({\r\n      route: this.props.route,\r\n    });\r\n\r\n    this.state = {\r\n      value: this.props.value || '',\r\n      disabled: ! this.props.value,\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n  }\r\n  async componentDidMount(){\r\n    if(this.props.value !== undefined){\r\n      return;\r\n    }\r\n    let res = await this.resource.get(this.props.resourceid);\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: res[this.props.resourceid] || '',\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * При нажатии на enter тоже обновдем данные\r\n   * @param e\r\n   */\r\n  onKeyDown(e){\r\n    if(e.keyCode === 13){\r\n      this.changeValue(e);\r\n    }\r\n  }\r\n\r\n  onChange(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: newValue,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.changevalue)){\r\n      this.props.changevalue(newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Запрос на именение поля\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n  async changeValue(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: true,\r\n      }\r\n    });\r\n    let res = await this.resource.put(this.props.resourceid, {value: newValue, column_value: newValue});\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    let {className} = this.props;\r\n    if(this.state.disabled){\r\n      className += ' pointer-event-none';\r\n    }\r\n    const inputProps = {...this.props};\r\n    delete inputProps.changevalue;\r\n    return<input{...inputProps} className={className}\r\n                onBlur={this.changeValue}\r\n                onKeyDown={this.onKeyDown}\r\n                onChange={this.onChange}\r\n                value={this.state.value}/>\r\n  }\r\n}\r\n\r\nexport default AutoUpdateInput","import React, {useCallback, useState, useEffect} from \"react\";\r\nimport {useTable, useSortBy} from \"react-table\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport '../../../sass/altrp-pagination.scss';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isEditor} from \"../../../../../front-app/src/js/helpers\";\r\nimport {iconsManager} from \"../../../../../admin/src/js/helpers\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport {parseURLTemplate} from \"../../helpers\";\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @param {Query} data\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query, data}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n  let _data =[], _status, _error, _latestData;\r\n  const [page, setPage] = useState(1);\r\n  const [updatedData, setUpdatedData] = useState({});\r\n  const [sortSetting, setSortSettings] = useState({});\r\n  const [filterSetting, setFilterSettings] = useState({});\r\n  const [doubleClicked, setDoubleClicked] =  useState({});\r\n  const filterSettingJSON = JSON.stringify(filterSetting);\r\n  const fetchModels = useCallback(async (key, page = 1, sortSetting, filterSetting) => {\r\n    let queryData = {page};\r\n    const filterSettingJSON = JSON.stringify(filterSetting);\r\n    if(sortSetting){\r\n      queryData = _.assign(sortSetting, queryData);\r\n    }\r\n    if(filterSettingJSON.length > 2){\r\n      queryData.filters = filterSettingJSON;\r\n    }\r\n    return query.getQueried(queryData)\r\n  });\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.dataSourceName, page, sortSetting, filterSetting], fetchModels);\r\n    _data = resolvedData ? resolvedData : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.dataSourceName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page, sortSetting, filterSetting]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery(query.dataSourceName, () => {\r\n      return query.getResource().getQueried({...sortSetting,filters: filterSettingJSON})\r\n    }, [query.dataSourceName]);\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n  if(! _data.length){\r\n    _data = data;\r\n  }\r\n  if(! _.isArray(_data)){\r\n    _data = [_data];\r\n  }\r\n  /**\r\n   * обновление данных при изменении ячейки\r\n   * @type {any[]}\r\n   * @private\r\n   */\r\n  _data = _data.map((row)=>{\r\n    if(row.id === updatedData.rowId){\r\n      row[updatedData.column] = updatedData.value;\r\n      return{...row};\r\n    }\r\n    return row;\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (_data || []), [_data]),\r\n  }, );\r\n  /**\r\n   * Обработка клика для сортировки\r\n   */\r\n  const sortingHandler = order_by => {\r\n    setSortSettings({\r\n    order_by, \r\n    order: sortSetting &&\r\n      (sortSetting.order_by === order_by) ? (sortSetting.order === \"DESC\" ? \"ASC\" :  \"DESC\") : \"ASC\"\r\n  });\r\n  };\r\n  /**\r\n   * Изменение поля для фильтрации\r\n   */\r\n  const filterHandler = (filteredColumn, searchString) => {\r\n    setPage(1);\r\n    const filterParams = {...filterSetting};\r\n    if(searchString){\r\n      filterParams[filteredColumn] = searchString;\r\n    } else {\r\n      delete filterParams[filteredColumn];\r\n    }\r\n    setFilterSettings(filterParams);\r\n  };\r\n  \r\n\r\n  return <><table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => {\r\n            return renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler});\r\n          }\r\n          )}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {_status === \"error\" ? <tr>\r\n              <td>{_error.message}</td>\r\n            </tr> : _status === \"loading\" ? <tr>\r\n              <td>Loading</td>\r\n            </tr>\r\n            : rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                  <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n                    {row.cells.map((cell, _i) => {\r\n                      let cellContent = cell.render('Cell');\r\n                      let linkTag = isEditor() ? 'a': Link;\r\n                      const cellProps = {...cell.getCellProps()};\r\n                      let _cellContent = cell.value;\r\n\r\n                      /**\r\n                       * Если в настройках колонки установлено редактирование и есть url запроса на редактирование\r\n                       * то добавляем особое поведение\r\n                       */\r\n                      let doubleClickContent = '';\r\n                      if(columns[_i].column_is_editable && columns[_i].column_edit_url){\r\n                        let columnEditUrl = parseURLTemplate(columns[_i].column_edit_url, row.original);\r\n\r\n                        doubleClickContent =\r\n                            <AutoUpdateInput className=\"altrp-inherit altrp-table-td__double-click-content\"\r\n                                             route={columnEditUrl}\r\n                                             resourceid={''}\r\n                                             changevalue={(value)=>{\r\n                                               setUpdatedData({\r\n                                                 value,\r\n                                                 rowId:row.original.id,\r\n                                                 column:columns[_i]._accessor\r\n                                               });\r\n                                             }}\r\n                                             value={_cellContent}/>;\r\n                        cellProps.onDoubleClick = () => {\r\n                          if(doubleClicked.column === columns[_i]._accessor && doubleClicked.rowId === row.original.id){\r\n                            setDoubleClicked({});\r\n                          } else {\r\n                            setDoubleClicked({\r\n                              column: columns[_i]._accessor,\r\n                              rowId: row.original.id,\r\n                            });\r\n                          }\r\n                        };\r\n                      }\r\n                      let cellClassName = 'altrp-table-td';\r\n                      if(doubleClicked.column === columns[_i]._accessor && row.original.id === doubleClicked.rowId){\r\n                        cellClassName += ' altrp-table-td_double-clicked';\r\n                      }\r\n                      /**\r\n                       * Если значение объект или массив, то отобразим пустую строку\r\n                       */\r\n                      if(_.isObject(cell.value)){\r\n                        cellContent = '';\r\n                      }\r\n                      /**\r\n                       * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                       */\r\n                      if(columns[_i].column_link && row.original.id){\r\n                        cellContent = React.createElement(linkTag, {\r\n                          to: parseURLTemplate(columns[_i].column_link,  row.original),\r\n                          className: 'altrp-inherit altrp-table-td__default-content',\r\n                        }, cellContent)\r\n                      } else {\r\n                        cellContent = React.createElement('span', {\r\n                          className: 'altrp-inherit altrp-table-td__default-content',\r\n                        }, cellContent)\r\n                      }\r\n                      return <td {...cellProps} className={cellClassName}>{cellContent}{doubleClickContent}</td>\r\n                    })}\r\n                  </tr>\r\n              )\r\n            })}\r\n    </tbody>\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => {\r\n                  setPage(old => Math.max(old - 1, 0));\r\n                  setDoubleClicked({});\r\n                  setUpdatedData({});\r\n                }}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || 'Previous Page'}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() => {\r\n                  setUpdatedData({});\r\n                  setDoubleClicked({});\r\n                  setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }}\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || 'Next Page'}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\nexport default AltrpTable\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nfunction settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    if (_column.column_name && _column.accessor) {\r\n      _column._accessor = _column.accessor;\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|[]}\r\n */\r\nfunction renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n}\r\n\r\n/**\r\n * Отрисовка главного заголовка колонки для таблицы\r\n * @param {{}}column\r\n * @param {{}}sortSetting\r\n * @param {{}}filterSetting\r\n * @param {function}sortingHandler\r\n * @param {function}filterHandler\r\n * @return {*}\r\n */\r\nfunction renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler}){\r\n  let thProps = {...column.getHeaderProps()};\r\n  thProps.className = 'altrp-table-th';\r\n  if(column.column_is_sorted){\r\n    thProps.onClick = () => sortingHandler(column._accessor);\r\n    thProps.className += ' clickable'\r\n  }\r\n  if(column.column_width){\r\n    thProps.width = column.column_width + '%';\r\n  }\r\n  let thText = column.render('column_name');\r\n  return  <th {...thProps}>\r\n    {thText}\r\n    { sortSetting && (sortSetting.order_by === column._accessor)\r\n      && (sortSetting.order === \"DESC\" ?\r\n        iconsManager().renderIcon('chevron', {className:'rotate-180'}) :\r\n        iconsManager().renderIcon('chevron'))}\r\n    {column.column_is_filtered &&\r\n    <label className=\"altrp-label\">\r\n    <input type=\"text\"\r\n           onClick={e => {e.stopPropagation()}}\r\n           onChange={e=>{\r\n             e.stopPropagation();\r\n             let value = e.target.value;\r\n             filterHandler(column._accessor, value)\r\n           }}\r\n           value={filterSetting[column._accessor] || ''}\r\n           className=\"altrp-field\"/>\r\n    </label>}\r\n\r\n  </th>\r\n}"],"sourceRoot":""}