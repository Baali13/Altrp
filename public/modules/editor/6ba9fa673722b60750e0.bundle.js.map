{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpForm.js","webpack:///./resources/modules/editor/src/js/classes/modules/FormsManager.js"],"names":["AltrpForm","formId","modelName","method","options","this","fields","route","resource","Resource","field","push","modelID","submitText","success","confirm","forEach","fieldValidate","post","getData","res","afterLoginRedirect","document","location","replace","afterLogoutRedirect","reload","put","then","modelsManager","updateModelWithData","console","error","alert","data","altrp_ajax","getValue","getSettings","formsManager","forms","formIds","fieldsStorage","form","getForm","length","setFields","addField","submit","_form"],"mappings":"gLAyHeA,E,WAnHb,WAAYC,EAAQC,GAAyC,IAA9BC,EAA8B,uDAArB,OAAQC,EAAa,uDAAH,GAAG,YAC3DC,KAAKJ,OAASA,EACdI,KAAKC,OAAS,GACdD,KAAKF,OAASA,EACdE,KAAKD,QAAUA,EACfC,KAAKH,UAAYA,EACjB,IAAIK,EAAQ,gBAAH,OAAmBL,GAE5B,OAAQA,GACN,IAAK,QACHK,EAAQ,SACT,MACD,IAAK,SACHA,EAAQ,UAGZF,KAAKG,SAAW,IAAIC,IAAS,CAACF,U,oDAOtBD,GACRD,KAAKC,OAASA,I,+BAOPI,GAEP,OADAL,KAAKC,OAAOK,KAAKD,IACV,I,gDASIE,G,mGAASC,E,+BAAa,GAC7BC,GAAU,GACXD,E,gCACsBE,QAAQF,G,0DAEvB,CAACC,SAAS,I,UAGpBT,KAAKC,OAAOU,SAAQ,SAAAN,GACbA,EAAMO,kBACTH,GAAU,OAGXA,E,sBACOT,KAAKF,O,OACN,S,QAgBA,Q,QAcA,W,0CA7BcE,KAAKG,SAASU,KAAKb,KAAKc,W,WAArCC,E,OACmB,UAAnBf,KAAKH,YAA0BG,KAAKD,QAAQiB,mB,wBAC9CC,SAASC,SAASC,QAAQnB,KAAKD,QAAQiB,oB,kBAChCD,G,WAEc,WAAnBf,KAAKH,YAA2BG,KAAKD,QAAQqB,oB,wBAC/CH,SAASC,SAASC,QAAQnB,KAAKD,QAAQqB,qB,kBAChCL,G,YAENA,EAAIM,O,wBACLJ,SAASC,SAASG,S,oDAGbN,G,YAKJR,E,kCACYP,KAAKG,SAASmB,IAAIf,EAASP,KAAKc,W,eAA7CC,E,OACA,wCAAkCQ,MAAK,SAAAC,GACrCA,EAAa,QAASC,oBAAoB,EAAK5B,UAAWU,EAAS,EAAKO,c,kBAGnEC,G,eAETW,QAAQC,MAAM,+C,iCAIXpB,E,kCAEYP,KAAKG,SAAL,OAAqBI,G,iDAEpCmB,QAAQC,MAAM,+C,iDAILC,MAAM,uB,wKASrB,IAAIC,EAAO,CAACC,YAAY,GAMxB,OALA9B,KAAKC,OAAOU,SAAQ,SAAAN,GACM,OAArBA,EAAM0B,aACPF,EAAKxB,EAAM2B,YAAY,aAAe3B,EAAM0B,eAGzCF,M,KC1BLI,EAAe,I,WAtFnB,aAAa,YAKXjC,KAAKkC,MAAQ,GAKblC,KAAKmC,QAAU,GACfnC,KAAKoC,cAAgB,G,iDAWVxC,EAAQC,EAAWC,GAAqB,IAAbC,EAAa,uDAAH,GAC5CsC,EAAOrC,KAAKsC,QAAQ1C,GAaxB,OAZKyC,IACHA,EAAO,IAAI1C,EAAUC,EAAQC,EAAWC,EAAQC,GAK7CC,KAAKoC,cAAcxC,IAAWI,KAAKoC,cAAcxC,GAAQ2C,SAC1DF,EAAKG,UAAUxC,KAAKoC,cAAcxC,WAC3BI,KAAKoC,cAAcxC,IAE5BI,KAAKkC,MAAM5B,KAAK+B,IAEXA,I,+BAUAzC,EAAQS,GACf,IAAIgC,EAAOrC,KAAKsC,QAAQ1C,GACxB,OAAKyC,EAKEA,EAAKI,SAASpC,IAJnBL,KAAKoC,cAAcxC,GAAUI,KAAKoC,cAAcxC,IAAW,GAC3DI,KAAKoC,cAAcxC,GAAQU,KAAKD,IACzB,K,iCAUAT,EAAQW,GACjB,OAAKP,KAAKsC,QAAQ1C,GAIXI,KAAKsC,QAAQ1C,GAAQ8C,OAAOnC,IAHjCmB,QAAQC,MAAM,qBACP,K,8BASH/B,GACN,IAAI+C,EAAQ,KASZ,OARA3C,KAAKkC,MAAMvB,SAAQ,SAAA0B,GAIdA,EAAKzC,SAAWA,IACjB+C,EAAQN,MAGLM,M,MAKIV","file":"6ba9fa673722b60750e0.bundle.js","sourcesContent":["import Resource from \"./Resource\";\r\n\r\n/**\r\n * Класс имитирующий поведение формы (собирает данные с виджетов полей и отправляет их на сервер)\r\n */\r\nclass AltrpForm {\r\n  constructor(formId, modelName, method = 'POST', options = {}){\r\n    this.formId = formId;\r\n    this.fields = [];\r\n    this.method = method;\r\n    this.options = options;\r\n    this.modelName = modelName;\r\n    let route = `/ajax/models/${modelName}`;\r\n\r\n    switch (modelName){\r\n      case 'login':{\r\n        route = `/login`\r\n      }break;\r\n      case 'logout':{\r\n        route = `/logout`\r\n      }break;\r\n    }\r\n    this.resource = new Resource({route});\r\n  }\r\n\r\n  /**\r\n   * Устанавливает список полей (в случае, если егистрация после добавления какой либо формы)\r\n   * @param {FrontElement[]}fields\r\n   */\r\n  setFields(fields){\r\n    this.fields = fields;\r\n  }\r\n\r\n  /**\r\n   * Добавлйет поле\r\n   * @param {FrontElement} field\r\n   */\r\n  addField(field){\r\n    this.fields.push(field);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Проверка полей перед отправкой\r\n   * @param {int |  null} modelID\r\n   * @param {string} submitText\r\n   * @return {boolean}\r\n   */\r\n  async submit(modelID, submitText = ''){\r\n    let success = true;\r\n    if(submitText){\r\n      let confirmed =  await confirm(submitText);\r\n      if(! confirmed){\r\n        return{success: false};\r\n      }\r\n    }\r\n    this.fields.forEach(field=>{\r\n      if(! field.fieldValidate()){\r\n        success = false;\r\n      }\r\n    });\r\n    if(success){\r\n      switch (this.method){\r\n        case 'POST':{\r\n          let res =  await this.resource.post(this.getData());\r\n          if((this.modelName === 'login') && this.options.afterLoginRedirect){\r\n            document.location.replace(this.options.afterLoginRedirect);\r\n            return res;\r\n          }\r\n          if((this.modelName === 'logout') && this.options.afterLogoutRedirect){\r\n            document.location.replace(this.options.afterLogoutRedirect);\r\n            return res;\r\n          }\r\n          if(res.reload){\r\n            document.location.reload();\r\n            return;\r\n          }\r\n          return res;\r\n        }\r\n        case 'PUT':{\r\n          // return await alert(JSON.stringify(this.getData()));\r\n          let res;\r\n          if(modelID){\r\n            res =  await this.resource.put(modelID, this.getData());\r\n            import('./modules/ModelsManager').then(modelsManager=>{\r\n              modelsManager.default.updateModelWithData(this.modelName, modelID, this.getData());\r\n            });\r\n\r\n            return res;\r\n          }\r\n          console.error('Не удалось получить ИД модели для удаления!');\r\n        }\r\n        break;\r\n        case 'DELETE':{\r\n          if(modelID){\r\n            // return await await alert('Удаление!');\r\n            return await this.resource.delete(modelID);\r\n          }\r\n          console.error('Не удалось получить ИД модели для удаления!');\r\n        }\r\n      }\r\n    } else {\r\n      return await alert('Валидация не прошла');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Собирает данные с полей для отправки\r\n   * @return {object}\r\n   */\r\n  getData(){\r\n    let data = {altrp_ajax: true};\r\n    this.fields.forEach(field=>{\r\n      if(field.getValue() !== null){\r\n        data[field.getSettings('field_id')] = field.getValue();\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default AltrpForm","import AltrpForm from \"../AltrpForm\";\r\n/**\r\n * Класс менеджер форм для фронтенда/редактора\r\n */\r\nclass FormsManager {\r\n  constructor(){\r\n    /**\r\n     *\r\n     * @type {AltrpForm[]}\r\n     */\r\n    this.forms = [];\r\n    /**\r\n     *\r\n     * @type {string[]}\r\n     */\r\n    this.formIds = [];\r\n    this.fieldsStorage = {};\r\n  }\r\n\r\n  /**\r\n   * Регистрирует новую форму.\r\n   * @param {string} formId\r\n   * @param {string} modelName\r\n   * @param {string} method\r\n   * @param {{}} options\r\n   * @return {AltrpForm}\r\n   */\r\n  registerForm(formId, modelName, method, options = {}){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      form = new AltrpForm(formId, modelName, method, options);\r\n      /**\r\n       * Если в хранилище есть список полей для указанной формы,\r\n       * то передаем их в форму, а на список ссылку удаляем\r\n       */\r\n      if(this.fieldsStorage[formId] && this.fieldsStorage[formId].length){\r\n        form.setFields(this.fieldsStorage[formId]);\r\n        delete this.fieldsStorage[formId]\r\n      }\r\n      this.forms.push(form);\r\n    }\r\n    return form;\r\n  }\r\n\r\n  /**\r\n   * Добавляет поле к форме\r\n   * сохраняет поле в fieldsStorage если форма еще не добавлена\r\n   * @param {string} formId\r\n   * @param {FrontElement} field\r\n   * @return {boolean}\r\n   */\r\n  addField(formId, field){\r\n    let form = this.getForm(formId);\r\n    if(! form){\r\n      this.fieldsStorage[formId] = this.fieldsStorage[formId] || [];\r\n      this.fieldsStorage[formId].push(field);\r\n      return true;\r\n    }\r\n    return form.addField(field)\r\n  }\r\n  /**\r\n   * Отправляет форму\r\n   * @param {string} formId\r\n   * @param {int | null} modelID\r\n   * @return {boolean}\r\n   */\r\n  submitForm(formId, modelID){\r\n    if(! this.getForm(formId)){\r\n      console.error('Форма не найдена');\r\n      return false;\r\n    }\r\n    return this.getForm(formId).submit(modelID);\r\n  }\r\n  /**\r\n   * Получить форму по id\r\n   * @param {string} formId\r\n   * @return {AltrpForm | null}\r\n   */\r\n  getForm(formId){\r\n    let _form = null;\r\n    this.forms.forEach(form=>{\r\n      /**\r\n       * @member {AltrpForm}form\r\n       */\r\n      if(form.formId === formId){\r\n        _form = form;\r\n      }\r\n    });\r\n    return _form;\r\n  }\r\n}\r\nconst formsManager = new FormsManager();\r\n\r\nexport default formsManager;"],"sourceRoot":""}