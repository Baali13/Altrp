{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-table/component.js"],"names":["AltrpTable","useTable","columns","React","useMemo","Header","accessor","data","lens","makeDataLevel","depth","len","range","map","d","newPerson","subRows","undefined","makeData","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","arr","push","statusChance","Math","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status"],"mappings":"kzBAsEeA,UAlEI,WAAM,MAQnBC,mBAAS,CACXC,QAASC,MAAMC,SACX,iBAAM,CACJ,CACEC,OAAQ,aACRC,SAAU,aAEZ,CACED,OAAQ,YACRC,SAAU,YAEZ,CACED,OAAQ,MACRC,SAAU,OAEZ,CACED,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,mBACRC,SAAU,eAGd,IAEJC,KAAMJ,MAAMC,SAAQ,kBAuDxB,WAA2B,2BAANI,EAAM,yBAANA,EAAM,gBACzB,IAAMC,EAAgB,SAAhBA,IAA+B,IAAdC,EAAc,uDAAN,EACvBC,EAAMH,EAAKE,GACjB,OAAOE,EAAMD,GAAKE,KAAI,SAAAC,GACpB,cACKC,KADL,IAEEC,QAASR,EAAKE,EAAQ,GAAKD,EAAcC,EAAQ,QAAKO,QAK5D,OAAOR,IAlEqBS,CAAS,MAAK,MAnCxCC,EAHqB,EAGrBA,cACAC,EAJqB,EAIrBA,kBACAC,EALqB,EAKrBA,aACAC,EANqB,EAMrBA,KACAC,EAPqB,EAOrBA,WAkCF,OAAO,iCAAOC,UAAU,eAAkBL,KACxC,6BAAOK,UAAU,oBAChBH,EAAaR,KAAI,SAAAY,GAAW,OACzB,gCAAQA,EAAYC,sBAApB,CAA2CF,UAAU,mBAClDC,EAAYE,QAAQd,KAAI,SAAAe,GAAM,OAC3B,gCAAQA,EAAOC,iBAAf,CAAiCL,UAAU,mBAAkBI,EAAOE,OAAO,mBAKrF,mCAAWV,IAAX,CAAgCI,UAAU,sBACzCF,EAAKT,KAAI,SAACkB,EAAKC,GAEd,OADAT,EAAWQ,GAEP,gCAAQA,EAAIE,cAAZ,CAA2BT,UAAU,mBAClCO,EAAIG,MAAMrB,KAAI,SAAAsB,GACb,OAAO,gCAAQA,EAAKC,eAAb,CAA6BZ,UAAU,mBAAkBW,EAAKL,OAAO,mBAW1F,IAAMlB,EAAQ,SAAAD,GAEZ,IADA,IAAM0B,EAAM,GACHL,EAAI,EAAGA,EAAIrB,EAAKqB,IACvBK,EAAIC,KAAKN,GAEX,OAAOK,GAGHtB,EAAY,WAChB,IAAMwB,EAAeC,KAAKC,SAC1B,MAAO,CACLC,UAAWC,IAAMC,SAAS,CAACC,MAAO,EAAGC,QAAS,IAC9CC,SAAUJ,IAAMC,SAAS,CAACC,MAAO,EAAGC,QAAS,IAC7CE,IAAKR,KAAKS,MAAsB,GAAhBT,KAAKC,UACrBS,OAAQV,KAAKS,MAAsB,IAAhBT,KAAKC,UACxBU,SAAUX,KAAKS,MAAsB,IAAhBT,KAAKC,UAC1BW,OACIb,EAAe,IACT,eACAA,EAAe,IACf,cACA","file":"3.editor.js","sourcesContent":["import {useTable} from \"react-table\";\r\nimport namor from 'namor'\r\n\r\n\r\nconst AltrpTable = () => {\r\n  // console.log(data);\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => [\r\n          {\r\n            Header: 'First Name',\r\n            accessor: 'firstName',\r\n          },\r\n          {\r\n            Header: 'Last Name',\r\n            accessor: 'lastName',\r\n          },\r\n          {\r\n            Header: 'Age',\r\n            accessor: 'age',\r\n          },\r\n          {\r\n            Header: 'Visits',\r\n            accessor: 'visits',\r\n          },\r\n          {\r\n            Header: 'Status',\r\n            accessor: 'status',\r\n          },\r\n          {\r\n            Header: 'Profile Progress',\r\n            accessor: 'progress',\r\n          },\r\n        ],\r\n        []\r\n    ),\r\n    data: React.useMemo(() => makeData(20), []),\r\n  });\r\n\r\n  return <table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()} className=\"altrp-table-th\">{column.render('Header')}</th>\r\n          ))}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {rows.map((row, i) => {\r\n      prepareRow(row);\r\n      return (\r\n          <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n            {row.cells.map(cell => {\r\n              return <td {...cell.getCellProps()} className=\"altrp-table-td\">{cell.render('Cell')}</td>\r\n            })}\r\n          </tr>\r\n      )\r\n    })}\r\n    </tbody>\r\n  </table>\r\n};\r\n\r\nexport default AltrpTable\r\n\r\nconst range = len => {\r\n  const arr = [];\r\n  for (let i = 0; i < len; i++) {\r\n    arr.push(i)\r\n  }\r\n  return arr\r\n};\r\n\r\nconst newPerson = () => {\r\n  const statusChance = Math.random();\r\n  return {\r\n    firstName: namor.generate({words: 1, numbers: 0}),\r\n    lastName: namor.generate({words: 1, numbers: 0}),\r\n    age: Math.floor(Math.random() * 30),\r\n    visits: Math.floor(Math.random() * 100),\r\n    progress: Math.floor(Math.random() * 100),\r\n    status:\r\n        statusChance > 0.66\r\n            ? 'relationship'\r\n            : statusChance > 0.33\r\n            ? 'complicated'\r\n            : 'single',\r\n  }\r\n};\r\n\r\nfunction makeData(...lens) {\r\n  const makeDataLevel = (depth = 0) => {\r\n    const len = lens[depth];\r\n    return range(len).map(d => {\r\n      return {\r\n        ...newPerson(),\r\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\r\n      }\r\n    })\r\n  };\r\n\r\n  return makeDataLevel()\r\n}\r\n"],"sourceRoot":""}