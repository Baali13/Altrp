{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-table/component.js"],"names":["AltrpTable","settings","query","useQuery","modelName","getResource","getQueried","data","status","error","isFetching","columns","tables_columns","forEach","_column","column_name","accessor","push","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"yOAoEeA,UAxDI,SAAC,GAAsB,IAArBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAAW,EAEIC,YAASD,EAAME,WAAW,WAAK,OAAOF,EAAMG,cAAcC,gBAAtFC,GAFwB,EAEhCC,OAFgC,EAExBD,MAAME,EAFkB,EAElBA,MAAOC,EAFW,EAEXA,WACzBC,EAAU,GAIdV,EAASW,eAAeC,SAAQ,SAAAC,GAC3BA,EAAQC,aAAeD,EAAQE,UAChCL,EAAQM,KAAKH,MATuB,MAkBpCI,mBAAS,CACXP,QAASQ,MAAMC,SACX,kBACIT,GAAW,KAEf,CAACV,EAASW,iBAEdL,KAAMY,MAAMC,SAAQ,kBAAOb,GAAQ,KAAK,CAACA,MAZzCc,EAbsC,EAatCA,cACAC,EAdsC,EActCA,kBACAC,EAfsC,EAetCA,aACAC,EAhBsC,EAgBtCA,KACAC,EAjBsC,EAiBtCA,WAYF,OAAO,iCAAOC,UAAU,eAAkBL,KACxC,6BAAOK,UAAU,oBAChBH,EAAaI,KAAI,SAAAC,GAAW,OACzB,gCAAQA,EAAYC,sBAApB,CAA2CH,UAAU,mBAClDE,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC3B,gCAAQA,EAAOC,iBAAf,CAAiCN,UAAU,mBAAkBK,EAAOE,OAAO,wBAKrF,mCAAWX,IAAX,CAAgCI,UAAU,sBACxCjB,EAAS,8BAAI,wCACTC,EAAa,8BAAI,0CACjBc,EAAKG,KAAI,SAACO,EAAKC,GAEnB,OADAV,EAAWS,GAEP,gCAAQA,EAAIE,cAAZ,CAA2BV,UAAU,mBAClCQ,EAAIG,MAAMV,KAAI,SAAAW,GACb,OAAO,gCAAQA,EAAKC,eAAb,CAA6Bb,UAAU,mBAAkBY,EAAKL,OAAO","file":"afd69b5b370fdebf8bde.bundle.js","sourcesContent":["import {useTable} from \"react-table\";\r\nimport {useQuery} from \"react-query\";\r\nimport namor from 'namor'\r\nimport {useState, useCallback, useEffect} from \"react\";\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query}) => {\r\n\r\n  const { status, data, error, isFetching } = useQuery(query.modelName, ()=>{return query.getResource().getQueried()});\r\n  let columns = [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  settings.tables_columns.forEach(_column=>{\r\n    if(_column.column_name && _column.accessor){\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (data || []), [data]),\r\n  });\r\n\r\n\r\n  return <table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => (\r\n              <th {...column.getHeaderProps()} className=\"altrp-table-th\">{column.render('column_name')}</th>\r\n          ))}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {(error) ? <tr><td>error</td></tr>\r\n        : isFetching ? <tr><td>Loading</td></tr>\r\n        : rows.map((row, i) => {\r\n      prepareRow(row);\r\n      return (\r\n          <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n            {row.cells.map(cell => {\r\n              return <td {...cell.getCellProps()} className=\"altrp-table-td\">{cell.render('Cell')}</td>\r\n            })}\r\n          </tr>\r\n      )\r\n    })}\r\n    </tbody>\r\n  </table>\r\n};\r\n\r\nexport default AltrpTable\r\n\r\nconst range = len => {\r\n  const arr = [];\r\n  for (let i = 0; i < len; i++) {\r\n    arr.push(i)\r\n  }\r\n  return arr\r\n};\r\n\r\nconst newPerson = () => {\r\n  const statusChance = Math.random();\r\n  return {\r\n    firstName: namor.generate({words: 1, numbers: 0}),\r\n    lastName: namor.generate({words: 1, numbers: 0}),\r\n    age: Math.floor(Math.random() * 30),\r\n    visits: Math.floor(Math.random() * 100),\r\n    progress: Math.floor(Math.random() * 100),\r\n    status:\r\n        statusChance > 0.66\r\n            ? 'relationship'\r\n            : statusChance > 0.33\r\n            ? 'complicated'\r\n            : 'single',\r\n  }\r\n};\r\n\r\nfunction makeData(...lens) {\r\n  const makeDataLevel = (depth = 0) => {\r\n    const len = lens[depth];\r\n    return range(len).map(d => {\r\n      return {\r\n        ...newPerson(),\r\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\r\n      }\r\n    })\r\n  };\r\n\r\n  return makeDataLevel()\r\n}\r\n"],"sourceRoot":""}