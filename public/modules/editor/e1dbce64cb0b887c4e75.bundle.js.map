{"version":3,"sources":["webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?2657","webpack:///./resources/modules/editor/src/sass/altrp-pagination.scss?fb79","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js"],"names":["module","exports","push","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","AltrpTable","settings","query","data","tables_columns","length","children","_status","_error","_latestData","_data","useState","page","setPage","sortSetting","setSortSettings","filterSetting","setFilterSettings","filterSettingJSON","JSON","stringify","fetchModels","useCallback","queryData","_","assign","filters","getQueried","pageSize","usePaginatedQuery","modelName","status","resolvedData","latestData","error","useEffect","hasMore","queryCache","prefetchQuery","useQuery","getResource","columns","forEach","_column","column_name","accessor","_accessor","settingsToColumns","useTable","React","useMemo","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","sortingHandler","order_by","order","filterHandler","filteredColumn","searchString","filterParams","className","additional_rows","isArray","map","row","additional_cells","id","cell","rowspan","colspan","role","colSpan","rowSpan","title","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","column","thProps","getHeaderProps","column_is_sorted","onClick","column_width","width","thText","render","iconsManager","renderIcon","column_is_filtered","type","e","stopPropagation","onChange","value","target","renderTh","message","getRowProps","cells","_i","cellContent","linkTag","isEditor","Link","isObject","column_link","original","createElement","to","replace","getCellProps","paginationType","old","Math","max","disabled","prev_text","current_page_text","next_text"],"mappings":"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","file":"e1dbce64cb0b887c4e75.bundle.js","sourcesContent":["exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/sass-loader/dist/cjs.js!./altrp-pagination.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React, {useCallback, useState, useEffect} from \"react\";\r\nimport {useTable, useSortBy} from \"react-table\";\r\nimport {useQuery, usePaginatedQuery, queryCache} from  \"react-query\";\r\nimport '../../../sass/altrp-pagination.scss';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isEditor} from \"../../../../../front-app/src/js/helpers\";\r\nimport {iconsManager} from \"../../../../../admin/src/js/helpers\";\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @param {Query} data\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings, query, data}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n  let _data =[], _status, _error, _latestData;\r\n  const [page, setPage] = useState(1);\r\n  const [sortSetting, setSortSettings] = useState({});\r\n  const [filterSetting, setFilterSettings] = useState({});\r\n  const filterSettingJSON = JSON.stringify(filterSetting);\r\n  const fetchModels = useCallback(async (key, page = 1, sortSetting, filterSetting) => {\r\n    let queryData = {page};\r\n    const filterSettingJSON = JSON.stringify(filterSetting);\r\n    if(sortSetting){\r\n      queryData = _.assign(sortSetting, queryData);\r\n    }\r\n    if(filterSettingJSON.length > 2){\r\n      queryData.filters = filterSettingJSON;\r\n    }\r\n    return query.getQueried(queryData)\r\n  });\r\n  if(query.pageSize){\r\n    /**\r\n     * Если есть пагинация\r\n     */\r\n    const {\r\n      status,\r\n      resolvedData,\r\n      latestData,\r\n      error,\r\n    } = usePaginatedQuery([query.modelName, page, sortSetting, filterSetting ], fetchModels, {});\r\n    _data = resolvedData ? resolvedData[query.modelName] : _data;\r\n    _status = status;\r\n    _error = error;\r\n    _latestData = latestData;\r\n    useEffect(() => {\r\n      if (latestData?.hasMore) {\r\n        queryCache.prefetchQuery([query.modelName, page + 1], fetchModels);\r\n      }\r\n    }, [latestData, fetchModels, page, sortSetting, filterSetting]);\r\n  }else {\r\n    /**\r\n     * Если нет пагинации\r\n     */\r\n    const {status, data, error,} = useQuery(query.modelName, () => {\r\n      return query.getResource().getQueried({...sortSetting,filters: filterSettingJSON})\r\n    }, [query.modelName]);\r\n    _data = data;\r\n    _status = status;\r\n    _error = error;\r\n  }\r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n  if(! _data.length){\r\n    _data = data;\r\n  }\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (_data || []), [_data]),\r\n  }, );\r\n  /**\r\n   * Обработка клика для сортировки\r\n   */\r\n  const sortingHandler = order_by => {\r\n    setSortSettings({\r\n    order_by, \r\n    order: sortSetting &&\r\n      (sortSetting.order_by === order_by) ? (sortSetting.order === \"DESC\" ? \"ASC\" :  \"DESC\") : \"ASC\"\r\n  });\r\n  };\r\n  /**\r\n   * Изменение поля для фильтрации\r\n   */\r\n  const filterHandler = (filteredColumn, searchString) => {\r\n    setPage(1);\r\n    const filterParams = {...filterSetting};\r\n    if(searchString){\r\n      filterParams[filteredColumn] = searchString;\r\n    } else {\r\n      delete filterParams[filteredColumn];\r\n    }\r\n    setFilterSettings(filterParams);\r\n  };\r\n  \r\n\r\n  return <><table className=\"altrp-table\" {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => {\r\n            return renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler});\r\n          }\r\n          )}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className=\"altrp-table-tbody\">\r\n    {_status === \"error\" ? <tr>\r\n              <td>{_error.message}</td>\r\n            </tr> : _status === \"loading\" ? <tr>\r\n              <td>Loading</td>\r\n            </tr>\r\n            : rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                  <tr {...row.getRowProps()} className=\"altrp-table-tr\">\r\n                    {row.cells.map((cell, _i) => {\r\n                      let cellContent = cell.render('Cell');\r\n                      let linkTag = isEditor() ? 'a': Link;\r\n                      /**\r\n                       * Если значение объект или масиив, то отобразим пустую строку\r\n                       */\r\n                      if(_.isObject(cell.value) || _.isArray(cell.value)){\r\n                        cellContent = '';\r\n                      }\r\n                      /**\r\n                       * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                       */\r\n                      if(columns[_i].column_link && row.original.id){\r\n                        cellContent = React.createElement(linkTag, {\r\n                          to: columns[_i].column_link.replace(':id', row.original.id),\r\n                          className: 'altrp-inherit',\r\n                        }, cellContent)\r\n                      }\r\n                      return <td {...cell.getCellProps()} className=\"altrp-table-td\">{cellContent}</td>\r\n                    })}\r\n                  </tr>\r\n              )\r\n            })}\r\n    </tbody>\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => setPage(old => Math.max(old - 1, 0))}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || 'Previous Page'}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() =>\r\n                    setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || 'Next Page'}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\nexport default AltrpTable\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nfunction settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    if (_column.column_name && _column.accessor) {\r\n      _column._accessor = _column.accessor;\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|[]}\r\n */\r\nfunction renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n}\r\n\r\n/**\r\n * Отрисовка главного заголовка колонки для таблицы\r\n * @param {{}}column\r\n * @param {{}}sortSetting\r\n * @param {{}}filterSetting\r\n * @param {function}sortingHandler\r\n * @param {function}filterHandler\r\n * @return {*}\r\n */\r\nfunction renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler}){\r\n  let thProps = {...column.getHeaderProps()};\r\n  thProps.className = 'altrp-table-th';\r\n  if(column.column_is_sorted){\r\n    thProps.onClick = () => sortingHandler(column._accessor);\r\n    thProps.className += ' clickable'\r\n  }\r\n  if(column.column_width){\r\n    thProps.width = column.column_width + '%';\r\n  }\r\n  let thText = column.render('column_name');\r\n  return  <th {...thProps}>\r\n    {thText}\r\n    { sortSetting && (sortSetting.order_by === column._accessor)\r\n      && (sortSetting.order === \"DESC\" ?\r\n        iconsManager().renderIcon('chevron', {className:'rotate-180'}) :\r\n        iconsManager().renderIcon('chevron'))}\r\n    {column.column_is_filtered &&\r\n    <label className=\"altrp-label\">\r\n    <input type=\"text\"\r\n           onClick={e => {e.stopPropagation()}}\r\n           onChange={e=>{\r\n             e.stopPropagation();\r\n             let value = e.target.value;\r\n             filterHandler(column._accessor, value)\r\n           }}\r\n           value={filterSetting[column._accessor] || ''}\r\n           className=\"altrp-field\"/>\r\n    </label>}\r\n\r\n  </th>\r\n}"],"sourceRoot":""}