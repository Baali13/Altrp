<?php

namespace App\Observers\AltrpObservers;

use App\Altrp\Model;
use App\Events\AltrpEvents\{{modelName}}Event;
use App\Observers\BaseObserver;
use {{modelNamespace}};

class {{modelName}}Observer extends BaseObserver
{
    /**
     * Handle the {{modelSingle}} "created" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function created({{modelName}} ${{modelSingle}})
    {
        $model = Model::where('name', '{{modelSingle}}')->first();
        $source = $model->altrp_sources->where('type', 'add')->first();
        $columns = explode(',',$model->table->columns->implode('name',','));

        $data = [
            'model' => $model,
            'source' => $source,
            'columns' => $columns,
            'action_type' => 'create'
        ];

        $this->sendNotifications(${{modelSingle}}, $source->notice_settings, $data);
    }

    /**
     * Handle the {{modelSingle}} "updated" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function updated({{modelName}} ${{modelSingle}})
    {
        $model = Model::where('name', '{{modelSingle}}')->first();
        $source = $model->altrp_sources->where('type', 'update')->first();
        $columns = explode(',',$model->table->columns->implode('name',','));

        $data = [
            'model' => $model,
            'source' => $source,
            'columns' => $columns,
            'action_type' => 'update'
        ];

        $this->sendNotifications(${{modelSingle}}, $source->notice_settings, $data);
    }

    /**
     * Handle the {{modelSingle}} "deleted" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function deleted({{modelName}} ${{modelSingle}})
    {
        $model = Model::where('name', '{{modelSingle}}')->first();
        $source = $model->altrp_sources->where('type', 'delete')->first();
        $columns = explode(',',$model->table->columns->implode('name',','));

        $data = [
            'model' => $model,
            'source' => $source,
            'columns' => $columns,
            'action_type' => 'delete'
        ];

        $this->sendNotifications(${{modelSingle}}, $source->notice_settings, $data);
    }

    /**
     * Handle the {{modelSingle}} "restored" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function restored({{modelName}} ${{modelSingle}})
    {
        //
    }

    /**
     * Handle the {{modelSingle}} "force deleted" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function forceDeleted({{modelName}} ${{modelSingle}})
    {
        //
    }
}
