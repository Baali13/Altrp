<?php

namespace App\Observers\AltrpObservers;

use App\Altrp\Model;
use App\Events\AltrpEvents\{{modelName}}Event;
use App\Observers\BaseObserver;
use App\Services\Robots\RobotsService;
use {{modelNamespace}};

class {{modelName}}Observer extends BaseObserver
{
    /**
     * @var RobotsService
     */
    protected $robotsService;

    /**
     * test_postObserver constructor.
     * @param RobotsService $robotsService
     */
    public function __construct(RobotsService $robotsService)
    {
        $this->robotsService = $robotsService;
    }

    /**
     * Handle the {{modelSingle}} "created" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function created({{modelName}} ${{modelSingle}})
    {
        $model = Model::where('name', '{{modelSingle}}')->first();
        $source = $model->altrp_sources->where('type', 'add')->first();
        $columns = explode(',',$model->table->columns->implode('name',','));

        $data = [
            'model' => $model,
            'source' => $source,
            'columns' => $columns,
            'action_type' => 'create'
        ];

        $this->sendNotifications(${{modelSingle}}, $source->notice_settings, $data);

        $robots = $this->robotsService->getCurrentModelRobots($model);

        foreach ($robots as $robot) {
            if ($robot->start_condition != 'created' || !$robot->enabled) continue;
            $this->robotsService->initRobot($robot)->runRobot();
        }
    }

    /**
     * Handle the {{modelSingle}} "updated" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function updated({{modelName}} ${{modelSingle}})
    {
        $model = Model::where('name', '{{modelSingle}}')->first();
        $source = $model->altrp_sources->where('type', 'update')->first();
        $columns = explode(',',$model->table->columns->implode('name',','));

        $data = [
            'model' => $model,
            'source' => $source,
            'columns' => $columns,
            'action_type' => 'update'
        ];

        $this->sendNotifications(${{modelSingle}}, $source->notice_settings, $data);

        $robots = $this->robotsService->getCurrentModelRobots($model);

        foreach ($robots as $robot) {
            if ($robot->start_condition != 'updated' || !$robot->enabled) continue;
            $this->robotsService->initRobot($robot)->runRobot();
        }
    }

    /**
     * Handle the {{modelSingle}} "deleted" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function deleted({{modelName}} ${{modelSingle}})
    {
        $model = Model::where('name', '{{modelSingle}}')->first();
        $source = $model->altrp_sources->where('type', 'delete')->first();
        $columns = explode(',',$model->table->columns->implode('name',','));

        $data = [
            'model' => $model,
            'source' => $source,
            'columns' => $columns,
            'action_type' => 'delete'
        ];

        if (in_array('deleted_at', $columns)) {
            $this->sendNotifications(${{modelSingle}}, $source->notice_settings, $data);
        }

        $robots = $this->robotsService->getCurrentModelRobots($model);

        foreach ($robots as $robot) {
            if ($robot->start_condition != 'deleted' || !$robot->enabled) continue;
            $this->robotsService->initRobot($robot)->runRobot();
        }
    }

    /**
     * Handle the {{modelSingle}} "restored" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function restored({{modelName}} ${{modelSingle}})
    {
        //
    }

    /**
     * Handle the {{modelSingle}} "force deleted" event.
     *
     * @param  \{{modelNamespace}} ${{modelSingle}}
     * @return void
     */
    public function forceDeleted({{modelName}} ${{modelSingle}})
    {
        //
    }
}
