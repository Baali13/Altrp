<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Controllers\ApiController;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;
{{requestNamespaces}}
// CUSTOM_NAMESPACES_BEGIN - IMPORTANT: Don't remove this comment! Write your namespaces between these comments.
{{customNamespaces}}
// CUSTOM_NAMESPACES_END - IMPORTANT: Don't remove this comment! Write your namespaces between these comments.

class DummyClass extends ApiController
{
    // CUSTOM_TRAITS_BEGIN - IMPORTANT: Don't remove this comment! Write your traits between these comments.
    {{customTraits}}
    // CUSTOM_TRAITS_END - IMPORTANT: Don't remove this comment! Write your traits between these comments.

    // CUSTOM_PROPERTIES_BEGIN - IMPORTANT: Don't remove this comment! Write your properties between these comments.
    {{customProperties}}
    // CUSTOM_PROPERTIES_END - IMPORTANT: Don't remove this comment! Write your properties between these comments.

    /**
     * {{modelName}}Controller constructor.
     */
    public function __construct()
    {
        $this->modelClass = {{modelName}}::class;
    }

    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function options(Request $request)
    {
        $options = {{modelName}}::{{options}}->get();

        return response()->json($options, 200, [], JSON_UNESCAPED_UNICODE);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function store({{storeRequest}} $request)
    {
        ${{crudNameSingular}} = new {{modelName}}($request->all());

        if(${{crudNameSingular}}->save()){
            return response()->json(['success'=>true], 200, [], JSON_UNESCAPED_UNICODE);
        }

        return response()->json(['success'=>false, 'message' => trans("responses.dberror")], 400, [], JSON_UNESCAPED_UNICODE);
    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function show($id)
    {
        ${{crudNameSingular}} = {{modelName}}::find($id){{relations}};

        if(! ${{crudNameSingular}}) {
            return response()->json(trans("responses.not_found.{{crudNameSingular}}"), 404, [], JSON_UNESCAPED_UNICODE);
        }

        return response()->json(${{crudNameSingular}}, 200, [], JSON_UNESCAPED_UNICODE);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function update({{updateRequest}} $request, $id)
    {
        ${{crudNameSingular}} = {{modelName}}::find($id);

        if(! ${{crudNameSingular}}) {
            return response()->json(['success'=>false, 'message' => trans("responses.not_found.{{crudNameSingular}}")], 404, [], JSON_UNESCAPED_UNICODE);
        }

        $result = ${{crudNameSingular}}->update($request->all());

        if($result){
            return response()->json(['success'=>true], 200, [], JSON_UNESCAPED_UNICODE);
        }

        return response()->json(['success'=>false, 'message' => trans("responses.dberror")], 400, [], JSON_UNESCAPED_UNICODE);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        ${{crudNameSingular}} = {{modelName}}::find($id);

        if(! ${{crudNameSingular}}) {
            return response()->json(trans("responses.not_found.{{crudNameSingular}}"), 404, [], JSON_UNESCAPED_UNICODE);
        }

        if(${{crudNameSingular}}->delete()) {
            return response()->json(trans("responses.delete.{{crudNameSingular}}"), 200, [], JSON_UNESCAPED_UNICODE);
        }

        return response()->json(trans("deleteerror"), 400, [], JSON_UNESCAPED_UNICODE);
    }

    /**
     * Update column of resource from storage.
     *
     * @param Request $request
     * @param $id
     * @param $column
     * @return \Illuminate\Http\JsonResponse
     */
    public function updateColumn(Request $request, $id, $column)
    {
        ${{crudNameSingular}} = {{modelName}}::find($id);

        if(! ${{crudNameSingular}}) {
            return response()->json("Table not found", 404, [], JSON_UNESCAPED_UNICODE);
        }

        if (! isset(${{crudNameSingular}}->$column)) {
            return response()->json('Column not exists', 400, [], JSON_UNESCAPED_UNICODE);
        }

        ${{crudNameSingular}}->$column = $request->column_value;

        if (${{crudNameSingular}}->save()) {
            return response()->json('Successfully updated', 200, [], JSON_UNESCAPED_UNICODE);
        }

        return response()->json('Failed to update', 400, [], JSON_UNESCAPED_UNICODE);
    }

    // CUSTOM_METHODS_BEGIN - IMPORTANT: Don't remove this comment! Write your methods between these comments.
    {{customMethods}}
    // CUSTOM_METHODS_END - IMPORTANT: Don't remove this comment! Write your methods between these comments.
}
